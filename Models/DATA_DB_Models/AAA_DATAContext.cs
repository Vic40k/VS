using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

// Code scaffolded by EF Core assumes nullable reference types (NRTs) are not used or disabled.
// If you have enabled NRTs for your project, then un-comment the following line:
// #nullable disable

namespace VS_CRM.Models.DATA_DB_Model
{
    public partial class DATAContext : DbContext
    {
        public DATAContext()
        {
        }

        public DATAContext(DbContextOptions<DATAContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ArtArticDКа> ArtArticDКа { get; set; }
        public virtual DbSet<AskПолкиКартотекиKaidzen> AskПолкиКартотекиKaidzen { get; set; }
        public virtual DbSet<AspnetApplications> AspnetApplications { get; set; }
        public virtual DbSet<AspnetMembership> AspnetMembership { get; set; }
        public virtual DbSet<AspnetPaths> AspnetPaths { get; set; }
        public virtual DbSet<AspnetPersonalizationAllusers> AspnetPersonalizationAllusers { get; set; }
        public virtual DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUser { get; set; }
        public virtual DbSet<AspnetProfile> AspnetProfile { get; set; }
        public virtual DbSet<AspnetRoles> AspnetRoles { get; set; }
        public virtual DbSet<AspnetSchemaVersions> AspnetSchemaVersions { get; set; }
        public virtual DbSet<AspnetUsers> AspnetUsers { get; set; }
        public virtual DbSet<AspnetUsersInRoles> AspnetUsersInRoles { get; set; }
        public virtual DbSet<AspnetWebEventEvents> AspnetWebEventEvents { get; set; }
        public virtual DbSet<AsupКолВУпаковке> AsupКолВУпаковке { get; set; }
        public virtual DbSet<AuditCloseDays> AuditCloseDays { get; set; }
        public virtual DbSet<AuditSklad> AuditSklad { get; set; }
        public virtual DbSet<BiometricData> BiometricData { get; set; }
        public virtual DbSet<BuxgKorReg> BuxgKorReg { get; set; }
        public virtual DbSet<BuxgMen> BuxgMen { get; set; }
        public virtual DbSet<BuxgOpl> BuxgOpl { get; set; }
        public virtual DbSet<BuxgQbРегион> BuxgQbРегион { get; set; }
        public virtual DbSet<BuxgReg> BuxgReg { get; set; }
        public virtual DbSet<BuxgSfРегион> BuxgSfРегион { get; set; }
        public virtual DbSet<BuxgSoРегион> BuxgSoРегион { get; set; }
        public virtual DbSet<BuxgРегион> BuxgРегион { get; set; }
        public virtual DbSet<CashFlowTempKonvMes> CashFlowTempKonvMes { get; set; }
        public virtual DbSet<CashFlowTempMes> CashFlowTempMes { get; set; }
        public virtual DbSet<CashFlowTempMesDet> CashFlowTempMesDet { get; set; }
        public virtual DbSet<CashFlowTempValKorMes> CashFlowTempValKorMes { get; set; }
        public virtual DbSet<CashFlowTempValKorMesDet> CashFlowTempValKorMesDet { get; set; }
        public virtual DbSet<CashFlowTempValMes> CashFlowTempValMes { get; set; }
        public virtual DbSet<CashFlowTempValMesBlg> CashFlowTempValMesBlg { get; set; }
        public virtual DbSet<CashFlowTempValMesDet> CashFlowTempValMesDet { get; set; }
        public virtual DbSet<CashFlowTempValMesDetBlg> CashFlowTempValMesDetBlg { get; set; }
        public virtual DbSet<CashFlowTempValMesDetPr> CashFlowTempValMesDetPr { get; set; }
        public virtual DbSet<CashFlowTempValMesPr> CashFlowTempValMesPr { get; set; }
        public virtual DbSet<CashFlowОстатки> CashFlowОстатки { get; set; }
        public virtual DbSet<CashFlowОстаткиДеньгиВПути> CashFlowОстаткиДеньгиВПути { get; set; }
        public virtual DbSet<CatCatgr> CatCatgr { get; set; }
        public virtual DbSet<CatCatid> CatCatid { get; set; }
        public virtual DbSet<CatCatЗ> CatCatЗ { get; set; }
        public virtual DbSet<CatCatб> CatCatб { get; set; }
        public virtual DbSet<CatCatм> CatCatм { get; set; }
        public virtual DbSet<CatMash> CatMash { get; set; }
        public virtual DbSet<CatMashObj> CatMashObj { get; set; }
        public virtual DbSet<CatPar> CatPar { get; set; }
        public virtual DbSet<CatParMash> CatParMash { get; set; }
        public virtual DbSet<CodId> CodId { get; set; }
        public virtual DbSet<CrmОперацииПоДилерам> CrmОперацииПоДилерам { get; set; }
        public virtual DbSet<CrmОперацииПоКлиентам> CrmОперацииПоКлиентам { get; set; }
        public virtual DbSet<CurrentVersionDb> CurrentVersionDb { get; set; }
        public virtual DbSet<DeliveryTerms> DeliveryTerms { get; set; }
        public virtual DbSet<DlaPlanaTmp> DlaPlanaTmp { get; set; }
        public virtual DbSet<EcbsПоставщики> EcbsПоставщики { get; set; }
        public virtual DbSet<ErpДоступы> ErpДоступы { get; set; }
        public virtual DbSet<FilДебиторскаяЗадолженностьНом> FilДебиторскаяЗадолженностьНом { get; set; }
        public virtual DbSet<FilСуммаЗаявкиДляДолга> FilСуммаЗаявкиДляДолга { get; set; }
        public virtual DbSet<FotoPdf> FotoPdf { get; set; }
        public virtual DbSet<GroupOfGoods> GroupOfGoods { get; set; }
        public virtual DbSet<IssuingBank> IssuingBank { get; set; }
        public virtual DbSet<KaidzenScheta> KaidzenScheta { get; set; }
        public virtual DbSet<KaidzenSchetaCo> KaidzenSchetaCo { get; set; }
        public virtual DbSet<KaidzenSchetaВсеПредыдущие> KaidzenSchetaВсеПредыдущие { get; set; }
        public virtual DbSet<KaidzenSchetaМск> KaidzenSchetaМск { get; set; }
        public virtual DbSet<KaidzenSchetaРегион> KaidzenSchetaРегион { get; set; }
        public virtual DbSet<KaidzenSchetaФилиал> KaidzenSchetaФилиал { get; set; }
        public virtual DbSet<KfВыпуска> KfВыпуска { get; set; }
        public virtual DbSet<KfВыпускаПоТоварам> KfВыпускаПоТоварам { get; set; }
        public virtual DbSet<KlientyРегион> KlientyРегион { get; set; }
        public virtual DbSet<KnНеучт> KnНеучт { get; set; }
        public virtual DbSet<KnНеучтВсе> KnНеучтВсе { get; set; }
        public virtual DbSet<KnНеучтВсеРегион> KnНеучтВсеРегион { get; set; }
        public virtual DbSet<Konvice> Konvice { get; set; }
        public virtual DbSet<KrПоКатегориям> KrПоКатегориям { get; set; }
        public virtual DbSet<LbPrognoz> LbPrognoz { get; set; }
        public virtual DbSet<LbTmp> LbTmp { get; set; }
        public virtual DbSet<LbРегион> LbРегион { get; set; }
        public virtual DbSet<LbФилиал> LbФилиал { get; set; }
        public virtual DbSet<ListLoadingData> ListLoadingData { get; set; }
        public virtual DbSet<ListNames> ListNames { get; set; }
        public virtual DbSet<ListPostTmc> ListPostTmc { get; set; }
        public virtual DbSet<LocalPathes> LocalPathes { get; set; }
        public virtual DbSet<LogAsup> LogAsup { get; set; }
        public virtual DbSet<LogUsers> LogUsers { get; set; }
        public virtual DbSet<MaxПартияТовараВыставкаРегион> MaxПартияТовараВыставкаРегион { get; set; }
        public virtual DbSet<MaxПартияТовараРегион> MaxПартияТовараРегион { get; set; }
        public virtual DbSet<MaxПартияТовараРегионЗаказа> MaxПартияТовараРегионЗаказа { get; set; }
        public virtual DbSet<MedHid> MedHid { get; set; }
        public virtual DbSet<MenuДолжностейПоставки> MenuДолжностейПоставки { get; set; }
        public virtual DbSet<MenuПользователейПоставки> MenuПользователейПоставки { get; set; }
        public virtual DbSet<MenuПоставки> MenuПоставки { get; set; }
        public virtual DbSet<MetodOfPayment> MetodOfPayment { get; set; }
        public virtual DbSet<MetodOfTransport> MetodOfTransport { get; set; }
        public virtual DbSet<ModBs> ModBs { get; set; }
        public virtual DbSet<ModBsFact> ModBsFact { get; set; }
        public virtual DbSet<ModCf> ModCf { get; set; }
        public virtual DbSet<ModCfFact> ModCfFact { get; set; }
        public virtual DbSet<ModCogsFinplan> ModCogsFinplan { get; set; }
        public virtual DbSet<ModIncome> ModIncome { get; set; }
        public virtual DbSet<ModInputData> ModInputData { get; set; }
        public virtual DbSet<ModInputInv> ModInputInv { get; set; }
        public virtual DbSet<ModInputSchwarz> ModInputSchwarz { get; set; }
        public virtual DbSet<ModInputСтоимостьТруда> ModInputСтоимостьТруда { get; set; }
        public virtual DbSet<ModInputСтоимостьТрудаРазбивка> ModInputСтоимостьТрудаРазбивка { get; set; }
        public virtual DbSet<ModSalesForecast> ModSalesForecast { get; set; }
        public virtual DbSet<ModАмортизация> ModАмортизация { get; set; }
        public virtual DbSet<ModРасчетыCogs> ModРасчетыCogs { get; set; }
        public virtual DbSet<ModРасчетыCogsFact> ModРасчетыCogsFact { get; set; }
        public virtual DbSet<ModРасчетыНдс> ModРасчетыНдс { get; set; }
        public virtual DbSet<NId> NId { get; set; }
        public virtual DbSet<NameForms> NameForms { get; set; }
        public virtual DbSet<OplatyQbРегион> OplatyQbРегион { get; set; }
        public virtual DbSet<OplatyРегион> OplatyРегион { get; set; }
        public virtual DbSet<OplУчт> OplУчт { get; set; }
        public virtual DbSet<OrderListKazanlyk> OrderListKazanlyk { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Otgr> Otgr { get; set; }
        public virtual DbSet<ParamList> ParamList { get; set; }
        public virtual DbSet<ParamValue> ParamValue { get; set; }
        public virtual DbSet<PlanAsup> PlanAsup { get; set; }
        public virtual DbSet<PlanWeek> PlanWeek { get; set; }
        public virtual DbSet<PlantTypes> PlantTypes { get; set; }
        public virtual DbSet<PriTmp> PriTmp { get; set; }
        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<Price06072016> Price06072016 { get; set; }
        public virtual DbSet<Price112015> Price112015 { get; set; }
        public virtual DbSet<Price18122017> Price18122017 { get; set; }
        public virtual DbSet<Price190715> Price190715 { get; set; }
        public virtual DbSet<Price19092016> Price19092016 { get; set; }
        public virtual DbSet<Price20170405> Price20170405 { get; set; }
        public virtual DbSet<Price20170712> Price20170712 { get; set; }
        public virtual DbSet<Price20180913> Price20180913 { get; set; }
        public virtual DbSet<Price20191001> Price20191001 { get; set; }
        public virtual DbSet<PriceBlg> PriceBlg { get; set; }
        public virtual DbSet<PriceFirm> PriceFirm { get; set; }
        public virtual DbSet<PriceHistory> PriceHistory { get; set; }
        public virtual DbSet<PriceOld> PriceOld { get; set; }
        public virtual DbSet<PriceUkr> PriceUkr { get; set; }
        public virtual DbSet<PriceПоставки> PriceПоставки { get; set; }
        public virtual DbSet<PriceЦп> PriceЦп { get; set; }
        public virtual DbSet<Prognoz> Prognoz { get; set; }
        public virtual DbSet<PstUzmkСписокТоварныхКодов> PstUzmkСписокТоварныхКодов { get; set; }
        public virtual DbSet<PstАвтоЗаявкиПоРеализации> PstАвтоЗаявкиПоРеализации { get; set; }
        public virtual DbSet<PstАналоги> PstАналоги { get; set; }
        public virtual DbSet<PstАртикулыКлиентов> PstАртикулыКлиентов { get; set; }
        public virtual DbSet<PstВхождениеСкладовВТовНаправления> PstВхождениеСкладовВТовНаправления { get; set; }
        public virtual DbSet<PstКритерииПоставщиков> PstКритерииПоставщиков { get; set; }
        public virtual DbSet<PstМатериалыВЭксплуатации> PstМатериалыВЭксплуатации { get; set; }
        public virtual DbSet<PstНомерТнвэдПоставки> PstНомерТнвэдПоставки { get; set; }
        public virtual DbSet<PstОстатокПоСкладуTmp> PstОстатокПоСкладуTmp { get; set; }
        public virtual DbSet<PstОтветственныеПоТоварам> PstОтветственныеПоТоварам { get; set; }
        public virtual DbSet<PstПерсональныйСписокПозиций> PstПерсональныйСписокПозиций { get; set; }
        public virtual DbSet<PstПодтверждениеСписания> PstПодтверждениеСписания { get; set; }
        public virtual DbSet<PstПроверкаПоОтветственным> PstПроверкаПоОтветственным { get; set; }
        public virtual DbSet<PstРеквизитыФирмДляПоставок> PstРеквизитыФирмДляПоставок { get; set; }
        public virtual DbSet<PstРекламацииСписание> PstРекламацииСписание { get; set; }
        public virtual DbSet<PstСостояниеСкладаПоОтветственным> PstСостояниеСкладаПоОтветственным { get; set; }
        public virtual DbSet<PstСтатусыМатериаловВЭксплуатации> PstСтатусыМатериаловВЭксплуатации { get; set; }
        public virtual DbSet<PstТаможенныеРасходы> PstТаможенныеРасходы { get; set; }
        public virtual DbSet<PstТоварныеНаправленияПоставки> PstТоварныеНаправленияПоставки { get; set; }
        public virtual DbSet<PstТоварыПоОтветственным> PstТоварыПоОтветственным { get; set; }
        public virtual DbSet<PstФормыЗначенияПоУмолчанию> PstФормыЗначенияПоУмолчанию { get; set; }
        public virtual DbSet<RecIds> RecIds { get; set; }
        public virtual DbSet<ReportParams> ReportParams { get; set; }
        public virtual DbSet<ReportQueries> ReportQueries { get; set; }
        public virtual DbSet<Reports> Reports { get; set; }
        public virtual DbSet<Results> Results { get; set; }
        public virtual DbSet<ScanerLog> ScanerLog { get; set; }
        public virtual DbSet<SebestoimostKomplekta> SebestoimostKomplekta { get; set; }
        public virtual DbSet<TPrice> TPrice { get; set; }
        public virtual DbSet<Table1> Table1 { get; set; }
        public virtual DbSet<Table2> Table2 { get; set; }
        public virtual DbSet<TableForFiles> TableForFiles { get; set; }
        public virtual DbSet<TableForFilesTender> TableForFilesTender { get; set; }
        public virtual DbSet<TbhOrderStatuses> TbhOrderStatuses { get; set; }
        public virtual DbSet<TbhPoisk> TbhPoisk { get; set; }
        public virtual DbSet<TbhPollOptions> TbhPollOptions { get; set; }
        public virtual DbSet<TbhPolls> TbhPolls { get; set; }
        public virtual DbSet<TbhProducts> TbhProducts { get; set; }
        public virtual DbSet<TbhShippingMethods> TbhShippingMethods { get; set; }
        public virtual DbSet<TestChert> TestChert { get; set; }
        public virtual DbSet<TestЗаявкиОтДилеровПоставки> TestЗаявкиОтДилеровПоставки { get; set; }
        public virtual DbSet<TestПриходТовараПоставки> TestПриходТовараПоставки { get; set; }
        public virtual DbSet<TestПрогноз> TestПрогноз { get; set; }
        public virtual DbSet<TestПрогнозHeader> TestПрогнозHeader { get; set; }
        public virtual DbSet<TestПрогнозSafe> TestПрогнозSafe { get; set; }
        public virtual DbSet<TestРасходТовараПоставки> TestРасходТовараПоставки { get; set; }
        public virtual DbSet<TmcIn> TmcIn { get; set; }
        public virtual DbSet<Tmp> Tmp { get; set; }
        public virtual DbSet<TmpP> TmpP { get; set; }
        public virtual DbSet<TmpPrice> TmpPrice { get; set; }
        public virtual DbSet<TreeПоставки> TreeПоставки { get; set; }
        public virtual DbSet<Tt> Tt { get; set; }
        public virtual DbSet<Tula> Tula { get; set; }
        public virtual DbSet<UlTmp> UlTmp { get; set; }
        public virtual DbSet<VPrognoz1> VPrognoz1 { get; set; }
        public virtual DbSet<VPrognozAsup> VPrognozAsup { get; set; }
        public virtual DbSet<VPrognozNew1> VPrognozNew1 { get; set; }
        public virtual DbSet<VPrognozNewOld> VPrognozNewOld { get; set; }
        public virtual DbSet<VPrognozPr> VPrognozPr { get; set; }
        public virtual DbSet<VPrognozSafe1> VPrognozSafe1 { get; set; }
        public virtual DbSet<VPrognozSafeNewOld> VPrognozSafeNewOld { get; set; }
        public virtual DbSet<VPrognozSafePr> VPrognozSafePr { get; set; }
        public virtual DbSet<VPrognozSafeTo> VPrognozSafeTo { get; set; }
        public virtual DbSet<VPrognozTo> VPrognozTo { get; set; }
        public virtual DbSet<Vedomo> Vedomo { get; set; }
        public virtual DbSet<Vgazmtk> Vgazmtk { get; set; }
        public virtual DbSet<View1> View1 { get; set; }
        public virtual DbSet<View2> View2 { get; set; }
        public virtual DbSet<View3> View3 { get; set; }
        public virtual DbSet<View4> View4 { get; set; }
        public virtual DbSet<View5> View5 { get; set; }
        public virtual DbSet<View6> View6 { get; set; }
        public virtual DbSet<View7> View7 { get; set; }
        public virtual DbSet<View8> View8 { get; set; }
        public virtual DbSet<Vozv> Vozv { get; set; }
        public virtual DbSet<VozvP> VozvP { get; set; }
        public virtual DbSet<VozvPDilVse> VozvPDilVse { get; set; }
        public virtual DbSet<VwAspnetApplication> VwAspnetApplication { get; set; }
        public virtual DbSet<VwAspnetMembershipUsers> VwAspnetMembershipUsers { get; set; }
        public virtual DbSet<VwAspnetProfiles> VwAspnetProfiles { get; set; }
        public virtual DbSet<VwAspnetRoles> VwAspnetRoles { get; set; }
        public virtual DbSet<VwAspnetUsers> VwAspnetUsers { get; set; }
        public virtual DbSet<VwAspnetUsersInRoles> VwAspnetUsersInRoles { get; set; }
        public virtual DbSet<VwAspnetWebPartStatePaths> VwAspnetWebPartStatePaths { get; set; }
        public virtual DbSet<VwAspnetWebPartStateShared> VwAspnetWebPartStateShared { get; set; }
        public virtual DbSet<VwAspnetWebPartStateUser> VwAspnetWebPartStateUser { get; set; }
        public virtual DbSet<Vypgaz> Vypgaz { get; set; }
        public virtual DbSet<Vypgazarch> Vypgazarch { get; set; }
        public virtual DbSet<Vypiski> Vypiski { get; set; }
        public virtual DbSet<Vypprom> Vypprom { get; set; }
        public virtual DbSet<Vypraif> Vypraif { get; set; }
        public virtual DbSet<Vypraifarch> Vypraifarch { get; set; }
        public virtual DbSet<Vyst> Vyst { get; set; }
        public virtual DbSet<VВсеСборкиAsup> VВсеСборкиAsup { get; set; }
        public virtual DbSet<VГоловныеСборки> VГоловныеСборки { get; set; }
        public virtual DbSet<VПрогнозПроизводство> VПрогнозПроизводство { get; set; }
        public virtual DbSet<VПрогнозТо> VПрогнозТо { get; set; }
        public virtual DbSet<WarehousePlace> WarehousePlace { get; set; }
        public virtual DbSet<ZakFileList> ZakFileList { get; set; }
        public virtual DbSet<ZakMaxТекущаяМощностьУчастков> ZakMaxТекущаяМощностьУчастков { get; set; }
        public virtual DbSet<ZakPlanArt> ZakPlanArt { get; set; }
        public virtual DbSet<ZakPlanMat> ZakPlanMat { get; set; }
        public virtual DbSet<ZakStNSub> ZakStNSub { get; set; }
        public virtual DbSet<ZakЗаказыУчастковПоДням> ZakЗаказыУчастковПоДням { get; set; }
        public virtual DbSet<ZakМощностьОстаток> ZakМощностьОстаток { get; set; }
        public virtual DbSet<ZakМощностьУчастковПоДням> ZakМощностьУчастковПоДням { get; set; }
        public virtual DbSet<ZakПроцентРезервированияМощностиУчастков> ZakПроцентРезервированияМощностиУчастков { get; set; }
        public virtual DbSet<ZakСдано> ZakСдано { get; set; }
        public virtual DbSet<ZakСданоIdТовара> ZakСданоIdТовара { get; set; }
        public virtual DbSet<ZakСданоПоЗаказам> ZakСданоПоЗаказам { get; set; }
        public virtual DbSet<АдресаРассылки> АдресаРассылки { get; set; }
        public virtual DbSet<АдресаЯчеек> АдресаЯчеек { get; set; }
        public virtual DbSet<АдресаЯчеекBg> АдресаЯчеекBg { get; set; }
        public virtual DbSet<АдресаЯчеекАстана> АдресаЯчеекАстана { get; set; }
        public virtual DbSet<АдресаЯчеекУзмк> АдресаЯчеекУзмк { get; set; }
        public virtual DbSet<АктСверкиРегион> АктСверкиРегион { get; set; }
        public virtual DbSet<АктСписания> АктСписания { get; set; }
        public virtual DbSet<АктСписанияДляЗаявки> АктСписанияДляЗаявки { get; set; }
        public virtual DbSet<Амортизация> Амортизация { get; set; }
        public virtual DbSet<АмортизацияБаланс> АмортизацияБаланс { get; set; }
        public virtual DbSet<АртикулыАсупТо> АртикулыАсупТо { get; set; }
        public virtual DbSet<АртикулыАсупТоКа> АртикулыАсупТоКа { get; set; }
        public virtual DbSet<АртикулыКлиента> АртикулыКлиента { get; set; }
        public virtual DbSet<АртикулыМетро> АртикулыМетро { get; set; }
        public virtual DbSet<АсупУчастки> АсупУчастки { get; set; }
        public virtual DbSet<АсупУчасткиУзловая> АсупУчасткиУзловая { get; set; }
        public virtual DbSet<БазовыеМоделиДверей> БазовыеМоделиДверей { get; set; }
        public virtual DbSet<БазовыеСкидки> БазовыеСкидки { get; set; }
        public virtual DbSet<БазовыеЭкспортныеЦены> БазовыеЭкспортныеЦены { get; set; }
        public virtual DbSet<Баланс2011> Баланс2011 { get; set; }
        public virtual DbSet<Баланс2012> Баланс2012 { get; set; }
        public virtual DbSet<Баланс2013> Баланс2013 { get; set; }
        public virtual DbSet<Баланс2014> Баланс2014 { get; set; }
        public virtual DbSet<БалансДеньги2013> БалансДеньги2013 { get; set; }
        public virtual DbSet<БалансДеньги2014> БалансДеньги2014 { get; set; }
        public virtual DbSet<БвГазКв> БвГазКв { get; set; }
        public virtual DbSet<Блоки> Блоки { get; set; }
        public virtual DbSet<БлокиГруппа> БлокиГруппа { get; set; }
        public virtual DbSet<БлокиПодгруппа> БлокиПодгруппа { get; set; }
        public virtual DbSet<БолгарияПриходРасход> БолгарияПриходРасход { get; set; }
        public virtual DbSet<Брони> Брони { get; set; }
        public virtual DbSet<БрониПлана> БрониПлана { get; set; }
        public virtual DbSet<БрониПланаРегион> БрониПланаРегион { get; set; }
        public virtual DbSet<Валюта> Валюта { get; set; }
        public virtual DbSet<ВводОстаткаПоПлатежке> ВводОстаткаПоПлатежке { get; set; }
        public virtual DbSet<ВнутренниеЗаявкиВЗаявке> ВнутренниеЗаявкиВЗаявке { get; set; }
        public virtual DbSet<ВнутренниеЗаявкиДеталиПоставки> ВнутренниеЗаявкиДеталиПоставки { get; set; }
        public virtual DbSet<ВнутренниеЗаявкиПоставки> ВнутренниеЗаявкиПоставки { get; set; }
        public virtual DbSet<ВозвратГрупДляМз> ВозвратГрупДляМз { get; set; }
        public virtual DbSet<ВозвратТовара> ВозвратТовара { get; set; }
        public virtual DbSet<ВозвратТовараРегион> ВозвратТовараРегион { get; set; }
        public virtual DbSet<ВозвратныеСтрочки> ВозвратныеСтрочки { get; set; }
        public virtual DbSet<Возвраты> Возвраты { get; set; }
        public virtual DbSet<Возвраты1> Возвраты1 { get; set; }
        public virtual DbSet<ВозвратыПоставкиТолькоУзмк> ВозвратыПоставкиТолькоУзмк { get; set; }
        public virtual DbSet<ВозвратыПоставкиУзмк> ВозвратыПоставкиУзмк { get; set; }
        public virtual DbSet<ВозвратыТолькоУзмк> ВозвратыТолькоУзмк { get; set; }
        public virtual DbSet<ВозвратыУзмк> ВозвратыУзмк { get; set; }
        public virtual DbSet<ВремяОбработкиДокуметов> ВремяОбработкиДокуметов { get; set; }
        public virtual DbSet<ВремяОбработкиДокуметовСчета> ВремяОбработкиДокуметовСчета { get; set; }
        public virtual DbSet<ВсеНаСкладеПоставки> ВсеНаСкладеПоставки { get; set; }
        public virtual DbSet<ВсеНаСкладеПоставки1> ВсеНаСкладеПоставки1 { get; set; }
        public virtual DbSet<ВсеЮрлица> ВсеЮрлица { get; set; }
        public virtual DbSet<ВсеЮрлицаNew> ВсеЮрлицаNew { get; set; }
        public virtual DbSet<ВсеЮрлицаГрупп> ВсеЮрлицаГрупп { get; set; }
        public virtual DbSet<ВсеЮрлицаГруппNew> ВсеЮрлицаГруппNew { get; set; }
        public virtual DbSet<ВсегоНаВыставкахРегион> ВсегоНаВыставкахРегион { get; set; }
        public virtual DbSet<ВсегоНаСкладахВыставкахРегион> ВсегоНаСкладахВыставкахРегион { get; set; }
        public virtual DbSet<ВсегоНаСкладе> ВсегоНаСкладе { get; set; }
        public virtual DbSet<ВсегоНаСкладеВсе> ВсегоНаСкладеВсе { get; set; }
        public virtual DbSet<ВсегоНаСкладеВсеБезНедлогрузов> ВсегоНаСкладеВсеБезНедлогрузов { get; set; }
        public virtual DbSet<ВсегоНаСкладеВсеНедогрузы> ВсегоНаСкладеВсеНедогрузы { get; set; }
        public virtual DbSet<ВсегоНаСкладеГруппПоТоварам> ВсегоНаСкладеГруппПоТоварам { get; set; }
        public virtual DbSet<ВсегоНаСкладеМосква> ВсегоНаСкладеМосква { get; set; }
        public virtual DbSet<ВсегоНаСкладеОст> ВсегоНаСкладеОст { get; set; }
        public virtual DbSet<ВсегоНаСкладеОстБрони> ВсегоНаСкладеОстБрони { get; set; }
        public virtual DbSet<ВсегоНаСкладеОстРегион> ВсегоНаСкладеОстРегион { get; set; }
        public virtual DbSet<ВсегоНаСкладеПоВсемСкладамРегион> ВсегоНаСкладеПоВсемСкладамРегион { get; set; }
        public virtual DbSet<ВсегоНаСкладеПоПартиямПоставки> ВсегоНаСкладеПоПартиямПоставки { get; set; }
        public virtual DbSet<ВсегоНаСкладеПоставки> ВсегоНаСкладеПоставки { get; set; }
        public virtual DbSet<ВсегоНаСкладеРегион> ВсегоНаСкладеРегион { get; set; }
        public virtual DbSet<ВсегоНаСкладеСЦенойИнвTmp> ВсегоНаСкладеСЦенойИнвTmp { get; set; }
        public virtual DbSet<ВсегоНаСкладеСЦенойТмп> ВсегоНаСкладеСЦенойТмп { get; set; }
        public virtual DbSet<ВсегоНаСкладеСЦенойТмпЗаказы> ВсегоНаСкладеСЦенойТмпЗаказы { get; set; }
        public virtual DbSet<ВсегоНаСкладеСЦенойЦоTmp> ВсегоНаСкладеСЦенойЦоTmp { get; set; }
        public virtual DbSet<ВсегоНаСкладеТип> ВсегоНаСкладеТип { get; set; }
        public virtual DbSet<ВсегоНаСкладеТипВМашине> ВсегоНаСкладеТипВМашине { get; set; }
        public virtual DbSet<ВсегоНаСкладеТипЗаказ> ВсегоНаСкладеТипЗаказ { get; set; }
        public virtual DbSet<ВсегоНаСкладеУзловая> ВсегоНаСкладеУзловая { get; set; }
        public virtual DbSet<ВсегоНаСкладеФилЛб> ВсегоНаСкладеФилЛб { get; set; }
        public virtual DbSet<ВсегоНаСкладеФилиалов> ВсегоНаСкладеФилиалов { get; set; }
        public virtual DbSet<ВсегоПоВыставкамПоДилерамРегион> ВсегоПоВыставкамПоДилерамРегион { get; set; }
        public virtual DbSet<ВыборСкладаПереводаРегион> ВыборСкладаПереводаРегион { get; set; }
        public virtual DbSet<ВыбратьКонтсрукциюИзМатрицы> ВыбратьКонтсрукциюИзМатрицы { get; set; }
        public virtual DbSet<ВыпускСосенкиМесяц> ВыпускСосенкиМесяц { get; set; }
        public virtual DbSet<ВыпускУзловаяМесяц> ВыпускУзловаяМесяц { get; set; }
        public virtual DbSet<ВыставкаЦенаТовара> ВыставкаЦенаТовара { get; set; }
        public virtual DbSet<ВыставкаЦенаТовараДилеры> ВыставкаЦенаТовараДилеры { get; set; }
        public virtual DbSet<ВыставкиТмпРегион> ВыставкиТмпРегион { get; set; }
        public virtual DbSet<ГдеЛежитТовар> ГдеЛежитТовар { get; set; }
        public virtual DbSet<ГдеЛежитТоварBg> ГдеЛежитТоварBg { get; set; }
        public virtual DbSet<ГдеЛежитТоварАстана> ГдеЛежитТоварАстана { get; set; }
        public virtual DbSet<ГдеЛежитТоварУзмк> ГдеЛежитТоварУзмк { get; set; }
        public virtual DbSet<Глобальные> Глобальные { get; set; }
        public virtual DbSet<ГлобальныеРегион> ГлобальныеРегион { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам> ГодовойОтчетПоФилиалам { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2011> ГодовойОтчетПоФилиалам2011 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2012> ГодовойОтчетПоФилиалам2012 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2013> ГодовойОтчетПоФилиалам2013 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2014> ГодовойОтчетПоФилиалам2014 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2015> ГодовойОтчетПоФилиалам2015 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2016> ГодовойОтчетПоФилиалам2016 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2017> ГодовойОтчетПоФилиалам2017 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2018> ГодовойОтчетПоФилиалам2018 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2019> ГодовойОтчетПоФилиалам2019 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2020> ГодовойОтчетПоФилиалам2020 { get; set; }
        public virtual DbSet<ГодовойОтчетПоФилиалам2021> ГодовойОтчетПоФилиалам2021 { get; set; }
        public virtual DbSet<ГрафикОтгрузокФилиалов> ГрафикОтгрузокФилиалов { get; set; }
        public virtual DbSet<ГрафикПродаж> ГрафикПродаж { get; set; }
        public virtual DbSet<ГрафикПродажЕдиный> ГрафикПродажЕдиный { get; set; }
        public virtual DbSet<ГрафикПродажЗаТриГодаNew> ГрафикПродажЗаТриГодаNew { get; set; }
        public virtual DbSet<ГрафикПродажЗаТриГодаКл> ГрафикПродажЗаТриГодаКл { get; set; }
        public virtual DbSet<ГрафикПродажЗаТриГодаРегион> ГрафикПродажЗаТриГодаРегион { get; set; }
        public virtual DbSet<ГрафикПродажЗаТриГодаСвРегион> ГрафикПродажЗаТриГодаСвРегион { get; set; }
        public virtual DbSet<ГрафикПродажЗаТриГодаЦо> ГрафикПродажЗаТриГодаЦо { get; set; }
        public virtual DbSet<ГрафикПродажПг> ГрафикПродажПг { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцаПгКл> ГрафикПродажПоМесяцаПгКл { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцам> ГрафикПродажПоМесяцам { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамКл> ГрафикПродажПоМесяцамКл { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамПг> ГрафикПродажПоМесяцамПг { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамРегион> ГрафикПродажПоМесяцамРегион { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамРегионПг> ГрафикПродажПоМесяцамРегионПг { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамСвРегион> ГрафикПродажПоМесяцамСвРегион { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамСвРегионПг> ГрафикПродажПоМесяцамСвРегионПг { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамЦо> ГрафикПродажПоМесяцамЦо { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамЦоГр> ГрафикПродажПоМесяцамЦоГр { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамиПгЦо> ГрафикПродажПоМесяцамиПгЦо { get; set; }
        public virtual DbSet<ГрафикПродажПоМесяцамиПгЦоГр> ГрафикПродажПоМесяцамиПгЦоГр { get; set; }
        public virtual DbSet<ГрузополучателиФилиалы> ГрузополучателиФилиалы { get; set; }
        public virtual DbSet<ГруппыИПодгруппы> ГруппыИПодгруппы { get; set; }
        public virtual DbSet<ГруппыКритериев> ГруппыКритериев { get; set; }
        public virtual DbSet<ГтдОсталось> ГтдОсталось { get; set; }
        public virtual DbSet<ГтдТовар> ГтдТовар { get; set; }
        public virtual DbSet<ГтдТоварГрупп> ГтдТоварГрупп { get; set; }
        public virtual DbSet<ГтдТоварПриход> ГтдТоварПриход { get; set; }
        public virtual DbSet<ДанныеДляПоставок> ДанныеДляПоставок { get; set; }
        public virtual DbSet<ДанныеДляПоставокТула> ДанныеДляПоставокТула { get; set; }
        public virtual DbSet<ДанныеСПроходной> ДанныеСПроходной { get; set; }
        public virtual DbSet<ДатаКорректировкиУвеличенияРегион> ДатаКорректировкиУвеличенияРегион { get; set; }
        public virtual DbSet<ДатаКорректировкиУвеличенияЦо> ДатаКорректировкиУвеличенияЦо { get; set; }
        public virtual DbSet<ДатаПрихода> ДатаПрихода { get; set; }
        public virtual DbSet<ДатаПриходаРегион> ДатаПриходаРегион { get; set; }
        public virtual DbSet<Двери> Двери { get; set; }
        public virtual DbSet<ДебКредТмп> ДебКредТмп { get; set; }
        public virtual DbSet<ДебТмп> ДебТмп { get; set; }
        public virtual DbSet<ДебиторскаяЗадолженность> ДебиторскаяЗадолженность { get; set; }
        public virtual DbSet<ДебиторскаяЗадолженностьПоВыставкам> ДебиторскаяЗадолженностьПоВыставкам { get; set; }
        public virtual DbSet<ДебиторскаяЗадолженностьПоКлиентам> ДебиторскаяЗадолженностьПоКлиентам { get; set; }
        public virtual DbSet<ДебиторскаяЗадолженностьПоКлиентамПодр> ДебиторскаяЗадолженностьПоКлиентамПодр { get; set; }
        public virtual DbSet<ДеревоТоваров2уроверь> ДеревоТоваров2уроверь { get; set; }
        public virtual DbSet<ДеревоТоваров3уровень> ДеревоТоваров3уровень { get; set; }
        public virtual DbSet<ДеревоТоваров4уровень> ДеревоТоваров4уровень { get; set; }
        public virtual DbSet<Дет1> Дет1 { get; set; }
        public virtual DbSet<Дет2> Дет2 { get; set; }
        public virtual DbSet<Дет3> Дет3 { get; set; }
        public virtual DbSet<Дет4> Дет4 { get; set; }
        public virtual DbSet<Дет5> Дет5 { get; set; }
        public virtual DbSet<Дет6> Дет6 { get; set; }
        public virtual DbSet<Дет7> Дет7 { get; set; }
        public virtual DbSet<Детали> Детали { get; set; }
        public virtual DbSet<ДилерЗДоступы> ДилерЗДоступы { get; set; }
        public virtual DbSet<ДилерМфУзл> ДилерМфУзл { get; set; }
        public virtual DbSet<ДилерыДляОтчета> ДилерыДляОтчета { get; set; }
        public virtual DbSet<ДилерыДляОтчетаГрупп> ДилерыДляОтчетаГрупп { get; set; }
        public virtual DbSet<ДилерыДляОтчетаЦоМф> ДилерыДляОтчетаЦоМф { get; set; }
        public virtual DbSet<ДилерыМосквы> ДилерыМосквы { get; set; }
        public virtual DbSet<ДляLb> ДляLb { get; set; }
        public virtual DbSet<ДляВебПогрузочного> ДляВебПогрузочного { get; set; }
        public virtual DbSet<ДляВебПогрузочногоDb> ДляВебПогрузочногоDb { get; set; }
        public virtual DbSet<ДляЗаказаКазанлык> ДляЗаказаКазанлык { get; set; }
        public virtual DbSet<ДляЛепестковойТмп> ДляЛепестковойТмп { get; set; }
        public virtual DbSet<ДляОтчетаAbcРегион> ДляОтчетаAbcРегион { get; set; }
        public virtual DbSet<ДляОтчетаАвсРегион> ДляОтчетаАвсРегион { get; set; }
        public virtual DbSet<ДляОтчетаИздержки> ДляОтчетаИздержки { get; set; }
        public virtual DbSet<ДляОтчетаРеестрПлатежейОбщийДвери> ДляОтчетаРеестрПлатежейОбщийДвери { get; set; }
        public virtual DbSet<ДляОтчетаРеестрПлатежейОбщих> ДляОтчетаРеестрПлатежейОбщих { get; set; }
        public virtual DbSet<ДляПерекачки> ДляПерекачки { get; set; }
        public virtual DbSet<ДляПрайсЛистаРегион> ДляПрайсЛистаРегион { get; set; }
        public virtual DbSet<ДляПроверкиОстатков> ДляПроверкиОстатков { get; set; }
        public virtual DbSet<ДляПросмотраЗаявок> ДляПросмотраЗаявок { get; set; }
        public virtual DbSet<ДляПросмотраЗаявокNew> ДляПросмотраЗаявокNew { get; set; }
        public virtual DbSet<ДляПросмотраЗаявокВыполненныхСервисом> ДляПросмотраЗаявокВыполненныхСервисом { get; set; }
        public virtual DbSet<ДляПросмотраЗаявокСервисом> ДляПросмотраЗаявокСервисом { get; set; }
        public virtual DbSet<ДляПросмотраСчетовВыполненныхСервисом> ДляПросмотраСчетовВыполненныхСервисом { get; set; }
        public virtual DbSet<ДляПросмотраСчетовСервисом> ДляПросмотраСчетовСервисом { get; set; }
        public virtual DbSet<ДляРасходDib> ДляРасходDib { get; set; }
        public virtual DbSet<ДляРасхода> ДляРасхода { get; set; }
        public virtual DbSet<Дни> Дни { get; set; }
        public virtual DbSet<ДокументыEcbs> ДокументыEcbs { get; set; }
        public virtual DbSet<ДокументыПретензии> ДокументыПретензии { get; set; }
        public virtual DbSet<ДолгПоЗаявкеТмпРегион> ДолгПоЗаявкеТмпРегион { get; set; }
        public virtual DbSet<ДолгПоЗаявкеТмпРегион1111> ДолгПоЗаявкеТмпРегион1111 { get; set; }
        public virtual DbSet<ДопскидкаИстория> ДопскидкаИстория { get; set; }
        public virtual DbSet<ДопскидкаИсторияГрупп> ДопскидкаИсторияГрупп { get; set; }
        public virtual DbSet<ДопскидкаИсторияРегион> ДопскидкаИсторияРегион { get; set; }
        public virtual DbSet<ДопскидкаИсторияРегионГрупп> ДопскидкаИсторияРегионГрупп { get; set; }
        public virtual DbSet<ДоступККлиентам> ДоступККлиентам { get; set; }
        public virtual DbSet<ДоходПоКлиентамРегион> ДоходПоКлиентамРегион { get; set; }
        public virtual DbSet<ДоходПоКлиентамРегионКолсч> ДоходПоКлиентамРегионКолсч { get; set; }
        public virtual DbSet<ДоходПоКлиентамРегионПиление> ДоходПоКлиентамРегионПиление { get; set; }
        public virtual DbSet<Духовный> Духовный { get; set; }
        public virtual DbSet<ЕдиныеДилеры> ЕдиныеДилеры { get; set; }
        public virtual DbSet<ЖурналИнноваций> ЖурналИнноваций { get; set; }
        public virtual DbSet<ЖурналПроектовСертификации> ЖурналПроектовСертификации { get; set; }
        public virtual DbSet<ЗЗависимости> ЗЗависимости { get; set; }
        public virtual DbSet<ЗЗадачи> ЗЗадачи { get; set; }
        public virtual DbSet<ЗИт> ЗИт { get; set; }
        public virtual DbSet<ЗИтОценки> ЗИтОценки { get; set; }
        public virtual DbSet<ЗКритерииДолж> ЗКритерииДолж { get; set; }
        public virtual DbSet<ЗКритерииСотр> ЗКритерииСотр { get; set; }
        public virtual DbSet<ЗОценки> ЗОценки { get; set; }
        public virtual DbSet<ЗОценкиДолж> ЗОценкиДолж { get; set; }
        public virtual DbSet<ЗОценкиСотр> ЗОценкиСотр { get; set; }
        public virtual DbSet<ЗПоказатели> ЗПоказатели { get; set; }
        public virtual DbSet<ЗПоказателиБренд> ЗПоказателиБренд { get; set; }
        public virtual DbSet<ЗПоложение> ЗПоложение { get; set; }
        public virtual DbSet<ЗПоложениеЗависимости> ЗПоложениеЗависимости { get; set; }
        public virtual DbSet<ЗПоложениеОценки> ЗПоложениеОценки { get; set; }
        public virtual DbSet<ЗаготовкаОтчетФин> ЗаготовкаОтчетФин { get; set; }
        public virtual DbSet<ЗаказыПоставки> ЗаказыПоставки { get; set; }
        public virtual DbSet<ЗаказыРегион> ЗаказыРегион { get; set; }
        public virtual DbSet<ЗаказыТовар> ЗаказыТовар { get; set; }
        public virtual DbSet<ЗапросПоНоменклатуре> ЗапросПоНоменклатуре { get; set; }
        public virtual DbSet<ЗаявкиБезДолга> ЗаявкиБезДолга { get; set; }
        public virtual DbSet<ЗаявкиБезДолгаДол> ЗаявкиБезДолгаДол { get; set; }
        public virtual DbSet<ЗаявкиБезОплатыРегион> ЗаявкиБезОплатыРегион { get; set; }
        public virtual DbSet<ЗаявкиНаПогрузкуНаНеделю> ЗаявкиНаПогрузкуНаНеделю { get; set; }
        public virtual DbSet<ЗаявкиНаУдаление> ЗаявкиНаУдаление { get; set; }
        public virtual DbSet<ЗаявкиНаУдалениеЗавтра> ЗаявкиНаУдалениеЗавтра { get; set; }
        public virtual DbSet<ЗаявкиНаУдалениеОмп> ЗаявкиНаУдалениеОмп { get; set; }
        public virtual DbSet<ЗаявкиНаУдалениеРегионы> ЗаявкиНаУдалениеРегионы { get; set; }
        public virtual DbSet<ЗаявкиНаУдалениеУзмк> ЗаявкиНаУдалениеУзмк { get; set; }
        public virtual DbSet<ЗаявкиНеоплаченныеРегион> ЗаявкиНеоплаченныеРегион { get; set; }
        public virtual DbSet<ЗаявкиОплаченныеДляРаспискиРегион> ЗаявкиОплаченныеДляРаспискиРегион { get; set; }
        public virtual DbSet<ЗаявкиОтДилеров> ЗаявкиОтДилеров { get; set; }
        public virtual DbSet<ЗаявкиОтДилеров1> ЗаявкиОтДилеров1 { get; set; }
        public virtual DbSet<ЗаявкиОтДилеровПоставки> ЗаявкиОтДилеровПоставки { get; set; }
        public virtual DbSet<ЗаявкиОтДилеровПоставкиOld> ЗаявкиОтДилеровПоставкиOld { get; set; }
        public virtual DbSet<ЗаявкиОтДилеровПоставкиДо2018> ЗаявкиОтДилеровПоставкиДо2018 { get; set; }
        public virtual DbSet<ЗаявкиОтДилеровРегион> ЗаявкиОтДилеровРегион { get; set; }
        public virtual DbSet<ЗаявкиОтпущенныеРегион> ЗаявкиОтпущенныеРегион { get; set; }
        public virtual DbSet<ЗаявкиПеремещенияРегион> ЗаявкиПеремещенияРегион { get; set; }
        public virtual DbSet<ЗаявкиСВыписанСчет> ЗаявкиСВыписанСчет { get; set; }
        public virtual DbSet<ЗаявкиСДолгомНоОплачены> ЗаявкиСДолгомНоОплачены { get; set; }
        public virtual DbSet<ЗаявкиСОплатойРегион> ЗаявкиСОплатойРегион { get; set; }
        public virtual DbSet<ЗаявкиСУслугами> ЗаявкиСУслугами { get; set; }
        public virtual DbSet<ИзмененияАртикулаСкладскойПрограммы> ИзмененияАртикулаСкладскойПрограммы { get; set; }
        public virtual DbSet<Информер> Информер { get; set; }
        public virtual DbSet<ИсключениеИзСкидки> ИсключениеИзСкидки { get; set; }
        public virtual DbSet<ИсторияАвс> ИсторияАвс { get; set; }
        public virtual DbSet<ИсторияГтд> ИсторияГтд { get; set; }
        public virtual DbSet<ИсторияЛогистики> ИсторияЛогистики { get; set; }
        public virtual DbSet<ИсторияОплатыРегион> ИсторияОплатыРегион { get; set; }
        public virtual DbSet<ИсторияЦен> ИсторияЦен { get; set; }
        public virtual DbSet<ИсходныеДанные> ИсходныеДанные { get; set; }
        public virtual DbSet<Календарь> Календарь { get; set; }
        public virtual DbSet<Калькулятор> Калькулятор { get; set; }
        public virtual DbSet<Кампании> Кампании { get; set; }
        public virtual DbSet<КанбанТмп> КанбанТмп { get; set; }
        public virtual DbSet<КарточкаАрхивВозвратовРегион> КарточкаАрхивВозвратовРегион { get; set; }
        public virtual DbSet<КарточкаНачалоВыставкаРегион> КарточкаНачалоВыставкаРегион { get; set; }
        public virtual DbSet<КарточкаНачалоРегион> КарточкаНачалоРегион { get; set; }
        public virtual DbSet<КарточкаПриходРегион> КарточкаПриходРегион { get; set; }
        public virtual DbSet<КарточкаРасходВыставкиРегион> КарточкаРасходВыставкиРегион { get; set; }
        public virtual DbSet<КарточкаРасходРегион> КарточкаРасходРегион { get; set; }
        public virtual DbSet<КаталогДляСайта> КаталогДляСайта { get; set; }
        public virtual DbSet<КаталогИмпорт> КаталогИмпорт { get; set; }
        public virtual DbSet<КатегорииТовара> КатегорииТовара { get; set; }
        public virtual DbSet<КлиентЗДоступы> КлиентЗДоступы { get; set; }
        public virtual DbSet<КлиентМенеджер> КлиентМенеджер { get; set; }
        public virtual DbSet<КлиентМенеждер> КлиентМенеждер { get; set; }
        public virtual DbSet<КлиентыСвежие> КлиентыСвежие { get; set; }
        public virtual DbSet<КодГородаСкладаВсе> КодГородаСкладаВсе { get; set; }
        public virtual DbSet<КодГородаСкладаВсеBlg> КодГородаСкладаВсеBlg { get; set; }
        public virtual DbSet<КодыЗаказов> КодыЗаказов { get; set; }
        public virtual DbSet<КодыЗаказовДляИстории> КодыЗаказовДляИстории { get; set; }
        public virtual DbSet<КодыЗаказовРегион> КодыЗаказовРегион { get; set; }
        public virtual DbSet<КоличествоВСчетахИзЗаказов> КоличествоВСчетахИзЗаказов { get; set; }
        public virtual DbSet<КоличествоВСчетахИзЗаказовBg> КоличествоВСчетахИзЗаказовBg { get; set; }
        public virtual DbSet<КоличествоВСчетахИзЗаказовРегион> КоличествоВСчетахИзЗаказовРегион { get; set; }
        public virtual DbSet<КоличествоВСчетахИзЗаказовСДатами> КоличествоВСчетахИзЗаказовСДатами { get; set; }
        public virtual DbSet<КоличествоВСчетахИзЗаказовЦо> КоличествоВСчетахИзЗаказовЦо { get; set; }
        public virtual DbSet<Комплектация> Комплектация { get; set; }
        public virtual DbSet<КонстантыДляСебестоимости> КонстантыДляСебестоимости { get; set; }
        public virtual DbSet<КонтактыПоставщиков> КонтактыПоставщиков { get; set; }
        public virtual DbSet<Контейнера> Контейнера { get; set; }
        public virtual DbSet<КонтрольКлиентов> КонтрольКлиентов { get; set; }
        public virtual DbSet<КонтрольМенеджеров> КонтрольМенеджеров { get; set; }
        public virtual DbSet<КонтрольМенеджеровРегион> КонтрольМенеджеровРегион { get; set; }
        public virtual DbSet<КредТмп> КредТмп { get; set; }
        public virtual DbSet<КредиторкаТмп> КредиторкаТмп { get; set; }
        public virtual DbSet<КредиторскаяЗадолженностьКл> КредиторскаяЗадолженностьКл { get; set; }
        public virtual DbSet<КредиторскаяЗадолженностьКлОб> КредиторскаяЗадолженностьКлОб { get; set; }
        public virtual DbSet<КредиторскаяЗадолженностьНеучт> КредиторскаяЗадолженностьНеучт { get; set; }
        public virtual DbSet<КредиторскаяЗадолженностьНеучтКл> КредиторскаяЗадолженностьНеучтКл { get; set; }
        public virtual DbSet<КредиторскаяЗадолженностьОб> КредиторскаяЗадолженностьОб { get; set; }
        public virtual DbSet<КредиторскаяЗадолженностьПоКлиентам> КредиторскаяЗадолженностьПоКлиентам { get; set; }
        public virtual DbSet<КредиторскаяЗадолженностьПоКлиентамПодр> КредиторскаяЗадолженностьПоКлиентамПодр { get; set; }
        public virtual DbSet<КурсAed> КурсAed { get; set; }
        public virtual DbSet<КурсBgn> КурсBgn { get; set; }
        public virtual DbSet<КурсДляРасчета> КурсДляРасчета { get; set; }
        public virtual DbSet<КурсДоллара> КурсДоллара { get; set; }
        public virtual DbSet<КурсЕвро> КурсЕвро { get; set; }
        public virtual DbSet<КурсЕвроРеестр> КурсЕвроРеестр { get; set; }
        public virtual DbSet<КурсИен> КурсИен { get; set; }
        public virtual DbSet<КурсЛев> КурсЛев { get; set; }
        public virtual DbSet<КурсФранка> КурсФранка { get; set; }
        public virtual DbSet<КурсФунтов> КурсФунтов { get; set; }
        public virtual DbSet<ЛюдиГрейд> ЛюдиГрейд { get; set; }
        public virtual DbSet<ЛюдиРегион> ЛюдиРегион { get; set; }
        public virtual DbSet<МaxПартияТовараОнлайн> МaxПартияТовараОнлайн { get; set; }
        public virtual DbSet<МаксТорг> МаксТорг { get; set; }
        public virtual DbSet<МаксТоргПервая> МаксТоргПервая { get; set; }
        public virtual DbSet<МаксТоргПервая11111> МаксТоргПервая11111 { get; set; }
        public virtual DbSet<МаксимальнаяМощностьУчастка> МаксимальнаяМощностьУчастка { get; set; }
        public virtual DbSet<МаксимальнаяМощностьУчасткаПоДням> МаксимальнаяМощностьУчасткаПоДням { get; set; }
        public virtual DbSet<МаксимальныйНомер> МаксимальныйНомер { get; set; }
        public virtual DbSet<МаксимальныйНомерBlgРегион> МаксимальныйНомерBlgРегион { get; set; }
        public virtual DbSet<МаксимальныйНомерОплаты> МаксимальныйНомерОплаты { get; set; }
        public virtual DbSet<МаксимальныйНомерОплатыРегион> МаксимальныйНомерОплатыРегион { get; set; }
        public virtual DbSet<МаксимальныйНомерРегион> МаксимальныйНомерРегион { get; set; }
        public virtual DbSet<МаксимальныйНомерСпец> МаксимальныйНомерСпец { get; set; }
        public virtual DbSet<МаксимальныйНомерТехноимпорт> МаксимальныйНомерТехноимпорт { get; set; }
        public virtual DbSet<МаксимальныйСчет> МаксимальныйСчет { get; set; }
        public virtual DbSet<МатериалыLifo> МатериалыLifo { get; set; }
        public virtual DbSet<МахПартияДляПриходовСос> МахПартияДляПриходовСос { get; set; }
        public virtual DbSet<МахПартияДляПриходовУзмк> МахПартияДляПриходовУзмк { get; set; }
        public virtual DbSet<МенеджерДляКлиента> МенеджерДляКлиента { get; set; }
        public virtual DbSet<Менеджеры> Менеджеры { get; set; }
        public virtual DbSet<МенеджерыРегион> МенеджерыРегион { get; set; }
        public virtual DbSet<Месяцы> Месяцы { get; set; }
        public virtual DbSet<МзНедели> МзНедели { get; set; }
        public virtual DbSet<МоделиДляПрогнозаРегион> МоделиДляПрогнозаРегион { get; set; }
        public virtual DbSet<НазванияПоПартиямПоставки> НазванияПоПартиямПоставки { get; set; }
        public virtual DbSet<НакладПереводСВыставкиРегион> НакладПереводСВыставкиРегион { get; set; }
        public virtual DbSet<НакладнаяДляТтТорг12> НакладнаяДляТтТорг12 { get; set; }
        public virtual DbSet<НакладнаяДляТтТранспортная> НакладнаяДляТтТранспортная { get; set; }
        public virtual DbSet<НаличиеНаСкладах> НаличиеНаСкладах { get; set; }
        public virtual DbSet<НаличиеНаСкладахВсе> НаличиеНаСкладахВсе { get; set; }
        public virtual DbSet<НаличиеНаСкладахЗап> НаличиеНаСкладахЗап { get; set; }
        public virtual DbSet<НаличиеНаСкладе> НаличиеНаСкладе { get; set; }
        public virtual DbSet<НаличиеНаСкладеГлавном> НаличиеНаСкладеГлавном { get; set; }
        public virtual DbSet<НаличиеСУчетомБронейРегион> НаличиеСУчетомБронейРегион { get; set; }
        public virtual DbSet<НаличиеСУчетомБронейРегион1111> НаличиеСУчетомБронейРегион1111 { get; set; }
        public virtual DbSet<НалоговыеПоОплатеРегион> НалоговыеПоОплатеРегион { get; set; }
        public virtual DbSet<НастройкаСменыФирм> НастройкаСменыФирм { get; set; }
        public virtual DbSet<НачалоДвижениеТмцРегион> НачалоДвижениеТмцРегион { get; set; }
        public virtual DbSet<НачалоДвижениеФил> НачалоДвижениеФил { get; set; }
        public virtual DbSet<НачалоРегион> НачалоРегион { get; set; }
        public virtual DbSet<НачальныйОстатокПоставки> НачальныйОстатокПоставки { get; set; }
        public virtual DbSet<НедогрузыДилеров> НедогрузыДилеров { get; set; }
        public virtual DbSet<НедогрузыДилеровСос> НедогрузыДилеровСос { get; set; }
        public virtual DbSet<НедогрузыКлиентовРегион> НедогрузыКлиентовРегион { get; set; }
        public virtual DbSet<НедогрузыКлиентовФактРегион> НедогрузыКлиентовФактРегион { get; set; }
        public virtual DbSet<НезавершенныеЗаказыBg> НезавершенныеЗаказыBg { get; set; }
        public virtual DbSet<НезавершенныеЗаказыТоварBg> НезавершенныеЗаказыТоварBg { get; set; }
        public virtual DbSet<НельзяПравитьКомплект> НельзяПравитьКомплект { get; set; }
        public virtual DbSet<НеперенесенныеОплатыРегион> НеперенесенныеОплатыРегион { get; set; }
        public virtual DbSet<НовичкиТмп> НовичкиТмп { get; set; }
        public virtual DbSet<Ном> Ном { get; set; }
        public virtual DbSet<НомПогТмп> НомПогТмп { get; set; }
        public virtual DbSet<НоменклатураЗмк> НоменклатураЗмк { get; set; }
        public virtual DbSet<НоменклатураКомпектующихПоставка> НоменклатураКомпектующихПоставка { get; set; }
        public virtual DbSet<НоменклатураКомплектующих> НоменклатураКомплектующих { get; set; }
        public virtual DbSet<НоменклатураСИсключить> НоменклатураСИсключить { get; set; }
        public virtual DbSet<НоменклатураТоваров> НоменклатураТоваров { get; set; }
        public virtual DbSet<НоменклатураТоваров2Ка> НоменклатураТоваров2Ка { get; set; }
        public virtual DbSet<НоменклатураТоваровАртикул> НоменклатураТоваровАртикул { get; set; }
        public virtual DbSet<НоменклатураТоваровАрхив> НоменклатураТоваровАрхив { get; set; }
        public virtual DbSet<НоменклатураТоваровЗагрузкаКазанлык> НоменклатураТоваровЗагрузкаКазанлык { get; set; }
        public virtual DbSet<НоменклатураТоваровКа> НоменклатураТоваровКа { get; set; }
        public virtual DbSet<НоменклатураТоваровПоставки> НоменклатураТоваровПоставки { get; set; }
        public virtual DbSet<НоменклатураТоваровПоставкиOld> НоменклатураТоваровПоставкиOld { get; set; }
        public virtual DbSet<НоменклатураТоваровПоставкиАрхив> НоменклатураТоваровПоставкиАрхив { get; set; }
        public virtual DbSet<НоменклатураТоваровПоставкиАрхив20180815> НоменклатураТоваровПоставкиАрхив20180815 { get; set; }
        public virtual DbSet<НоменклатураТоваровПоставкиОписание> НоменклатураТоваровПоставкиОписание { get; set; }
        public virtual DbSet<НоменклатураТоваровПрайс> НоменклатураТоваровПрайс { get; set; }
        public virtual DbSet<НоменклатураТоваровСтатусы> НоменклатураТоваровСтатусы { get; set; }
        public virtual DbSet<НомерПрефиксПереноскаРегион> НомерПрефиксПереноскаРегион { get; set; }
        public virtual DbSet<НомерПрефиксРегион> НомерПрефиксРегион { get; set; }
        public virtual DbSet<НомераДляКредиторки> НомераДляКредиторки { get; set; }
        public virtual DbSet<НомераДляКредиторкиКл> НомераДляКредиторкиКл { get; set; }
        public virtual DbSet<НомераДляЦепочек> НомераДляЦепочек { get; set; }
        public virtual DbSet<ОбеспечениеДз> ОбеспечениеДз { get; set; }
        public virtual DbSet<ОбеспечениеСклада> ОбеспечениеСклада { get; set; }
        public virtual DbSet<ОбработанныеКн> ОбработанныеКн { get; set; }
        public virtual DbSet<ОбщаяОтгрузкаПоМашинам> ОбщаяОтгрузкаПоМашинам { get; set; }
        public virtual DbSet<ОбщийДоходПоКлиентамПоТоварам> ОбщийДоходПоКлиентамПоТоварам { get; set; }
        public virtual DbSet<ОбъемПродажЗаТриГода> ОбъемПродажЗаТриГода { get; set; }
        public virtual DbSet<Оплата> Оплата { get; set; }
        public virtual DbSet<ОплатаДляКредиторкиВедущийРегион> ОплатаДляКредиторкиВедущийРегион { get; set; }
        public virtual DbSet<ОплатаДляКредиторкиРегион> ОплатаДляКредиторкиРегион { get; set; }
        public virtual DbSet<ОплатаДляКредиторкиРегионObjed> ОплатаДляКредиторкиРегионObjed { get; set; }
        public virtual DbSet<ОплатаДляСверкиРегион> ОплатаДляСверкиРегион { get; set; }
        public virtual DbSet<ОплатаДляСф> ОплатаДляСф { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчета> ОплатаЗаПериодДляОтчета { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаNnn> ОплатаЗаПериодДляОтчетаNnn { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаГрупп> ОплатаЗаПериодДляОтчетаГрупп { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗа12МесяцовРегион> ОплатаЗаПериодДляОтчетаЗа12МесяцовРегион { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗа3МесКл> ОплатаЗаПериодДляОтчетаЗа3МесКл { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗа3МесЮл> ОплатаЗаПериодДляОтчетаЗа3МесЮл { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗа3МесЮлГр> ОплатаЗаПериодДляОтчетаЗа3МесЮлГр { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗа3МесЮлРегион> ОплатаЗаПериодДляОтчетаЗа3МесЮлРегион { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗа3Месяца> ОплатаЗаПериодДляОтчетаЗа3Месяца { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗа3МесяцаРегион> ОплатаЗаПериодДляОтчетаЗа3МесяцаРегион { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЗаПериод> ОплатаЗаПериодДляОтчетаЗаПериод { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаРегион> ОплатаЗаПериодДляОтчетаРегион { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЮлГрупп> ОплатаЗаПериодДляОтчетаЮлГрупп { get; set; }
        public virtual DbSet<ОплатаЗаПериодДляОтчетаЮрлицо> ОплатаЗаПериодДляОтчетаЮрлицо { get; set; }
        public virtual DbSet<ОплатаКлиентыФилиал> ОплатаКлиентыФилиал { get; set; }
        public virtual DbSet<ОплатаНоябрь> ОплатаНоябрь { get; set; }
        public virtual DbSet<ОплатаНоябрьГр> ОплатаНоябрьГр { get; set; }
        public virtual DbSet<ОплатаНоябрьЦо> ОплатаНоябрьЦо { get; set; }
        public virtual DbSet<ОплатаПоДилерамДляТк> ОплатаПоДилерамДляТк { get; set; }
        public virtual DbSet<ОплатаПоДилерамДляТкИзЦо> ОплатаПоДилерамДляТкИзЦо { get; set; }
        public virtual DbSet<ОплатаПоДилерамДляТкОбИзЦо> ОплатаПоДилерамДляТкОбИзЦо { get; set; }
        public virtual DbSet<ОплатаПоДилерамДляТкОбРегион> ОплатаПоДилерамДляТкОбРегион { get; set; }
        public virtual DbSet<ОплатаПоДилерамДляТкРегион> ОплатаПоДилерамДляТкРегион { get; set; }
        public virtual DbSet<ОплатаПоДилерамДляТкРегионNew> ОплатаПоДилерамДляТкРегионNew { get; set; }
        public virtual DbSet<ОплатаПоЗаявкам> ОплатаПоЗаявкам { get; set; }
        public virtual DbSet<ОплатаПоЗаявкам1> ОплатаПоЗаявкам1 { get; set; }
        public virtual DbSet<ОплатаПоЗаявкамДляДолга> ОплатаПоЗаявкамДляДолга { get; set; }
        public virtual DbSet<ОплатаПоЗаявкамДляПлатежекРегион> ОплатаПоЗаявкамДляПлатежекРегион { get; set; }
        public virtual DbSet<ОплатаПоЗаявкамПоДням> ОплатаПоЗаявкамПоДням { get; set; }
        public virtual DbSet<ОплатаПоЗаявкамРегион> ОплатаПоЗаявкамРегион { get; set; }
        public virtual DbSet<ОплатаПоСчетамГруппа> ОплатаПоСчетамГруппа { get; set; }
        public virtual DbSet<ОплатаПоСчету> ОплатаПоСчету { get; set; }
        public virtual DbSet<ОплатаПоТоварамРегион> ОплатаПоТоварамРегион { get; set; }
        public virtual DbSet<ОплатаПоТоварамСВидамиРегион> ОплатаПоТоварамСВидамиРегион { get; set; }
        public virtual DbSet<ОплатаПоставки> ОплатаПоставки { get; set; }
        public virtual DbSet<ОплатаРаспискиГазОднаПлат> ОплатаРаспискиГазОднаПлат { get; set; }
        public virtual DbSet<ОплатаРегион> ОплатаРегион { get; set; }
        public virtual DbSet<ОплатаСНомеромПлатежкиЕщеОдна> ОплатаСНомеромПлатежкиЕщеОдна { get; set; }
        public virtual DbSet<ОплатаСНомеромПлатежкиРегион> ОплатаСНомеромПлатежкиРегион { get; set; }
        public virtual DbSet<ОплатаТовараНалоговаяГрупп> ОплатаТовараНалоговаяГрупп { get; set; }
        public virtual DbSet<ОплатаТовараНалоговаяРегион> ОплатаТовараНалоговаяРегион { get; set; }
        public virtual DbSet<ОплатаТолькоЗаявки> ОплатаТолькоЗаявки { get; set; }
        public virtual DbSet<ОплатаТолькоСчета> ОплатаТолькоСчета { get; set; }
        public virtual DbSet<ОплатаЦоДилераТмп> ОплатаЦоДилераТмп { get; set; }
        public virtual DbSet<ОплатыГрупДляПлатежекРегион> ОплатыГрупДляПлатежекРегион { get; set; }
        public virtual DbSet<ОплатыДляАктаСверкиЦоТолькоУзмкЮл> ОплатыДляАктаСверкиЦоТолькоУзмкЮл { get; set; }
        public virtual DbSet<ОплатыДляАктаСверкиЦоУзмк> ОплатыДляАктаСверкиЦоУзмк { get; set; }
        public virtual DbSet<ОплатыДляАктаСверкиЦоУзмкЮл> ОплатыДляАктаСверкиЦоУзмкЮл { get; set; }
        public virtual DbSet<ОплатыДляПерекачки> ОплатыДляПерекачки { get; set; }
        public virtual DbSet<ОплатыДляПерекачкиРегион> ОплатыДляПерекачкиРегион { get; set; }
        public virtual DbSet<ОплатыДляПлатежек> ОплатыДляПлатежек { get; set; }
        public virtual DbSet<ОплатыДляПлатежекНовРегион> ОплатыДляПлатежекНовРегион { get; set; }
        public virtual DbSet<ОплатыДляПлатежекРегион> ОплатыДляПлатежекРегион { get; set; }
        public virtual DbSet<ОплатыДляСтруктурыПродаж> ОплатыДляСтруктурыПродаж { get; set; }
        public virtual DbSet<ОплатыЗаПериодТмп> ОплатыЗаПериодТмп { get; set; }
        public virtual DbSet<ОплатыПоЗаявкам> ОплатыПоЗаявкам { get; set; }
        public virtual DbSet<ОплатыПоКлиентамРегион> ОплатыПоКлиентамРегион { get; set; }
        public virtual DbSet<ОплатыРаспискаГаз> ОплатыРаспискаГаз { get; set; }
        public virtual DbSet<ОплатыРаспискаПром> ОплатыРаспискаПром { get; set; }
        public virtual DbSet<ОплатыРаспискаРайф> ОплатыРаспискаРайф { get; set; }
        public virtual DbSet<ОплатыСуд> ОплатыСуд { get; set; }
        public virtual DbSet<ОплаченоПоЗаявкамРаньшеПлана> ОплаченоПоЗаявкамРаньшеПлана { get; set; }
        public virtual DbSet<ОплаченоПоЗаявкамРаньшеПланаРегион> ОплаченоПоЗаявкамРаньшеПланаРегион { get; set; }
        public virtual DbSet<ОпцияСпецЗаказа1> ОпцияСпецЗаказа1 { get; set; }
        public virtual DbSet<ОпцияСпецЗаказа2> ОпцияСпецЗаказа2 { get; set; }
        public virtual DbSet<ОпцияСпецЗаказа3> ОпцияСпецЗаказа3 { get; set; }
        public virtual DbSet<ОпцияСпецЗаказа4> ОпцияСпецЗаказа4 { get; set; }
        public virtual DbSet<ОсGroupMenu> ОсGroupMenu { get; set; }
        public virtual DbSet<ОсMenu> ОсMenu { get; set; }
        public virtual DbSet<ОсMoveType> ОсMoveType { get; set; }
        public virtual DbSet<ОсReportParams> ОсReportParams { get; set; }
        public virtual DbSet<ОсReportQueries> ОсReportQueries { get; set; }
        public virtual DbSet<ОсReports> ОсReports { get; set; }
        public virtual DbSet<ОсUserMenu> ОсUserMenu { get; set; }
        public virtual DbSet<ОсАмортизация> ОсАмортизация { get; set; }
        public virtual DbSet<ОсАмортизацияСтроки> ОсАмортизацияСтроки { get; set; }
        public virtual DbSet<ОсГрупповыеСтрокиПрихода> ОсГрупповыеСтрокиПрихода { get; set; }
        public virtual DbSet<ОсДокументы> ОсДокументы { get; set; }
        public virtual DbSet<ОсДокументыСтроки> ОсДокументыСтроки { get; set; }
        public virtual DbSet<ОсКаталог> ОсКаталог { get; set; }
        public virtual DbSet<ОсКонсервация> ОсКонсервация { get; set; }
        public virtual DbSet<ОсНоменклатура> ОсНоменклатура { get; set; }
        public virtual DbSet<ОсПодразделения> ОсПодразделения { get; set; }
        public virtual DbSet<ОсСоответствиеСтруктур> ОсСоответствиеСтруктур { get; set; }
        public virtual DbSet<ОсСписокДолжностей> ОсСписокДолжностей { get; set; }
        public virtual DbSet<ОсСписокМол> ОсСписокМол { get; set; }
        public virtual DbSet<ОсФормированиеСтоимостиТмц> ОсФормированиеСтоимостиТмц { get; set; }
        public virtual DbSet<ОсХарактеристики> ОсХарактеристики { get; set; }
        public virtual DbSet<ОсЭнергоресурсы> ОсЭнергоресурсы { get; set; }
        public virtual DbSet<ОсЭнергоресурсыТарифы> ОсЭнергоресурсыТарифы { get; set; }
        public virtual DbSet<Остатки> Остатки { get; set; }
        public virtual DbSet<ОстаткиПоЗаявкам> ОстаткиПоЗаявкам { get; set; }
        public virtual DbSet<ОстаткиПоЗаявкамРегион> ОстаткиПоЗаявкамРегион { get; set; }
        public virtual DbSet<ОстаткиПоЗаявкамФактРегион> ОстаткиПоЗаявкамФактРегион { get; set; }
        public virtual DbSet<ОстаткиРегион> ОстаткиРегион { get; set; }
        public virtual DbSet<ОстаткиСотрудников> ОстаткиСотрудников { get; set; }
        public virtual DbSet<ОтгруженныеРасходы> ОтгруженныеРасходы { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСФил> ОтгруженныеРасходыСФил { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСФилПодгр> ОтгруженныеРасходыСФилПодгр { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСФилСкл> ОтгруженныеРасходыСФилСкл { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСЦо1111> ОтгруженныеРасходыСЦо1111 { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСЦоСкл> ОтгруженныеРасходыСЦоСкл { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСЦоСклДил1111> ОтгруженныеРасходыСЦоСклДил1111 { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСЦоСклДилБезВозвр1111> ОтгруженныеРасходыСЦоСклДилБезВозвр1111 { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСЦоСклПер> ОтгруженныеРасходыСЦоСклПер { get; set; }
        public virtual DbSet<ОтгруженныеРасходыСЦоСклФил1111> ОтгруженныеРасходыСЦоСклФил1111 { get; set; }
        public virtual DbSet<Отгружено> Отгружено { get; set; }
        public virtual DbSet<ОтгруженоПоЗаказуВУзловой> ОтгруженоПоЗаказуВУзловой { get; set; }
        public virtual DbSet<ОтгруженоСУчетомВозвратов> ОтгруженоСУчетомВозвратов { get; set; }
        public virtual DbSet<ОтгрузкаЗаПериодДляОтчета> ОтгрузкаЗаПериодДляОтчета { get; set; }
        public virtual DbSet<ОтгрузкаЗаПериодДляОтчетаГр> ОтгрузкаЗаПериодДляОтчетаГр { get; set; }
        public virtual DbSet<ОтгрузкаЗаПериодДляОтчетаГрDil> ОтгрузкаЗаПериодДляОтчетаГрDil { get; set; }
        public virtual DbSet<ОтгрузкаЗаПериодДляОтчетаГрОфис> ОтгрузкаЗаПериодДляОтчетаГрОфис { get; set; }
        public virtual DbSet<ОтгрузкаЗаПериодДляОтчетаИнн> ОтгрузкаЗаПериодДляОтчетаИнн { get; set; }
        public virtual DbSet<ОтгрузкаЗаПериодДляОтчетаРегион> ОтгрузкаЗаПериодДляОтчетаРегион { get; set; }
        public virtual DbSet<ОтгрузкаКонтролируемыхПоДилерам> ОтгрузкаКонтролируемыхПоДилерам { get; set; }
        public virtual DbSet<ОтгрузкаМоскваЦо> ОтгрузкаМоскваЦо { get; set; }
        public virtual DbSet<ОтгрузкаНаСосенкиМинусССоенокОктНояб> ОтгрузкаНаСосенкиМинусССоенокОктНояб { get; set; }
        public virtual DbSet<ОтгрузкаПоКаналамСбыта> ОтгрузкаПоКаналамСбыта { get; set; }
        public virtual DbSet<ОтгрузкаРегионы> ОтгрузкаРегионы { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемом112015> ОтгрузкаСВесомИОбъемом112015 { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомВозврат> ОтгрузкаСВесомИОбъемомВозврат { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомВсеССосенок> ОтгрузкаСВесомИОбъемомВсеССосенок { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомНов> ОтгрузкаСВесомИОбъемомНов { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомРегионLb> ОтгрузкаСВесомИОбъемомРегионLb { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомРегионВозврат> ОтгрузкаСВесомИОбъемомРегионВозврат { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомРегионНов> ОтгрузкаСВесомИОбъемомРегионНов { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомССосенокДляСклада> ОтгрузкаСВесомИОбъемомССосенокДляСклада { get; set; }
        public virtual DbSet<ОтгрузкаСВесомИОбъемомФилиал> ОтгрузкаСВесомИОбъемомФилиал { get; set; }
        public virtual DbSet<ОтгрузкаССосенокОктНояб> ОтгрузкаССосенокОктНояб { get; set; }
        public virtual DbSet<ОтгрузкаЦо> ОтгрузкаЦо { get; set; }
        public virtual DbSet<ОтчетЗапросы> ОтчетЗапросы { get; set; }
        public virtual DbSet<ОтчетПараметры> ОтчетПараметры { get; set; }
        public virtual DbSet<Отчеты> Отчеты { get; set; }
        public virtual DbSet<ОтчетыГруппаПодгруппаМодель> ОтчетыГруппаПодгруппаМодель { get; set; }
        public virtual DbSet<ОтчетыДилерГруппаПодгруппаМодель> ОтчетыДилерГруппаПодгруппаМодель { get; set; }
        public virtual DbSet<ОтчетыКаналГруппаПодгруппаМодель> ОтчетыКаналГруппаПодгруппаМодель { get; set; }
        public virtual DbSet<ОтчетыМенеджерГруппаПодгруппаМодель> ОтчетыМенеджерГруппаПодгруппаМодель { get; set; }
        public virtual DbSet<ОтчетыОтгрузки> ОтчетыОтгрузки { get; set; }
        public virtual DbSet<ОтчетыОтгрузкиДляГрупп> ОтчетыОтгрузкиДляГрупп { get; set; }
        public virtual DbSet<ОтчетыОтделГруппаПодгруппаМодель> ОтчетыОтделГруппаПодгруппаМодель { get; set; }
        public virtual DbSet<ОтчетыПоАвансам> ОтчетыПоАвансам { get; set; }
        public virtual DbSet<Оценки> Оценки { get; set; }
        public virtual DbSet<ОчередьМоскваNew> ОчередьМоскваNew { get; set; }
        public virtual DbSet<ОчередьМоскваРегион> ОчередьМоскваРегион { get; set; }
        public virtual DbSet<ОчередьМоскваЦо> ОчередьМоскваЦо { get; set; }
        public virtual DbSet<Параметры> Параметры { get; set; }
        public virtual DbSet<ПерваяДатаОплаты> ПерваяДатаОплаты { get; set; }
        public virtual DbSet<ПерваяДатаОплатыДляВедущегоРегион> ПерваяДатаОплатыДляВедущегоРегион { get; set; }
        public virtual DbSet<ПерваяДатаОплатыЗаявки> ПерваяДатаОплатыЗаявки { get; set; }
        public virtual DbSet<ПерваяДатаОплатыПоЗаявке> ПерваяДатаОплатыПоЗаявке { get; set; }
        public virtual DbSet<ПерваяДатаОплатыРегион> ПерваяДатаОплатыРегион { get; set; }
        public virtual DbSet<ПерваяДатаОплатыЮрлицо> ПерваяДатаОплатыЮрлицо { get; set; }
        public virtual DbSet<ПерваяДатаОтгрузкиРегион> ПерваяДатаОтгрузкиРегион { get; set; }
        public virtual DbSet<ПерваяДатаОтгрузкиТовара> ПерваяДатаОтгрузкиТовара { get; set; }
        public virtual DbSet<ПерваяДатаПрихода> ПерваяДатаПрихода { get; set; }
        public virtual DbSet<ПерваяДатаПриходаТехуспех1Год> ПерваяДатаПриходаТехуспех1Год { get; set; }
        public virtual DbSet<ПерваяДатаПриходаТехуспех3Года> ПерваяДатаПриходаТехуспех3Года { get; set; }
        public virtual DbSet<ПереводыВыставкиТмпРегион> ПереводыВыставкиТмпРегион { get; set; }
        public virtual DbSet<ПереводыРасходыВыставкиТмпРегион> ПереводыРасходыВыставкиТмпРегион { get; set; }
        public virtual DbSet<ПеревозчикиРегион> ПеревозчикиРегион { get; set; }
        public virtual DbSet<ПереданоПоРекламации> ПереданоПоРекламации { get; set; }
        public virtual DbSet<ПерекачкаОплатРег> ПерекачкаОплатРег { get; set; }
        public virtual DbSet<ПерекачкаОплатРегАльфа> ПерекачкаОплатРегАльфа { get; set; }
        public virtual DbSet<ПечатьВыдатковой> ПечатьВыдатковой { get; set; }
        public virtual DbSet<ПечатьВыдатковойDb> ПечатьВыдатковойDb { get; set; }
        public virtual DbSet<ПечатьЗаявки> ПечатьЗаявки { get; set; }
        public virtual DbSet<ПечатьЗаявкиDb> ПечатьЗаявкиDb { get; set; }
        public virtual DbSet<ПечатьКорректыУвеличенияРегион> ПечатьКорректыУвеличенияРегион { get; set; }
        public virtual DbSet<ПечатьНалоговойНаОплатуРегион> ПечатьНалоговойНаОплатуРегион { get; set; }
        public virtual DbSet<ПечатьПередаточногоАкта> ПечатьПередаточногоАкта { get; set; }
        public virtual DbSet<ПечатьРасходнойDbРегионNew> ПечатьРасходнойDbРегионNew { get; set; }
        public virtual DbSet<ПечатьРасходнойРегионNew> ПечатьРасходнойРегионNew { get; set; }
        public virtual DbSet<ПечатьСчетФактурыДилерыДлDb> ПечатьСчетФактурыДилерыДлDb { get; set; }
        public virtual DbSet<ПечатьСчета> ПечатьСчета { get; set; }
        public virtual DbSet<ПечатьСчетаДолРегион> ПечатьСчетаДолРегион { get; set; }
        public virtual DbSet<ПечатьСчетаРегион> ПечатьСчетаРегион { get; set; }
        public virtual DbSet<ПечатьСчетаФактурыАванс> ПечатьСчетаФактурыАванс { get; set; }
        public virtual DbSet<ПечатьСчетаФактурыДилера> ПечатьСчетаФактурыДилера { get; set; }
        public virtual DbSet<ПечатьСчетаФактурыДилераАванс> ПечатьСчетаФактурыДилераАванс { get; set; }
        public virtual DbSet<ПечатьСчетаФактурыДилерыДл> ПечатьСчетаФактурыДилерыДл { get; set; }
        public virtual DbSet<ПечатьСчетаФактурыДилерыКор> ПечатьСчетаФактурыДилерыКор { get; set; }
        public virtual DbSet<ПечатьЭкспортнойНакладной> ПечатьЭкспортнойНакладной { get; set; }
        public virtual DbSet<ПечатьЭкспортнойНакладнойРегион> ПечатьЭкспортнойНакладнойРегион { get; set; }
        public virtual DbSet<ПланПлатежейЦоЗаготовка> ПланПлатежейЦоЗаготовка { get; set; }
        public virtual DbSet<ПланПоСтатьям> ПланПоСтатьям { get; set; }
        public virtual DbSet<ПланПоСтатьямNew> ПланПоСтатьямNew { get; set; }
        public virtual DbSet<ПланПоставок> ПланПоставок { get; set; }
        public virtual DbSet<ПланПоставокАрхив> ПланПоставокАрхив { get; set; }
        public virtual DbSet<ПланПоставокНаМесяц> ПланПоставокНаМесяц { get; set; }
        public virtual DbSet<ПланПриходаСУзловойНаМоскву> ПланПриходаСУзловойНаМоскву { get; set; }
        public virtual DbSet<ПланПриходовПоСтатьям> ПланПриходовПоСтатьям { get; set; }
        public virtual DbSet<ПланПродаж> ПланПродаж { get; set; }
        public virtual DbSet<Планерка> Планерка { get; set; }
        public virtual DbSet<ПланеркаВсе> ПланеркаВсе { get; set; }
        public virtual DbSet<ПланеркаВсе1> ПланеркаВсе1 { get; set; }
        public virtual DbSet<ПланеркаВсеВСчетах> ПланеркаВсеВСчетах { get; set; }
        public virtual DbSet<ПланеркаЗаказов> ПланеркаЗаказов { get; set; }
        public virtual DbSet<ПланеркаРегионы> ПланеркаРегионы { get; set; }
        public virtual DbSet<ПланеркаЦо> ПланеркаЦо { get; set; }
        public virtual DbSet<Плечо> Плечо { get; set; }
        public virtual DbSet<ПогрузочныйЛистДилеры> ПогрузочныйЛистДилеры { get; set; }
        public virtual DbSet<ПогрузочныйЛистДилерыТтРегион> ПогрузочныйЛистДилерыТтРегион { get; set; }
        public virtual DbSet<ПогрузочныйЛистЕдиный> ПогрузочныйЛистЕдиный { get; set; }
        public virtual DbSet<ПодгруппыДляLb> ПодгруппыДляLb { get; set; }
        public virtual DbSet<ПодписиЗаНал> ПодписиЗаНал { get; set; }
        public virtual DbSet<ПодписиЗаНалИтр> ПодписиЗаНалИтр { get; set; }
        public virtual DbSet<ПодразделенияРеестра> ПодразделенияРеестра { get; set; }
        public virtual DbSet<ПодробноРазрешенияТмп> ПодробноРазрешенияТмп { get; set; }
        public virtual DbSet<ПодробныйСписокНаСкладе> ПодробныйСписокНаСкладе { get; set; }
        public virtual DbSet<ПодробныйСписокНаСкладеВсе> ПодробныйСписокНаСкладеВсе { get; set; }
        public virtual DbSet<ПодробныйСписокНаСкладеГрупп> ПодробныйСписокНаСкладеГрупп { get; set; }
        public virtual DbSet<ПодробныйСписокНаСкладеНов> ПодробныйСписокНаСкладеНов { get; set; }
        public virtual DbSet<ПодробныйСписокНаСкладеТмп> ПодробныйСписокНаСкладеТмп { get; set; }
        public virtual DbSet<ПолучениеДенегПоПлану> ПолучениеДенегПоПлану { get; set; }
        public virtual DbSet<ПоследнийМенеджер> ПоследнийМенеджер { get; set; }
        public virtual DbSet<ПоследняяДатаОплатыДилера> ПоследняяДатаОплатыДилера { get; set; }
        public virtual DbSet<ПоследняяДатаОплатыДляВедущего> ПоследняяДатаОплатыДляВедущего { get; set; }
        public virtual DbSet<ПоследняяДатаОплатыДляВедущегоРегион> ПоследняяДатаОплатыДляВедущегоРегион { get; set; }
        public virtual DbSet<ПоследняяДатаОплатыМосква> ПоследняяДатаОплатыМосква { get; set; }
        public virtual DbSet<ПоследняяДатаОплатыРегион> ПоследняяДатаОплатыРегион { get; set; }
        public virtual DbSet<ПоследняяДатаПрихода> ПоследняяДатаПрихода { get; set; }
        public virtual DbSet<ПоследняяДатаПриходаРегион> ПоследняяДатаПриходаРегион { get; set; }
        public virtual DbSet<ПоследняяОплата> ПоследняяОплата { get; set; }
        public virtual DbSet<ПоследняяОтгрузка> ПоследняяОтгрузка { get; set; }
        public virtual DbSet<ПоставкиДляСверкиРегион> ПоставкиДляСверкиРегион { get; set; }
        public virtual DbSet<ПоставкиРасходы> ПоставкиРасходы { get; set; }
        public virtual DbSet<ПоставщикиГруппы> ПоставщикиГруппы { get; set; }
        public virtual DbSet<ПпоследняяДатаОтгрузкиРегион> ПпоследняяДатаОтгрузкиРегион { get; set; }
        public virtual DbSet<ПрДебТмп> ПрДебТмп { get; set; }
        public virtual DbSet<Праздники> Праздники { get; set; }
        public virtual DbSet<ПрайсДвери> ПрайсДвери { get; set; }
        public virtual DbSet<ПрайслистПоставщиковПоставки> ПрайслистПоставщиковПоставки { get; set; }
        public virtual DbSet<ПредложенияОхотников> ПредложенияОхотников { get; set; }
        public virtual DbSet<ПретензияПоПродукции> ПретензияПоПродукции { get; set; }
        public virtual DbSet<ПривязкаПриОплате> ПривязкаПриОплате { get; set; }
        public virtual DbSet<Признак> Признак { get; set; }
        public virtual DbSet<ПрименениеСчетов> ПрименениеСчетов { get; set; }
        public virtual DbSet<ПрименениеСчетовNew> ПрименениеСчетовNew { get; set; }
        public virtual DbSet<Прих39> Прих39 { get; set; }
        public virtual DbSet<ПрихГруппЗаявка> ПрихГруппЗаявка { get; set; }
        public virtual DbSet<ПрихЗаявка> ПрихЗаявка { get; set; }
        public virtual DbSet<ПрихЗаявкаОнлайн> ПрихЗаявкаОнлайн { get; set; }
        public virtual DbSet<ПрихНовИзQuickДляПечатиТоргаВсе> ПрихНовИзQuickДляПечатиТоргаВсе { get; set; }
        public virtual DbSet<ПрихНовИзQuickДляПечатиТоргаВсеПоСр> ПрихНовИзQuickДляПечатиТоргаВсеПоСр { get; set; }
        public virtual DbSet<ПриходВПутиРегион> ПриходВПутиРегион { get; set; }
        public virtual DbSet<ПриходГруп> ПриходГруп { get; set; }
        public virtual DbSet<ПриходГруп965> ПриходГруп965 { get; set; }
        public virtual DbSet<ПриходГрупВсеРег> ПриходГрупВсеРег { get; set; }
        public virtual DbSet<ПриходГрупВыставки> ПриходГрупВыставки { get; set; }
        public virtual DbSet<ПриходГрупДляМз> ПриходГрупДляМз { get; set; }
        public virtual DbSet<ПриходГрупЗаказВсеРегионы> ПриходГрупЗаказВсеРегионы { get; set; }
        public virtual DbSet<ПриходГрупЗаказВсеРегионыDil> ПриходГрупЗаказВсеРегионыDil { get; set; }
        public virtual DbSet<ПриходГрупКанбан> ПриходГрупКанбан { get; set; }
        public virtual DbSet<ПриходГрупКанбанУзловая> ПриходГрупКанбанУзловая { get; set; }
        public virtual DbSet<ПриходГрупПартияВсеГлРегион> ПриходГрупПартияВсеГлРегион { get; set; }
        public virtual DbSet<ПриходГрупПартияВсеРегион> ПриходГрупПартияВсеРегион { get; set; }
        public virtual DbSet<ПриходГрупПартияДляСфОстаток> ПриходГрупПартияДляСфОстаток { get; set; }
        public virtual DbSet<ПриходГрупПартияДляСфПоставки> ПриходГрупПартияДляСфПоставки { get; set; }
        public virtual DbSet<ПриходГрупПартияДляСфПоступило> ПриходГрупПартияДляСфПоступило { get; set; }
        public virtual DbSet<ПриходГрупПартияДляСфСредняя> ПриходГрупПартияДляСфСредняя { get; set; }
        public virtual DbSet<ПриходГрупПартияДляСфСредняяПоТов> ПриходГрупПартияДляСфСредняяПоТов { get; set; }
        public virtual DbSet<ПриходГрупПартияДляСфУшло> ПриходГрупПартияДляСфУшло { get; set; }
        public virtual DbSet<ПриходГрупПартияПоставки> ПриходГрупПартияПоставки { get; set; }
        public virtual DbSet<ПриходГрупПартияРегион> ПриходГрупПартияРегион { get; set; }
        public virtual DbSet<ПриходГрупПодр> ПриходГрупПодр { get; set; }
        public virtual DbSet<ПриходГрупПоставки> ПриходГрупПоставки { get; set; }
        public virtual DbSet<ПриходГрупРегион> ПриходГрупРегион { get; set; }
        public virtual DbSet<ПриходГрупРегионЗаказы> ПриходГрупРегионЗаказы { get; set; }
        public virtual DbSet<ПриходГрупТип> ПриходГрупТип { get; set; }
        public virtual DbSet<ПриходГрупТипЗаказ> ПриходГрупТипЗаказ { get; set; }
        public virtual DbSet<ПриходГруппВсе> ПриходГруппВсе { get; set; }
        public virtual DbSet<ПриходГруппВсеРегион> ПриходГруппВсеРегион { get; set; }
        public virtual DbSet<ПриходГруппДляМзФилиалыДо> ПриходГруппДляМзФилиалыДо { get; set; }
        public virtual DbSet<ПриходГруппЗаказ> ПриходГруппЗаказ { get; set; }
        public virtual DbSet<ПриходГруппЗап> ПриходГруппЗап { get; set; }
        public virtual DbSet<ПриходГруппЗапДоп> ПриходГруппЗапДоп { get; set; }
        public virtual DbSet<ПриходГруппЗаявка> ПриходГруппЗаявка { get; set; }
        public virtual DbSet<ПриходГруппЗаявкаNew> ПриходГруппЗаявкаNew { get; set; }
        public virtual DbSet<ПриходГруппЗаявкаФил> ПриходГруппЗаявкаФил { get; set; }
        public virtual DbSet<ПриходГруппРегионГлавный> ПриходГруппРегионГлавный { get; set; }
        public virtual DbSet<ПриходГруппТиппервый> ПриходГруппТиппервый { get; set; }
        public virtual DbSet<ПриходДляФилиалаПерекачка> ПриходДляФилиалаПерекачка { get; set; }
        public virtual DbSet<ПриходРеестр> ПриходРеестр { get; set; }
        public virtual DbSet<ПриходРеестрАрхив> ПриходРеестрАрхив { get; set; }
        public virtual DbSet<ПриходРеестрПодпись> ПриходРеестрПодпись { get; set; }
        public virtual DbSet<ПриходТовара> ПриходТовара { get; set; }
        public virtual DbSet<ПриходТовараДляПоставокОтДилера> ПриходТовараДляПоставокОтДилера { get; set; }
        public virtual DbSet<ПриходТовараПоставки> ПриходТовараПоставки { get; set; }
        public virtual DbSet<ПриходТовараПоставкиOld> ПриходТовараПоставкиOld { get; set; }
        public virtual DbSet<ПриходТовараПоставкиДо2018> ПриходТовараПоставкиДо2018 { get; set; }
        public virtual DbSet<ПриходТовараРегион> ПриходТовараРегион { get; set; }
        public virtual DbSet<ПриходТовараРегионСписание> ПриходТовараРегионСписание { get; set; }
        public virtual DbSet<ПриходТовараСЦенойРегион> ПриходТовараСЦенойРегион { get; set; }
        public virtual DbSet<ПриходыДляАсуп> ПриходыДляАсуп { get; set; }
        public virtual DbSet<ПрогнозГод> ПрогнозГод { get; set; }
        public virtual DbSet<ПрогнозПродаж> ПрогнозПродаж { get; set; }
        public virtual DbSet<ПрогнозПродаж20170407> ПрогнозПродаж20170407 { get; set; }
        public virtual DbSet<ПрогнозПродажРегион> ПрогнозПродажРегион { get; set; }
        public virtual DbSet<ПрогнозПродажРегионДилер> ПрогнозПродажРегионДилер { get; set; }
        public virtual DbSet<ПрогнозПродажТмп> ПрогнозПродажТмп { get; set; }
        public virtual DbSet<ПрогнозПродажТмпРегион> ПрогнозПродажТмпРегион { get; set; }
        public virtual DbSet<ПроизводственнаяСтруктура> ПроизводственнаяСтруктура { get; set; }
        public virtual DbSet<ПроизводственнаяСтруктураCopy> ПроизводственнаяСтруктураCopy { get; set; }
        public virtual DbSet<ПромУзмк> ПромУзмк { get; set; }
        public virtual DbSet<ПросмотрПриходовРегион> ПросмотрПриходовРегион { get; set; }
        public virtual DbSet<Работнички> Работнички { get; set; }
        public virtual DbSet<Работнички1> Работнички1 { get; set; }
        public virtual DbSet<РаботничкиРегион> РаботничкиРегион { get; set; }
        public virtual DbSet<РаботничкиРеестра> РаботничкиРеестра { get; set; }
        public virtual DbSet<РаботничкиФинплан> РаботничкиФинплан { get; set; }
        public virtual DbSet<РазрешениеНаСтатью> РазрешениеНаСтатью { get; set; }
        public virtual DbSet<РаспДилеры> РаспДилеры { get; set; }
        public virtual DbSet<РаспДилерыКомус> РаспДилерыКомус { get; set; }
        public virtual DbSet<РаспДилерыКомусИстория> РаспДилерыКомусИстория { get; set; }
        public virtual DbSet<РаспДилерыОтгр> РаспДилерыОтгр { get; set; }
        public virtual DbSet<РаспКлиентыN> РаспКлиентыN { get; set; }
        public virtual DbSet<РаспКлиентыОтгр> РаспКлиентыОтгр { get; set; }
        public virtual DbSet<РаспФилТт> РаспФилТт { get; set; }
        public virtual DbSet<РаспорВсеРегион> РаспорВсеРегион { get; set; }
        public virtual DbSet<РаспорВсеЦо> РаспорВсеЦо { get; set; }
        public virtual DbSet<РаспорСервис> РаспорСервис { get; set; }
        public virtual DbSet<РаспоряжениеКлиентыДляТорг12> РаспоряжениеКлиентыДляТорг12 { get; set; }
        public virtual DbSet<Распоряжения> Распоряжения { get; set; }
        public virtual DbSet<РаспоряженияДвойные> РаспоряженияДвойные { get; set; }
        public virtual DbSet<РаспоряженияДвойныеРегион> РаспоряженияДвойныеРегион { get; set; }
        public virtual DbSet<РаспоряженияДилДляТтнДляСетей> РаспоряженияДилДляТтнДляСетей { get; set; }
        public virtual DbSet<РаспоряженияДилДляТтнДляСетей111111> РаспоряженияДилДляТтнДляСетей111111 { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12> РаспоряженияДилерыДляТорг12 { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12Db> РаспоряженияДилерыДляТорг12Db { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12DbДляЗельгрос> РаспоряженияДилерыДляТорг12DbДляЗельгрос { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12DbДляКасторама> РаспоряженияДилерыДляТорг12DbДляКасторама { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12DbМетро> РаспоряженияДилерыДляТорг12DbМетро { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12Ашан> РаспоряженияДилерыДляТорг12Ашан { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12Зельгрос> РаспоряженияДилерыДляТорг12Зельгрос { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12Касторама> РаспоряженияДилерыДляТорг12Касторама { get; set; }
        public virtual DbSet<РаспоряженияДилерыДляТорг12Метро> РаспоряженияДилерыДляТорг12Метро { get; set; }
        public virtual DbSet<РаспоряженияДл> РаспоряженияДл { get; set; }
        public virtual DbSet<РаспоряженияДляОплатыРегион> РаспоряженияДляОплатыРегион { get; set; }
        public virtual DbSet<РаспоряженияДляУдаленияВсеРегион> РаспоряженияДляУдаленияВсеРегион { get; set; }
        public virtual DbSet<РаспоряженияДляУдаленияРегион> РаспоряженияДляУдаленияРегион { get; set; }
        public virtual DbSet<РаспоряженияКл> РаспоряженияКл { get; set; }
        public virtual DbSet<РаспоряженияПоЗаявкам> РаспоряженияПоЗаявкам { get; set; }
        public virtual DbSet<РаспоряженияПоСчетам> РаспоряженияПоСчетам { get; set; }
        public virtual DbSet<РаспоряженияПоставки> РаспоряженияПоставки { get; set; }
        public virtual DbSet<РаспоряженияРегион> РаспоряженияРегион { get; set; }
        public virtual DbSet<Расх39> Расх39 { get; set; }
        public virtual DbSet<РасходRecordПартияРегион> РасходRecordПартияРегион { get; set; }
        public virtual DbSet<РасходRecordРегион> РасходRecordРегион { get; set; }
        public virtual DbSet<РасходБезРазрешенияЗаявка> РасходБезРазрешенияЗаявка { get; set; }
        public virtual DbSet<РасходБезРазрешенияЗаявкаЗаказ> РасходБезРазрешенияЗаявкаЗаказ { get; set; }
        public virtual DbSet<РасходБезРазрешенияЗаявкаОстальное> РасходБезРазрешенияЗаявкаОстальное { get; set; }
        public virtual DbSet<РасходБезРазрешенияСчет> РасходБезРазрешенияСчет { get; set; }
        public virtual DbSet<РасходБезРазрешенияСчетЗаказ> РасходБезРазрешенияСчетЗаказ { get; set; }
        public virtual DbSet<РасходБезРазрешенияСчетОстальное> РасходБезРазрешенияСчетОстальное { get; set; }
        public virtual DbSet<РасходБезУзлуг> РасходБезУзлуг { get; set; }
        public virtual DbSet<РасходБезУслугДил> РасходБезУслугДил { get; set; }
        public virtual DbSet<РасходВЗаявке> РасходВЗаявке { get; set; }
        public virtual DbSet<РасходВПланеНа1День> РасходВПланеНа1День { get; set; }
        public virtual DbSet<РасходВПланеНа1ДеньКл> РасходВПланеНа1ДеньКл { get; set; }
        public virtual DbSet<РасходВПланеНа2Дня> РасходВПланеНа2Дня { get; set; }
        public virtual DbSet<РасходВПланеНа2ДняКл> РасходВПланеНа2ДняКл { get; set; }
        public virtual DbSet<РасходВПланеНа3Дня> РасходВПланеНа3Дня { get; set; }
        public virtual DbSet<РасходВПланеНа3ДняКл> РасходВПланеНа3ДняКл { get; set; }
        public virtual DbSet<РасходВПланеНа4Дня> РасходВПланеНа4Дня { get; set; }
        public virtual DbSet<РасходВПланеНа4ДняКл> РасходВПланеНа4ДняКл { get; set; }
        public virtual DbSet<РасходВПланеНа5Дня> РасходВПланеНа5Дня { get; set; }
        public virtual DbSet<РасходВПланеНа5ДняКл> РасходВПланеНа5ДняКл { get; set; }
        public virtual DbSet<РасходВПланеНа6Дня> РасходВПланеНа6Дня { get; set; }
        public virtual DbSet<РасходВПланеНа6ДняКл> РасходВПланеНа6ДняКл { get; set; }
        public virtual DbSet<РасходВПланеНа7Дня> РасходВПланеНа7Дня { get; set; }
        public virtual DbSet<РасходВПланеНа7ДняКл> РасходВПланеНа7ДняКл { get; set; }
        public virtual DbSet<РасходВПути> РасходВПути { get; set; }
        public virtual DbSet<РасходВПутиЗаказ> РасходВПутиЗаказ { get; set; }
        public virtual DbSet<РасходВозвратДляАктаСверкиРегион> РасходВозвратДляАктаСверкиРегион { get; set; }
        public virtual DbSet<РасходВозвратДляАктаСверкиРегион225> РасходВозвратДляАктаСверкиРегион225 { get; set; }
        public virtual DbSet<РасходВписанныйТемп> РасходВписанныйТемп { get; set; }
        public virtual DbSet<РасходВсеРегион> РасходВсеРегион { get; set; }
        public virtual DbSet<РасходВыписанСчет> РасходВыписанСчет { get; set; }
        public virtual DbSet<РасходВыписанный> РасходВыписанный { get; set; }
        public virtual DbSet<РасходГрСчРас> РасходГрСчРас { get; set; }
        public virtual DbSet<РасходГрСчРасNew> РасходГрСчРасNew { get; set; }
        public virtual DbSet<РасходГрСчРасРегион> РасходГрСчРасРегион { get; set; }
        public virtual DbSet<РасходГрСчРасФактРегион> РасходГрСчРасФактРегион { get; set; }
        public virtual DbSet<РасходГрупБезПартииРегион> РасходГрупБезПартииРегион { get; set; }
        public virtual DbSet<РасходГрупДляМз> РасходГрупДляМз { get; set; }
        public virtual DbSet<РасходГрупПартияВсеПоставки> РасходГрупПартияВсеПоставки { get; set; }
        public virtual DbSet<РасходГрупПартияПоСкладуПоставки> РасходГрупПартияПоСкладуПоставки { get; set; }
        public virtual DbSet<РасходГрупПартияПоставки> РасходГрупПартияПоставки { get; set; }
        public virtual DbSet<РасходГрупПартияРегион> РасходГрупПартияРегион { get; set; }
        public virtual DbSet<РасходГрупПоставки> РасходГрупПоставки { get; set; }
        public virtual DbSet<РасходГруппДляМзФилиалыДо> РасходГруппДляМзФилиалыДо { get; set; }
        public virtual DbSet<РасходДвери> РасходДвери { get; set; }
        public virtual DbSet<РасходДляАсуп> РасходДляАсуп { get; set; }
        public virtual DbSet<РасходДляДтмцВыставкиРегион> РасходДляДтмцВыставкиРегион { get; set; }
        public virtual DbSet<РасходДляДтмцПериодВыставкиБезСписРегион> РасходДляДтмцПериодВыставкиБезСписРегион { get; set; }
        public virtual DbSet<РасходДляДтмцПериодВыставкиРегион> РасходДляДтмцПериодВыставкиРегион { get; set; }
        public virtual DbSet<РасходДляДтмцРегион> РасходДляДтмцРегион { get; set; }
        public virtual DbSet<РасходДляДтмцРегионУзловая> РасходДляДтмцРегионУзловая { get; set; }
        public virtual DbSet<РасходДляДтмцРегионУзловая111> РасходДляДтмцРегионУзловая111 { get; set; }
        public virtual DbSet<РасходДляДтмцСписаниеРегион> РасходДляДтмцСписаниеРегион { get; set; }
        public virtual DbSet<РасходДляДтмцСписаниеРегионУзловая> РасходДляДтмцСписаниеРегионУзловая { get; set; }
        public virtual DbSet<РасходДляКредиторкиВозвратыРегион> РасходДляКредиторкиВозвратыРегион { get; set; }
        public virtual DbSet<РасходДляКредиторкиВозвратыРегионObjed> РасходДляКредиторкиВозвратыРегионObjed { get; set; }
        public virtual DbSet<РасходДляКредиторкиРегион> РасходДляКредиторкиРегион { get; set; }
        public virtual DbSet<РасходДляКредиторкиРегионObjed> РасходДляКредиторкиРегионObjed { get; set; }
        public virtual DbSet<РасходЗаявки> РасходЗаявки { get; set; }
        public virtual DbSet<РасходИтогоРегион> РасходИтогоРегион { get; set; }
        public virtual DbSet<РасходИтогоРегион1111111> РасходИтогоРегион1111111 { get; set; }
        public virtual DbSet<РасходИтогоЦо> РасходИтогоЦо { get; set; }
        public virtual DbSet<РасходКлиентыФилиалыНов> РасходКлиентыФилиалыНов { get; set; }
        public virtual DbSet<РасходКлиентыФилиалыНовNew> РасходКлиентыФилиалыНовNew { get; set; }
        public virtual DbSet<РасходКлиентыФилиалыРегион> РасходКлиентыФилиалыРегион { get; set; }
        public virtual DbSet<РасходМебель> РасходМебель { get; set; }
        public virtual DbSet<РасходМед> РасходМед { get; set; }
        public virtual DbSet<РасходНакл> РасходНакл { get; set; }
        public virtual DbSet<РасходНаклРегион> РасходНаклРегион { get; set; }
        public virtual DbSet<РасходНачТмп> РасходНачТмп { get; set; }
        public virtual DbSet<РасходОбщий> РасходОбщий { get; set; }
        public virtual DbSet<РасходОбщийАрхив> РасходОбщийАрхив { get; set; }
        public virtual DbSet<РасходОбщийАрхивДо20092017> РасходОбщийАрхивДо20092017 { get; set; }
        public virtual DbSet<РасходОбщийДляБухгалтера> РасходОбщийДляБухгалтера { get; set; }
        public virtual DbSet<РасходОбщийДляУтв> РасходОбщийДляУтв { get; set; }
        public virtual DbSet<РасходОбщийДляУтвДиал> РасходОбщийДляУтвДиал { get; set; }
        public virtual DbSet<РасходОбщийДляУтвЛич> РасходОбщийДляУтвЛич { get; set; }
        public virtual DbSet<РасходОплаченДл> РасходОплаченДл { get; set; }
        public virtual DbSet<РасходОплаченУзловая> РасходОплаченУзловая { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляДолга> РасходПоЗаявкамДляДолга { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляДолгаДляПлана> РасходПоЗаявкамДляДолгаДляПлана { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляДолгаРегион> РасходПоЗаявкамДляДолгаРегион { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляДолгаРегионДвери> РасходПоЗаявкамДляДолгаРегионДвери { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляДолгаРегионМебель> РасходПоЗаявкамДляДолгаРегионМебель { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляДолгаРегионСейфы> РасходПоЗаявкамДляДолгаРегионСейфы { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляДолгаРегионСнятьГалочку> РасходПоЗаявкамДляДолгаРегионСнятьГалочку { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляОплаты> РасходПоЗаявкамДляОплаты { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляПросмотра> РасходПоЗаявкамДляПросмотра { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляПросмотраРегион> РасходПоЗаявкамДляПросмотраРегион { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляРаспискиКнРегион> РасходПоЗаявкамДляРаспискиКнРегион { get; set; }
        public virtual DbSet<РасходПоЗаявкамДляРаспискиРегион> РасходПоЗаявкамДляРаспискиРегион { get; set; }
        public virtual DbSet<РасходПоЗаявкамКонтрольный> РасходПоЗаявкамКонтрольный { get; set; }
        public virtual DbSet<РасходПоЗаявкамКонтрольныйВсе> РасходПоЗаявкамКонтрольныйВсе { get; set; }
        public virtual DbSet<РасходПоЗаявкамОплаченным> РасходПоЗаявкамОплаченным { get; set; }
        public virtual DbSet<РасходПоЗаявкамОтгруженнымРегион> РасходПоЗаявкамОтгруженнымРегион { get; set; }
        public virtual DbSet<РасходПоЗаявкамОтгруженныхСПрефДляАкта> РасходПоЗаявкамОтгруженныхСПрефДляАкта { get; set; }
        public virtual DbSet<РасходПоЗаявкамОтгруженныхСПрефРегДб> РасходПоЗаявкамОтгруженныхСПрефРегДб { get; set; }
        public virtual DbSet<РасходПоЗаявкамОтгруженныхСПрефРегДбObjed> РасходПоЗаявкамОтгруженныхСПрефРегДбObjed { get; set; }
        public virtual DbSet<РасходПоЗаявкамОтгруженныхСПрефРегион> РасходПоЗаявкамОтгруженныхСПрефРегион { get; set; }
        public virtual DbSet<РасходПоПартиямРегион> РасходПоПартиямРегион { get; set; }
        public virtual DbSet<РасходПоСчетамКонтрольныйВсе> РасходПоСчетамКонтрольныйВсе { get; set; }
        public virtual DbSet<РасходПоСчетуПоТоваруРегион> РасходПоСчетуПоТоваруРегион { get; set; }
        public virtual DbSet<РасходПодДилера> РасходПодДилера { get; set; }
        public virtual DbSet<РасходПодДилераНедогрузы> РасходПодДилераНедогрузы { get; set; }
        public virtual DbSet<РасходПодДилераНедогрузыКомплРегион> РасходПодДилераНедогрузыКомплРегион { get; set; }
        public virtual DbSet<РасходПодДилераНедогрузыМоскваРегион> РасходПодДилераНедогрузыМоскваРегион { get; set; }
        public virtual DbSet<РасходПодДилераНедогрузыРегион> РасходПодДилераНедогрузыРегион { get; set; }
        public virtual DbSet<РасходПодДилераНедогрузыРегион1111> РасходПодДилераНедогрузыРегион1111 { get; set; }
        public virtual DbSet<РасходПодДилераНедогрузыСчетаРегион> РасходПодДилераНедогрузыСчетаРегион { get; set; }
        public virtual DbSet<РасходПодДилераРегион> РасходПодДилераРегион { get; set; }
        public virtual DbSet<РасходПодДилераЦо> РасходПодДилераЦо { get; set; }
        public virtual DbSet<РасходПриходДенегРегион> РасходПриходДенегРегион { get; set; }
        public virtual DbSet<РасходПроцент> РасходПроцент { get; set; }
        public virtual DbSet<РасходПроцентКл> РасходПроцентКл { get; set; }
        public virtual DbSet<РасходПроцентПг> РасходПроцентПг { get; set; }
        public virtual DbSet<РасходПроцентПгКл> РасходПроцентПгКл { get; set; }
        public virtual DbSet<РасходПроцентРегион> РасходПроцентРегион { get; set; }
        public virtual DbSet<РасходПроцентРегионПг> РасходПроцентРегионПг { get; set; }
        public virtual DbSet<РасходРазрешение> РасходРазрешение { get; set; }
        public virtual DbSet<РасходРазрешениеМоскваРегион> РасходРазрешениеМоскваРегион { get; set; }
        public virtual DbSet<РасходРазрешениеНеделя> РасходРазрешениеНеделя { get; set; }
        public virtual DbSet<РасходРазрешениеНеделяРегион> РасходРазрешениеНеделяРегион { get; set; }
        public virtual DbSet<РасходРазрешениеРегион> РасходРазрешениеРегион { get; set; }
        public virtual DbSet<РасходРаспоряжениеНаОтпускРегион> РасходРаспоряжениеНаОтпускРегион { get; set; }
        public virtual DbSet<РасходРеальный> РасходРеальный { get; set; }
        public virtual DbSet<РасходРеальныйГрупп> РасходРеальныйГрупп { get; set; }
        public virtual DbSet<РасходРеальныйГруппДляГл> РасходРеальныйГруппДляГл { get; set; }
        public virtual DbSet<РасходРеальныйДляБрак> РасходРеальныйДляБрак { get; set; }
        public virtual DbSet<РасходРеальныйДляБракБуфер> РасходРеальныйДляБракБуфер { get; set; }
        public virtual DbSet<РасходРеальныйДляВыравнивания> РасходРеальныйДляВыравнивания { get; set; }
        public virtual DbSet<РасходРеальныйДляВыравниванияРегион> РасходРеальныйДляВыравниванияРегион { get; set; }
        public virtual DbSet<РасходРеальныйДляГл> РасходРеальныйДляГл { get; set; }
        public virtual DbSet<РасходРеальныйДляГлУзловая> РасходРеальныйДляГлУзловая { get; set; }
        public virtual DbSet<РасходРеальныйДляИмпорта> РасходРеальныйДляИмпорта { get; set; }
        public virtual DbSet<РасходРегион> РасходРегион { get; set; }
        public virtual DbSet<РасходРеестр> РасходРеестр { get; set; }
        public virtual DbSet<РасходРеестрПодпись> РасходРеестрПодпись { get; set; }
        public virtual DbSet<РасходСейфы> РасходСейфы { get; set; }
        public virtual DbSet<РасходСуммаПоСчетуРегион> РасходСуммаПоСчетуРегион { get; set; }
        public virtual DbSet<РасходСуммаПоСчетуРегионГруппа> РасходСуммаПоСчетуРегионГруппа { get; set; }
        public virtual DbSet<РасходСчета> РасходСчета { get; set; }
        public virtual DbSet<РасходТоварЦена> РасходТоварЦена { get; set; }
        public virtual DbSet<РасходТовара> РасходТовара { get; set; }
        public virtual DbSet<РасходТовара1> РасходТовара1 { get; set; }
        public virtual DbSet<РасходТовараВозвратыДляАктаСверки> РасходТовараВозвратыДляАктаСверки { get; set; }
        public virtual DbSet<РасходТовараДляАктаСверки> РасходТовараДляАктаСверки { get; set; }
        public virtual DbSet<РасходТовараДляФилиалов> РасходТовараДляФилиалов { get; set; }
        public virtual DbSet<РасходТовараПоставки> РасходТовараПоставки { get; set; }
        public virtual DbSet<РасходТовараПоставкиOld> РасходТовараПоставкиOld { get; set; }
        public virtual DbSet<РасходТовараПоставкиДо2018> РасходТовараПоставкиДо2018 { get; set; }
        public virtual DbSet<РасходТовараРегион> РасходТовараРегион { get; set; }
        public virtual DbSet<РасхолОбщийДляУтв> РасхолОбщийДляУтв { get; set; }
        public virtual DbSet<РасхолУсл> РасхолУсл { get; set; }
        public virtual DbSet<РасчетСсПечать> РасчетСсПечать { get; set; }
        public virtual DbSet<РасчетСсПечатьБолгария> РасчетСсПечатьБолгария { get; set; }
        public virtual DbSet<РасчетШтрафа> РасчетШтрафа { get; set; }
        public virtual DbSet<РасчетШтрафаРегион> РасчетШтрафаРегион { get; set; }
        public virtual DbSet<Расширенная> Расширенная { get; set; }
        public virtual DbSet<РасширеннаяПоставки> РасширеннаяПоставки { get; set; }
        public virtual DbSet<РегистрацияЖалоб> РегистрацияЖалоб { get; set; }
        public virtual DbSet<РегистрацияПриемокПоКачеству> РегистрацияПриемокПоКачеству { get; set; }
        public virtual DbSet<РеестрКомм> РеестрКомм { get; set; }
        public virtual DbSet<РекламацииПоДверям> РекламацииПоДверям { get; set; }
        public virtual DbSet<СводнаяДляПрогнозаДни> СводнаяДляПрогнозаДни { get; set; }
        public virtual DbSet<СводнаяДляПрогнозаДниГрупп> СводнаяДляПрогнозаДниГрупп { get; set; }
        public virtual DbSet<СводнаяДляПрогнозаУчастки> СводнаяДляПрогнозаУчастки { get; set; }
        public virtual DbSet<СводнаяДляПрогнозаУчасткиГрупп> СводнаяДляПрогнозаУчасткиГрупп { get; set; }
        public virtual DbSet<СводнаяПоЗаказамСданоОтгружено> СводнаяПоЗаказамСданоОтгружено { get; set; }
        public virtual DbSet<СводнаяРегион> СводнаяРегион { get; set; }
        public virtual DbSet<СданоПоЗаказу> СданоПоЗаказу { get; set; }
        public virtual DbSet<СданоПоЗаказуBg> СданоПоЗаказуBg { get; set; }
        public virtual DbSet<СданоПоЗаказуВУзловой> СданоПоЗаказуВУзловой { get; set; }
        public virtual DbSet<СданоПоЗаказуВЦо> СданоПоЗаказуВЦо { get; set; }
        public virtual DbSet<СданоПоЗаказуСДатами> СданоПоЗаказуСДатами { get; set; }
        public virtual DbSet<СебестоимостьРегион> СебестоимостьРегион { get; set; }
        public virtual DbSet<Сезонность> Сезонность { get; set; }
        public virtual DbSet<СезонностьПоГруппам> СезонностьПоГруппам { get; set; }
        public virtual DbSet<СервисРасширенныйОтчет> СервисРасширенныйОтчет { get; set; }
        public virtual DbSet<Сканируем> Сканируем { get; set; }
        public virtual DbSet<СканируемГруппы> СканируемГруппы { get; set; }
        public virtual DbSet<СканируемГруппыУзмк> СканируемГруппыУзмк { get; set; }
        public virtual DbSet<СканируемУзмк> СканируемУзмк { get; set; }
        public virtual DbSet<СканируемЯчейки> СканируемЯчейки { get; set; }
        public virtual DbSet<СкидкиДилеров> СкидкиДилеров { get; set; }
        public virtual DbSet<СкидкиДилеровГрупп> СкидкиДилеровГрупп { get; set; }
        public virtual DbSet<СкидкиДилеровГруппРегион> СкидкиДилеровГруппРегион { get; set; }
        public virtual DbSet<СкидкиДилеровПоПодгруппам> СкидкиДилеровПоПодгруппам { get; set; }
        public virtual DbSet<СкидкиДилеровПоПодгруппамРегион> СкидкиДилеровПоПодгруппамРегион { get; set; }
        public virtual DbSet<СкидкиДилеровРегион> СкидкиДилеровРегион { get; set; }
        public virtual DbSet<СкидкиДляКрыма> СкидкиДляКрыма { get; set; }
        public virtual DbSet<СкидкиПоДилерам> СкидкиПоДилерам { get; set; }
        public virtual DbSet<СкидкиПоДилерамНовРегион> СкидкиПоДилерамНовРегион { get; set; }
        public virtual DbSet<СкидкиПоДилерамПоТоварам> СкидкиПоДилерамПоТоварам { get; set; }
        public virtual DbSet<СкидкиПоДилерамПоТоварамРегион> СкидкиПоДилерамПоТоварамРегион { get; set; }
        public virtual DbSet<СкидкиПоДилерамРегион> СкидкиПоДилерамРегион { get; set; }
        public virtual DbSet<СкидкиПоОбъемам> СкидкиПоОбъемам { get; set; }
        public virtual DbSet<СкидкиПоСкладамПоТоварамРегион> СкидкиПоСкладамПоТоварамРегион { get; set; }
        public virtual DbSet<СкидкиПоСкладамРегион> СкидкиПоСкладамРегион { get; set; }
        public virtual DbSet<СкладТовар> СкладТовар { get; set; }
        public virtual DbSet<СкладыФилиалы> СкладыФилиалы { get; set; }
        public virtual DbSet<СколькоСчетов> СколькоСчетов { get; set; }
        public virtual DbSet<Следы> Следы { get; set; }
        public virtual DbSet<СовместныйСписокТоваровВСчетеЗаявке> СовместныйСписокТоваровВСчетеЗаявке { get; set; }
        public virtual DbSet<СовместныйСписокТоваровВСчетеЗаявкеОтгр> СовместныйСписокТоваровВСчетеЗаявкеОтгр { get; set; }
        public virtual DbSet<СовместныйСписокТоваровВСчетеЗаявкеРегион> СовместныйСписокТоваровВСчетеЗаявкеРегион { get; set; }
        public virtual DbSet<СоответсвиеСубсчетСтатья> СоответсвиеСубсчетСтатья { get; set; }
        public virtual DbSet<СоответствиеCashInc> СоответствиеCashInc { get; set; }
        public virtual DbSet<СоответствиеПараметрГрафаБаланс> СоответствиеПараметрГрафаБаланс { get; set; }
        public virtual DbSet<СоответствиеПлательщикФирма> СоответствиеПлательщикФирма { get; set; }
        public virtual DbSet<СоответствиеФилиалФирма> СоответствиеФилиалФирма { get; set; }
        public virtual DbSet<СостояниеПартияВсеРегион> СостояниеПартияВсеРегион { get; set; }
        public virtual DbSet<СостояниеПартияГлРегион> СостояниеПартияГлРегион { get; set; }
        public virtual DbSet<СостояниеПартияРегион> СостояниеПартияРегион { get; set; }
        public virtual DbSet<СостояниеСклада> СостояниеСклада { get; set; }
        public virtual DbSet<СостояниеСкладаДляПечатиРегион> СостояниеСкладаДляПечатиРегион { get; set; }
        public virtual DbSet<СостояниеСкладаНаДень> СостояниеСкладаНаДень { get; set; }
        public virtual DbSet<СостояниеСкладаПоДням> СостояниеСкладаПоДням { get; set; }
        public virtual DbSet<Сотрудники> Сотрудники { get; set; }
        public virtual DbSet<СотрудникиПроектПроизводства> СотрудникиПроектПроизводства { get; set; }
        public virtual DbSet<СотрудникиПроизводства111> СотрудникиПроизводства111 { get; set; }
        public virtual DbSet<СпецПозицииСпецификации> СпецПозицииСпецификации { get; set; }
        public virtual DbSet<СпецСписокДеталей> СпецСписокДеталей { get; set; }
        public virtual DbSet<СпецШапкаСпецификации> СпецШапкаСпецификации { get; set; }
        public virtual DbSet<СпецификацияТрудозатрат> СпецификацияТрудозатрат { get; set; }
        public virtual DbSet<СпецценыДляСебестоимости> СпецценыДляСебестоимости { get; set; }
        public virtual DbSet<СписаниеПриход> СписаниеПриход { get; set; }
        public virtual DbSet<СпискоБалловПоГруппеОценкиДилера> СпискоБалловПоГруппеОценкиДилера { get; set; }
        public virtual DbSet<СпискоСкладов> СпискоСкладов { get; set; }
        public virtual DbSet<СпискоСчетовДляСканированияУзмк> СпискоСчетовДляСканированияУзмк { get; set; }
        public virtual DbSet<СписокАдресовДилеров> СписокАдресовДилеров { get; set; }
        public virtual DbSet<СписокАдресовДилеровРегион> СписокАдресовДилеровРегион { get; set; }
        public virtual DbSet<СписокАдресовКлиентов> СписокАдресовКлиентов { get; set; }
        public virtual DbSet<СписокАртикуловАшан> СписокАртикуловАшан { get; set; }
        public virtual DbSet<СписокАртикуловДилеров> СписокАртикуловДилеров { get; set; }
        public virtual DbSet<СписокАртикуловДилеровРегион> СписокАртикуловДилеровРегион { get; set; }
        public virtual DbSet<СписокАртикуловЕпицентр> СписокАртикуловЕпицентр { get; set; }
        public virtual DbSet<СписокАртикуловЗельгрос> СписокАртикуловЗельгрос { get; set; }
        public virtual DbSet<СписокАртикуловКасторама> СписокАртикуловКасторама { get; set; }
        public virtual DbSet<СписокАртикуловКлиентов> СписокАртикуловКлиентов { get; set; }
        public virtual DbSet<СписокАртикуловКомус> СписокАртикуловКомус { get; set; }
        public virtual DbSet<СписокАртикуловЛеруа> СписокАртикуловЛеруа { get; set; }
        public virtual DbSet<СписокАртикуловОби> СписокАртикуловОби { get; set; }
        public virtual DbSet<СписокАртикуловОбиКв> СписокАртикуловОбиКв { get; set; }
        public virtual DbSet<СписокАртикуловПрагматик> СписокАртикуловПрагматик { get; set; }
        public virtual DbSet<СписокАртикуловПрактикер> СписокАртикуловПрактикер { get; set; }
        public virtual DbSet<СписокАртикуловРаут> СписокАртикуловРаут { get; set; }
        public virtual DbSet<СписокАртикуловСбербанк> СписокАртикуловСбербанк { get; set; }
        public virtual DbSet<СписокАртикуловСтарт> СписокАртикуловСтарт { get; set; }
        public virtual DbSet<СписокАртикуловСтройдепо> СписокАртикуловСтройдепо { get; set; }
        public virtual DbSet<СписокАртикуловХоумСентерз> СписокАртикуловХоумСентерз { get; set; }
        public virtual DbSet<СписокБалловПоOrrДни> СписокБалловПоOrrДни { get; set; }
        public virtual DbSet<СписокБалловПоOrrПроц> СписокБалловПоOrrПроц { get; set; }
        public virtual DbSet<СписокБалловПоRoce> СписокБалловПоRoce { get; set; }
        public virtual DbSet<СписокБалловПоДз> СписокБалловПоДз { get; set; }
        public virtual DbSet<СписокБалловПоДолеOrr> СписокБалловПоДолеOrr { get; set; }
        public virtual DbSet<СписокБалловПоДолеМесяцев> СписокБалловПоДолеМесяцев { get; set; }
        public virtual DbSet<СписокБалловПоДоходности> СписокБалловПоДоходности { get; set; }
        public virtual DbSet<СписокБалловПоКин> СписокБалловПоКин { get; set; }
        public virtual DbSet<СписокБалловПоКоб> СписокБалловПоКоб { get; set; }
        public virtual DbSet<СписокБалловПоЛояльности> СписокБалловПоЛояльности { get; set; }
        public virtual DbSet<СписокБалловПоОтсрочке> СписокБалловПоОтсрочке { get; set; }
        public virtual DbSet<СписокБалловПоСмпр> СписокБалловПоСмпр { get; set; }
        public virtual DbSet<СписокБалловПоТемпам> СписокБалловПоТемпам { get; set; }
        public virtual DbSet<СписокБалловПоТемпамРоста> СписокБалловПоТемпамРоста { get; set; }
        public virtual DbSet<СписокВидовОплат> СписокВидовОплат { get; set; }
        public virtual DbSet<СписокВидовПлатежей> СписокВидовПлатежей { get; set; }
        public virtual DbSet<СписокВидовТранспорта> СписокВидовТранспорта { get; set; }
        public virtual DbSet<СписокВидовУслуг> СписокВидовУслуг { get; set; }
        public virtual DbSet<СписокВодителей> СписокВодителей { get; set; }
        public virtual DbSet<СписокВсехКлиентовBg> СписокВсехКлиентовBg { get; set; }
        public virtual DbSet<СписокВсехКлиентовРегион> СписокВсехКлиентовРегион { get; set; }
        public virtual DbSet<СписокВсехКлиентовРегионNew> СписокВсехКлиентовРегионNew { get; set; }
        public virtual DbSet<СписокВсехКлиентовРегионРф> СписокВсехКлиентовРегионРф { get; set; }
        public virtual DbSet<СписокВсехКлиентовРегионРфРегион> СписокВсехКлиентовРегионРфРегион { get; set; }
        public virtual DbSet<СписокВсехКлиентовРегионРфЦо> СписокВсехКлиентовРегионРфЦо { get; set; }
        public virtual DbSet<СписокВсехНакладных> СписокВсехНакладных { get; set; }
        public virtual DbSet<СписокВсехНакладныхАрхив> СписокВсехНакладныхАрхив { get; set; }
        public virtual DbSet<СписокВсехНакладныхСДилерами> СписокВсехНакладныхСДилерами { get; set; }
        public virtual DbSet<СписокВсехНакладныхСКлиентами> СписокВсехНакладныхСКлиентами { get; set; }
        public virtual DbSet<СписокВсехРаспоряжений> СписокВсехРаспоряжений { get; set; }
        public virtual DbSet<СписокВсехРаспоряженийАрхив> СписокВсехРаспоряженийАрхив { get; set; }
        public virtual DbSet<СписокВсехРаспоряженийВообщеРегион> СписокВсехРаспоряженийВообщеРегион { get; set; }
        public virtual DbSet<СписокВсехРаспоряженийЗаГодРегион> СписокВсехРаспоряженийЗаГодРегион { get; set; }
        public virtual DbSet<СписокВсехРаспоряженийРегион> СписокВсехРаспоряженийРегион { get; set; }
        public virtual DbSet<СписокВсехРаспоряженийСДилерами> СписокВсехРаспоряженийСДилерами { get; set; }
        public virtual DbSet<СписокВсехРаспоряженийСКлиентами> СписокВсехРаспоряженийСКлиентами { get; set; }
        public virtual DbSet<СписокГеографическихЕдиниц> СписокГеографическихЕдиниц { get; set; }
        public virtual DbSet<СписокГородов> СписокГородов { get; set; }
        public virtual DbSet<СписокГруппДефектов> СписокГруппДефектов { get; set; }
        public virtual DbSet<СписокГруппСкидок> СписокГруппСкидок { get; set; }
        public virtual DbSet<СписокГруппСкидокДвери> СписокГруппСкидокДвери { get; set; }
        public virtual DbSet<СписокГруппФирмВРеестре> СписокГруппФирмВРеестре { get; set; }
        public virtual DbSet<СписокДефектов> СписокДефектов { get; set; }
        public virtual DbSet<СписокДилеров> СписокДилеров { get; set; }
        public virtual DbSet<СписокДилеровДляСписка> СписокДилеровДляСписка { get; set; }
        public virtual DbSet<СписокДилеровОбъединения> СписокДилеровОбъединения { get; set; }
        public virtual DbSet<СписокДилеровОбъединенияФильтр> СписокДилеровОбъединенияФильтр { get; set; }
        public virtual DbSet<СписокДилеровРегион> СписокДилеровРегион { get; set; }
        public virtual DbSet<СписокДилеровСДоступами> СписокДилеровСДоступами { get; set; }
        public virtual DbSet<СписокДляБлокировки> СписокДляБлокировки { get; set; }
        public virtual DbSet<СписокДляВозвратовРегион> СписокДляВозвратовРегион { get; set; }
        public virtual DbSet<СписокДляОтгрузкиПереводРегион> СписокДляОтгрузкиПереводРегион { get; set; }
        public virtual DbSet<СписокДляОтгрузкиТтРегионNew> СписокДляОтгрузкиТтРегионNew { get; set; }
        public virtual DbSet<СписокДляЦениСтарыеРеквизиты13032015> СписокДляЦениСтарыеРеквизиты13032015 { get; set; }
        public virtual DbSet<СписокДляЦепи> СписокДляЦепи { get; set; }
        public virtual DbSet<СписокДляЦепиПриказы> СписокДляЦепиПриказы { get; set; }
        public virtual DbSet<СписокДляЦепиСтарыеРеквизиты> СписокДляЦепиСтарыеРеквизиты { get; set; }
        public virtual DbSet<СписокДляЦепиСтарыеРеквизиты29072014> СписокДляЦепиСтарыеРеквизиты29072014 { get; set; }
        public virtual DbSet<СписокДляЦепиСтарыеРеквизитыНпо> СписокДляЦепиСтарыеРеквизитыНпо { get; set; }
        public virtual DbSet<СписокДоверенныхЛицПоставки> СписокДоверенныхЛицПоставки { get; set; }
        public virtual DbSet<СписокДоговоров> СписокДоговоров { get; set; }
        public virtual DbSet<СписокДоговоровПоставки> СписокДоговоровПоставки { get; set; }
        public virtual DbSet<СписокДокументов> СписокДокументов { get; set; }
        public virtual DbSet<СписокДокументовЮрлиц> СписокДокументовЮрлиц { get; set; }
        public virtual DbSet<СписокДолжностей> СписокДолжностей { get; set; }
        public virtual DbSet<СписокДолжностейПоставки> СписокДолжностейПоставки { get; set; }
        public virtual DbSet<СписокДоступов> СписокДоступов { get; set; }
        public virtual DbSet<СписокДоступовБухгКФирмам> СписокДоступовБухгКФирмам { get; set; }
        public virtual DbSet<СписокДоступовБухгалтеров> СписокДоступовБухгалтеров { get; set; }
        public virtual DbSet<СписокДоступовКДилерам> СписокДоступовКДилерам { get; set; }
        public virtual DbSet<СписокДоступовКПоставщикам> СписокДоступовКПоставщикам { get; set; }
        public virtual DbSet<СписокДоступовКФирмам> СписокДоступовКФирмам { get; set; }
        public virtual DbSet<СписокДоступовНаСогласование> СписокДоступовНаСогласование { get; set; }
        public virtual DbSet<СписокДоступовРеестр> СписокДоступовРеестр { get; set; }
        public virtual DbSet<СписокДоступовРеестрПлательщики> СписокДоступовРеестрПлательщики { get; set; }
        public virtual DbSet<СписокДоступовФинплан> СписокДоступовФинплан { get; set; }
        public virtual DbSet<СписокЕдиницИзмерения> СписокЕдиницИзмерения { get; set; }
        public virtual DbSet<СписокЗамков> СписокЗамков { get; set; }
        public virtual DbSet<СписокЗамковЗависимости> СписокЗамковЗависимости { get; set; }
        public virtual DbSet<СписокЗамковПоМоделям> СписокЗамковПоМоделям { get; set; }
        public virtual DbSet<СписокЗамковСпецификация> СписокЗамковСпецификация { get; set; }
        public virtual DbSet<СписокЗатрат> СписокЗатрат { get; set; }
        public virtual DbSet<СписокЗаявокДляВыпискиРаспоряжений11111> СписокЗаявокДляВыпискиРаспоряжений11111 { get; set; }
        public virtual DbSet<СписокЗаявокДляВыпискиРаспоряженийРегион> СписокЗаявокДляВыпискиРаспоряженийРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляВыпискиСфРегион> СписокЗаявокДляВыпискиСфРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляДолга> СписокЗаявокДляДолга { get; set; }
        public virtual DbSet<СписокЗаявокДляДолгаDib> СписокЗаявокДляДолгаDib { get; set; }
        public virtual DbSet<СписокЗаявокДляОплатыДолларыРегион> СписокЗаявокДляОплатыДолларыРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляОплатыОбщийРегион> СписокЗаявокДляОплатыОбщийРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляОплатыРублиРегион> СписокЗаявокДляОплатыРублиРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляПереводРегион> СписокЗаявокДляПереводРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляПереводаДляОтчетаРегион> СписокЗаявокДляПереводаДляОтчетаРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляПросмотраЗавод> СписокЗаявокДляПросмотраЗавод { get; set; }
        public virtual DbSet<СписокЗаявокДляПросмотраРегион> СписокЗаявокДляПросмотраРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляРаспискиКнРегион> СписокЗаявокДляРаспискиКнРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляРаспискиРегион> СписокЗаявокДляРаспискиРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляРаспискиФормаКнРегион> СписокЗаявокДляРаспискиФормаКнРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляРаспискиФормаРегион> СписокЗаявокДляРаспискиФормаРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляТт> СписокЗаявокДляТт { get; set; }
        public virtual DbSet<СписокЗаявокДляТтВысРегион> СписокЗаявокДляТтВысРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляТтРегион> СписокЗаявокДляТтРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляТтРегионВсе> СписокЗаявокДляТтРегионВсе { get; set; }
        public virtual DbSet<СписокЗаявокДляТтФилРегион> СписокЗаявокДляТтФилРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляУдаленияРегион> СписокЗаявокДляУдаленияРегион { get; set; }
        public virtual DbSet<СписокЗаявокДляФилиала> СписокЗаявокДляФилиала { get; set; }
        public virtual DbSet<СписокЗаявокДляФилиаловОнлайн> СписокЗаявокДляФилиаловОнлайн { get; set; }
        public virtual DbSet<СписокЗаявокПоставки> СписокЗаявокПоставки { get; set; }
        public virtual DbSet<СписокЗаявокПоставкиNew> СписокЗаявокПоставкиNew { get; set; }
        public virtual DbSet<СписокИзмененийСкидки> СписокИзмененийСкидки { get; set; }
        public virtual DbSet<СписокИсполнений> СписокИсполнений { get; set; }
        public virtual DbSet<СписокИсполненийДверейНовый> СписокИсполненийДверейНовый { get; set; }
        public virtual DbSet<СписокИсполненийДвери> СписокИсполненийДвери { get; set; }
        public virtual DbSet<СписокИсполненийЗависимости> СписокИсполненийЗависимости { get; set; }
        public virtual DbSet<СписокИсполненийПоЗамкам> СписокИсполненийПоЗамкам { get; set; }
        public virtual DbSet<СписокИсполненийСпецификация> СписокИсполненийСпецификация { get; set; }
        public virtual DbSet<СписокИсточников> СписокИсточников { get; set; }
        public virtual DbSet<СписокКПродажеДилерНовТмп> СписокКПродажеДилерНовТмп { get; set; }
        public virtual DbSet<СписокКампаний> СписокКампаний { get; set; }
        public virtual DbSet<СписокКаналовСбыта> СписокКаналовСбыта { get; set; }
        public virtual DbSet<СписокКат> СписокКат { get; set; }
        public virtual DbSet<СписокКатегорий> СписокКатегорий { get; set; }
        public virtual DbSet<СписокКатегорийДверей> СписокКатегорийДверей { get; set; }
        public virtual DbSet<СписокКатегорийДилеров> СписокКатегорийДилеров { get; set; }
        public virtual DbSet<СписокКатегорийКонтактов> СписокКатегорийКонтактов { get; set; }
        public virtual DbSet<СписокКатегорийПоставщиков> СписокКатегорийПоставщиков { get; set; }
        public virtual DbSet<СписокКатегорийСтатистика> СписокКатегорийСтатистика { get; set; }
        public virtual DbSet<СписокКатегорийТоваров> СписокКатегорийТоваров { get; set; }
        public virtual DbSet<СписокКлассовВзломостойкости> СписокКлассовВзломостойкости { get; set; }
        public virtual DbSet<СписокКлассовДверей> СписокКлассовДверей { get; set; }
        public virtual DbSet<СписокКлиентов> СписокКлиентов { get; set; }
        public virtual DbSet<СписокКлиентовПоставки> СписокКлиентовПоставки { get; set; }
        public virtual DbSet<СписокКлиентовРегион> СписокКлиентовРегион { get; set; }
        public virtual DbSet<СписокКлиентовФилиалТмп> СписокКлиентовФилиалТмп { get; set; }
        public virtual DbSet<СписокКлиентовЦо> СписокКлиентовЦо { get; set; }
        public virtual DbSet<СписокКодовБдр> СписокКодовБдр { get; set; }
        public virtual DbSet<СписокКодовИзготовителя> СписокКодовИзготовителя { get; set; }
        public virtual DbSet<СписокКодовМоделей> СписокКодовМоделей { get; set; }
        public virtual DbSet<СписокКодовОкраски> СписокКодовОкраски { get; set; }
        public virtual DbSet<СписокКодовТнвд> СписокКодовТнвд { get; set; }
        public virtual DbSet<СписокКонструкций> СписокКонструкций { get; set; }
        public virtual DbSet<СписокКонструкцийНовый> СписокКонструкцийНовый { get; set; }
        public virtual DbSet<СписокКонтактов> СписокКонтактов { get; set; }
        public virtual DbSet<СписокКонтактовПоставщиков> СписокКонтактовПоставщиков { get; set; }
        public virtual DbSet<СписокКонтактовРегион> СписокКонтактовРегион { get; set; }
        public virtual DbSet<СписокКоробок> СписокКоробок { get; set; }
        public virtual DbSet<СписокКредитов> СписокКредитов { get; set; }
        public virtual DbSet<СписокКредитовРегион> СписокКредитовРегион { get; set; }
        public virtual DbSet<СписокКритериев> СписокКритериев { get; set; }
        public virtual DbSet<СписокЛояльностей> СписокЛояльностей { get; set; }
        public virtual DbSet<СписокМашин> СписокМашин { get; set; }
        public virtual DbSet<СписокМесяцов> СписокМесяцов { get; set; }
        public virtual DbSet<СписокМетодовДоставки> СписокМетодовДоставки { get; set; }
        public virtual DbSet<СписокМетодовПеревозки> СписокМетодовПеревозки { get; set; }
        public virtual DbSet<СписокМоделей> СписокМоделей { get; set; }
        public virtual DbSet<СписокМоделейГрупп> СписокМоделейГрупп { get; set; }
        public virtual DbSet<СписокМоделейДерево> СписокМоделейДерево { get; set; }
        public virtual DbSet<СписокНакладныхПоставки> СписокНакладныхПоставки { get; set; }
        public virtual DbSet<СписокНаличияАнтипаники> СписокНаличияАнтипаники { get; set; }
        public virtual DbSet<СписокНаличияПластины> СписокНаличияПластины { get; set; }
        public virtual DbSet<СписокНаполнителей> СписокНаполнителей { get; set; }
        public virtual DbSet<СписокНовыхГрупп> СписокНовыхГрупп { get; set; }
        public virtual DbSet<СписокНовыхГруппДляКонтроля> СписокНовыхГруппДляКонтроля { get; set; }
        public virtual DbSet<СписокНовыхМоделей> СписокНовыхМоделей { get; set; }
        public virtual DbSet<СписокНовыхПодгрупп> СписокНовыхПодгрупп { get; set; }
        public virtual DbSet<СписокНовыхПодгруппДляКонтроля> СписокНовыхПодгруппДляКонтроля { get; set; }
        public virtual DbSet<СписокНомеровМодификаций> СписокНомеровМодификаций { get; set; }
        public virtual DbSet<СписокНомеровСертификатов> СписокНомеровСертификатов { get; set; }
        public virtual DbSet<СписокОбоснованийБлокировки> СписокОбоснованийБлокировки { get; set; }
        public virtual DbSet<СписокОбсуждений> СписокОбсуждений { get; set; }
        public virtual DbSet<СписокОбщихСтатей> СписокОбщихСтатей { get; set; }
        public virtual DbSet<СписокОбъединенныхГрупп> СписокОбъединенныхГрупп { get; set; }
        public virtual DbSet<СписокОкраскиЗависимости> СписокОкраскиЗависимости { get; set; }
        public virtual DbSet<СписокОпераций> СписокОпераций { get; set; }
        public virtual DbSet<СписокОперацийПоПриходу> СписокОперацийПоПриходу { get; set; }
        public virtual DbSet<СписокОснованийДляСписанияСоСклада> СписокОснованийДляСписанияСоСклада { get; set; }
        public virtual DbSet<СписокОтветственныхПоПоставщикамПоставки> СписокОтветственныхПоПоставщикамПоставки { get; set; }
        public virtual DbSet<СписокОтделов> СписокОтделов { get; set; }
        public virtual DbSet<СписокОткрываний> СписокОткрываний { get; set; }
        public virtual DbSet<СписокПанелей> СписокПанелей { get; set; }
        public virtual DbSet<СписокПанелейВнутренних> СписокПанелейВнутренних { get; set; }
        public virtual DbSet<СписокПанелейВнутреннихЗависимости> СписокПанелейВнутреннихЗависимости { get; set; }
        public virtual DbSet<СписокПанелейНовый> СписокПанелейНовый { get; set; }
        public virtual DbSet<СписокПанелейНовыйЗависимости> СписокПанелейНовыйЗависимости { get; set; }
        public virtual DbSet<СписокПанелейСИсполнениями> СписокПанелейСИсполнениями { get; set; }
        public virtual DbSet<СписокПеревозчиков> СписокПеревозчиков { get; set; }
        public virtual DbSet<СписокПетель> СписокПетель { get; set; }
        public virtual DbSet<СписокПлатежейПоСчетам> СписокПлатежейПоСчетам { get; set; }
        public virtual DbSet<СписокПлощадок> СписокПлощадок { get; set; }
        public virtual DbSet<СписокПоОценке> СписокПоОценке { get; set; }
        public virtual DbSet<СписокПоОценкеКд> СписокПоОценкеКд { get; set; }
        public virtual DbSet<СписокПодгрупп> СписокПодгрупп { get; set; }
        public virtual DbSet<СписокПодгруппПод> СписокПодгруппПод { get; set; }
        public virtual DbSet<СписокПодгруппРеагированиеФилиала> СписокПодгруппРеагированиеФилиала { get; set; }
        public virtual DbSet<СписокПоддефектов> СписокПоддефектов { get; set; }
        public virtual DbSet<СписокПодразделенийРеестра> СписокПодразделенийРеестра { get; set; }
        public virtual DbSet<СписокПокупателей> СписокПокупателей { get; set; }
        public virtual DbSet<СписокПолотен> СписокПолотен { get; set; }
        public virtual DbSet<СписокПолотенВысота> СписокПолотенВысота { get; set; }
        public virtual DbSet<СписокПолотенШирина> СписокПолотенШирина { get; set; }
        public virtual DbSet<СписокПользователей> СписокПользователей { get; set; }
        public virtual DbSet<СписокПораженийВТендере> СписокПораженийВТендере { get; set; }
        public virtual DbSet<СписокПоставщиков> СписокПоставщиков { get; set; }
        public virtual DbSet<СписокПоставщиковПромет> СписокПоставщиковПромет { get; set; }
        public virtual DbSet<СписокПоставщиковРеестра> СписокПоставщиковРеестра { get; set; }
        public virtual DbSet<СписокПотребителей> СписокПотребителей { get; set; }
        public virtual DbSet<СписокПредметовЗаказов> СписокПредметовЗаказов { get; set; }
        public virtual DbSet<СписокПретензий> СписокПретензий { get; set; }
        public virtual DbSet<СписокПричин> СписокПричин { get; set; }
        public virtual DbSet<СписокПричинДопскидок> СписокПричинДопскидок { get; set; }
        public virtual DbSet<СписокПричинОтказаОтТендера> СписокПричинОтказаОтТендера { get; set; }
        public virtual DbSet<СписокПричинТмп> СписокПричинТмп { get; set; }
        public virtual DbSet<СписокПродажаРегионТмп> СписокПродажаРегионТмп { get; set; }
        public virtual DbSet<СписокПроектов> СписокПроектов { get; set; }
        public virtual DbSet<СписокПроизводств> СписокПроизводств { get; set; }
        public virtual DbSet<СписокПроизводственныхУчастков> СписокПроизводственныхУчастков { get; set; }
        public virtual DbSet<СписокПунктовПогрузки> СписокПунктовПогрузки { get; set; }
        public virtual DbSet<СписокРазмеровСтворок> СписокРазмеровСтворок { get; set; }
        public virtual DbSet<СписокРазмеровСтворокЗависимости> СписокРазмеровСтворокЗависимости { get; set; }
        public virtual DbSet<СписокРазрешений> СписокРазрешений { get; set; }
        public virtual DbSet<СписокРазрешенийРегион> СписокРазрешенийРегион { get; set; }
        public virtual DbSet<СписокРаспоряженийДвойныхКомусРегион> СписокРаспоряженийДвойныхКомусРегион { get; set; }
        public virtual DbSet<СписокРаспоряженийДвойныхРегион> СписокРаспоряженийДвойныхРегион { get; set; }
        public virtual DbSet<СписокРаспоряженийДляУдаленияВсеРегион> СписокРаспоряженийДляУдаленияВсеРегион { get; set; }
        public virtual DbSet<СписокРаспоряженийДляУдаленияРегион> СписокРаспоряженийДляУдаленияРегион { get; set; }
        public virtual DbSet<СписокРегионов> СписокРегионов { get; set; }
        public virtual DbSet<СписокРейтингов> СписокРейтингов { get; set; }
        public virtual DbSet<СписокРекламаций> СписокРекламаций { get; set; }
        public virtual DbSet<СписокРешений> СписокРешений { get; set; }
        public virtual DbSet<СписокРисунков> СписокРисунков { get; set; }
        public virtual DbSet<СписокСервисов> СписокСервисов { get; set; }
        public virtual DbSet<СписокСертификатов> СписокСертификатов { get; set; }
        public virtual DbSet<СписокСкидокДляТоваров> СписокСкидокДляТоваров { get; set; }
        public virtual DbSet<СписокСкладов> СписокСкладов { get; set; }
        public virtual DbSet<СписокСкладов1> СписокСкладов1 { get; set; }
        public virtual DbSet<СписокСкладовПоставки> СписокСкладовПоставки { get; set; }
        public virtual DbSet<СписокСкладовПоставкиЗмк> СписокСкладовПоставкиЗмк { get; set; }
        public virtual DbSet<СписокСкладовРегион> СписокСкладовРегион { get; set; }
        public virtual DbSet<СписокСотрудников> СписокСотрудников { get; set; }
        public virtual DbSet<СписокСтадий> СписокСтадий { get; set; }
        public virtual DbSet<СписокСтандартов> СписокСтандартов { get; set; }
        public virtual DbSet<СписокСтатейДляCashFlow> СписокСтатейДляCashFlow { get; set; }
        public virtual DbSet<СписокСтатейДляФилиалов> СписокСтатейДляФилиалов { get; set; }
        public virtual DbSet<СписокСтатейЗатрат> СписокСтатейЗатрат { get; set; }
        public virtual DbSet<СписокСтатейПрихода> СписокСтатейПрихода { get; set; }
        public virtual DbSet<СписокСтатейРасхода> СписокСтатейРасхода { get; set; }
        public virtual DbSet<СписокСтатусов> СписокСтатусов { get; set; }
        public virtual DbSet<СписокСтатусовБюджетности> СписокСтатусовБюджетности { get; set; }
        public virtual DbSet<СписокСтатусовСчетов> СписокСтатусовСчетов { get; set; }
        public virtual DbSet<СписокСтекол> СписокСтекол { get; set; }
        public virtual DbSet<СписокСтеколЗависимости> СписокСтеколЗависимости { get; set; }
        public virtual DbSet<СписокСтран> СписокСтран { get; set; }
        public virtual DbSet<СписокСтруктурныхПодразделений> СписокСтруктурныхПодразделений { get; set; }
        public virtual DbSet<СписокСубсчетов> СписокСубсчетов { get; set; }
        public virtual DbSet<СписокСчетов> СписокСчетов { get; set; }
        public virtual DbSet<СписокСчетовВсехРегион> СписокСчетовВсехРегион { get; set; }
        public virtual DbSet<СписокСчетовДляПросмотраРегион> СписокСчетовДляПросмотраРегион { get; set; }
        public virtual DbSet<СписокСчетовДляПроходной1111> СписокСчетовДляПроходной1111 { get; set; }
        public virtual DbSet<СписокСчетовДляСканирования1111> СписокСчетовДляСканирования1111 { get; set; }
        public virtual DbSet<СписокСчетовДляСканированияРегион> СписокСчетовДляСканированияРегион { get; set; }
        public virtual DbSet<СписокСчетовДляСканированияУзмк> СписокСчетовДляСканированияУзмк { get; set; }
        public virtual DbSet<СписокСчетовНеисполненныхРегион> СписокСчетовНеисполненныхРегион { get; set; }
        public virtual DbSet<СписокСчетовНеоплаченныхРегион> СписокСчетовНеоплаченныхРегион { get; set; }
        public virtual DbSet<СписокСчетовНеоплаченныхЧастичноОтгруженныхРегион> СписокСчетовНеоплаченныхЧастичноОтгруженныхРегион { get; set; }
        public virtual DbSet<СписокСчетовЦо> СписокСчетовЦо { get; set; }
        public virtual DbSet<СписокТем> СписокТем { get; set; }
        public virtual DbSet<СписокТендерныхГруппТовара> СписокТендерныхГруппТовара { get; set; }
        public virtual DbSet<СписокТендеровОтчет> СписокТендеровОтчет { get; set; }
        public virtual DbSet<СписокТехпроцессов> СписокТехпроцессов { get; set; }
        public virtual DbSet<СписокТиповГрузов> СписокТиповГрузов { get; set; }
        public virtual DbSet<СписокТиповГрупп> СписокТиповГрупп { get; set; }
        public virtual DbSet<СписокТиповГруппПоставки> СписокТиповГруппПоставки { get; set; }
        public virtual DbSet<СписокТиповДверей> СписокТиповДверей { get; set; }
        public virtual DbSet<СписокТиповДокументов> СписокТиповДокументов { get; set; }
        public virtual DbSet<СписокТиповДолгов> СписокТиповДолгов { get; set; }
        public virtual DbSet<СписокТиповКонтактов> СписокТиповКонтактов { get; set; }
        public virtual DbSet<СписокТиповКонтрактов> СписокТиповКонтрактов { get; set; }
        public virtual DbSet<СписокТиповПанелей> СписокТиповПанелей { get; set; }
        public virtual DbSet<СписокТиповПоставщика> СписокТиповПоставщика { get; set; }
        public virtual DbSet<СписокТиповСкладов> СписокТиповСкладов { get; set; }
        public virtual DbSet<СписокТиповТоваровДляS> СписокТиповТоваровДляS { get; set; }
        public virtual DbSet<СписокТоварныйГруппДеревоДвери> СписокТоварныйГруппДеревоДвери { get; set; }
        public virtual DbSet<СписокТоварныхГрупп> СписокТоварныхГрупп { get; set; }
        public virtual DbSet<СписокТоварныхГруппПоставки> СписокТоварныхГруппПоставки { get; set; }
        public virtual DbSet<СписокТоварныхГруппПоставкиOld> СписокТоварныхГруппПоставкиOld { get; set; }
        public virtual DbSet<СписокТоварныхКатегорийПоставки> СписокТоварныхКатегорийПоставки { get; set; }
        public virtual DbSet<СписокТоваровВPacking> СписокТоваровВPacking { get; set; }
        public virtual DbSet<СписокТоваровВЗаявке> СписокТоваровВЗаявке { get; set; }
        public virtual DbSet<СписокТоваровВЗаявкеДляВозвратов> СписокТоваровВЗаявкеДляВозвратов { get; set; }
        public virtual DbSet<СписокТоваровВЗаявкеДляВозвратовПоставок> СписокТоваровВЗаявкеДляВозвратовПоставок { get; set; }
        public virtual DbSet<СписокТоваровВЗаявкеЗавод> СписокТоваровВЗаявкеЗавод { get; set; }
        public virtual DbSet<СписокТоваровВЗаявкеНаПереводРегион> СписокТоваровВЗаявкеНаПереводРегион { get; set; }
        public virtual DbSet<СписокТоваровВЗаявкеРегион> СписокТоваровВЗаявкеРегион { get; set; }
        public virtual DbSet<СписокТоваровВПриходеПоставки> СписокТоваровВПриходеПоставки { get; set; }
        public virtual DbSet<СписокТоваровВСчетеNew> СписокТоваровВСчетеNew { get; set; }
        public virtual DbSet<СписокТоваровВСчетеАванс> СписокТоваровВСчетеАванс { get; set; }
        public virtual DbSet<СписокТоваровВСчетеДляВозвратовПоставок> СписокТоваровВСчетеДляВозвратовПоставок { get; set; }
        public virtual DbSet<СписокТоваровВСчетеДляНакладной> СписокТоваровВСчетеДляНакладной { get; set; }
        public virtual DbSet<СписокТоваровВСчетеНов> СписокТоваровВСчетеНов { get; set; }
        public virtual DbSet<СписокТоваровВСчетеРегион> СписокТоваровВСчетеРегион { get; set; }
        public virtual DbSet<СписокТоваровВСчетеТт> СписокТоваровВСчетеТт { get; set; }
        public virtual DbSet<СписокТоваровВСчетеФилиала> СписокТоваровВСчетеФилиала { get; set; }
        public virtual DbSet<СписокТоваровДляСфАванс> СписокТоваровДляСфАванс { get; set; }
        public virtual DbSet<СписокТолщинПанелей> СписокТолщинПанелей { get; set; }
        public virtual DbSet<СписокУпаковки> СписокУпаковки { get; set; }
        public virtual DbSet<СписокУсловийОплаты> СписокУсловийОплаты { get; set; }
        public virtual DbSet<СписокУсловийПродажи> СписокУсловийПродажи { get; set; }
        public virtual DbSet<СписокУсловийХранения> СписокУсловийХранения { get; set; }
        public virtual DbSet<СписокУчастков> СписокУчастков { get; set; }
        public virtual DbSet<СписокФирм> СписокФирм { get; set; }
        public virtual DbSet<СписокФирмДилеров> СписокФирмДилеров { get; set; }
        public virtual DbSet<СписокФирмПлательщиков> СписокФирмПлательщиков { get; set; }
        public virtual DbSet<СписокФирмПоставки> СписокФирмПоставки { get; set; }
        public virtual DbSet<СписокФирмРегион> СписокФирмРегион { get; set; }
        public virtual DbSet<СписокФирмРеестра> СписокФирмРеестра { get; set; }
        public virtual DbSet<СписокФункционала> СписокФункционала { get; set; }
        public virtual DbSet<СписокЦветов> СписокЦветов { get; set; }
        public virtual DbSet<СписокЦветовПанелей> СписокЦветовПанелей { get; set; }
        public virtual DbSet<СписокЦенДляДилеров> СписокЦенДляДилеров { get; set; }
        public virtual DbSet<СписокЦенПоставщиковПоставки> СписокЦенПоставщиковПоставки { get; set; }
        public virtual DbSet<СписокЭкспортеров> СписокЭкспортеров { get; set; }
        public virtual DbSet<СписокЮрлицДилеров> СписокЮрлицДилеров { get; set; }
        public virtual DbSet<СписокЮрлицКлиентов> СписокЮрлицКлиентов { get; set; }
        public virtual DbSet<СписокЮрлицКлиентовПоставки> СписокЮрлицКлиентовПоставки { get; set; }
        public virtual DbSet<СредниеЦены> СредниеЦены { get; set; }
        public virtual DbSet<СреднийВыпуск> СреднийВыпуск { get; set; }
        public virtual DbSet<СрокиИПорт> СрокиИПорт { get; set; }
        public virtual DbSet<СсЗп> СсЗп { get; set; }
        public virtual DbSet<СсылкиДляТендеров> СсылкиДляТендеров { get; set; }
        public virtual DbSet<СтандартыКомплектации> СтандартыКомплектации { get; set; }
        public virtual DbSet<СтатусыЗаказов> СтатусыЗаказов { get; set; }
        public virtual DbSet<СтатусыЗказовКатегории> СтатусыЗказовКатегории { get; set; }
        public virtual DbSet<СтатусыТендеров> СтатусыТендеров { get; set; }
        public virtual DbSet<СтатьиДляIncome> СтатьиДляIncome { get; set; }
        public virtual DbSet<СтруктураПродаж> СтруктураПродаж { get; set; }
        public virtual DbSet<СтруктураПродажЗмкМебель> СтруктураПродажЗмкМебель { get; set; }
        public virtual DbSet<СтруктураПродажЗмкСейфы> СтруктураПродажЗмкСейфы { get; set; }
        public virtual DbSet<СтруктураПродажРегион> СтруктураПродажРегион { get; set; }
        public virtual DbSet<СтруктураПродажЦо> СтруктураПродажЦо { get; set; }
        public virtual DbSet<СудебныеОплаты> СудебныеОплаты { get; set; }
        public virtual DbSet<СуммаЗаявкиДляДолгаВозвраты> СуммаЗаявкиДляДолгаВозвраты { get; set; }
        public virtual DbSet<СуммаЗаявкиДляДолгаВозвратыКл> СуммаЗаявкиДляДолгаВозвратыКл { get; set; }
        public virtual DbSet<СуммаЗаявкиДляДолгаОтгружено> СуммаЗаявкиДляДолгаОтгружено { get; set; }
        public virtual DbSet<СуммаЗаявкиДляДолгаОтгруженоКл> СуммаЗаявкиДляДолгаОтгруженоКл { get; set; }
        public virtual DbSet<СуммаНакладнойРегион> СуммаНакладнойРегион { get; set; }
        public virtual DbSet<СуммаОплатПоЗаявкеФинплан> СуммаОплатПоЗаявкеФинплан { get; set; }
        public virtual DbSet<СуммаОплатыДляДолга> СуммаОплатыДляДолга { get; set; }
        public virtual DbSet<СуммаОплатыДляДолгаКл> СуммаОплатыДляДолгаКл { get; set; }
        public virtual DbSet<СуммаПлатежкиРегион> СуммаПлатежкиРегион { get; set; }
        public virtual DbSet<СуммаПоЗаявкеКвРегион> СуммаПоЗаявкеКвРегион { get; set; }
        public virtual DbSet<СуммаПоЗаявкеРасп> СуммаПоЗаявкеРасп { get; set; }
        public virtual DbSet<СуммаПоЗаявкеРегион> СуммаПоЗаявкеРегион { get; set; }
        public virtual DbSet<СуммаПоЗаявкеФактРегион> СуммаПоЗаявкеФактРегион { get; set; }
        public virtual DbSet<СуммаПоПлатежке> СуммаПоПлатежке { get; set; }
        public virtual DbSet<СуммаПоПлатежкеГрупп> СуммаПоПлатежкеГрупп { get; set; }
        public virtual DbSet<СуммаПоПлатежкеИтого> СуммаПоПлатежкеИтого { get; set; }
        public virtual DbSet<СуммаПоПлатежкеКл> СуммаПоПлатежкеКл { get; set; }
        public virtual DbSet<СуммаПоПлатежкеНовРегион> СуммаПоПлатежкеНовРегион { get; set; }
        public virtual DbSet<СуммаПоПлатежкеОстатки> СуммаПоПлатежкеОстатки { get; set; }
        public virtual DbSet<СуммаПоПлатежкеРегион> СуммаПоПлатежкеРегион { get; set; }
        public virtual DbSet<СуммаПрихода> СуммаПрихода { get; set; }
        public virtual DbSet<СуммаПриходаВместеСДорогойРегион> СуммаПриходаВместеСДорогойРегион { get; set; }
        public virtual DbSet<СуммаПриходаВыставки> СуммаПриходаВыставки { get; set; }
        public virtual DbSet<СуммаПриходаГл> СуммаПриходаГл { get; set; }
        public virtual DbSet<СуммаПриходаРегион> СуммаПриходаРегион { get; set; }
        public virtual DbSet<СуммаПриходаСРозницеРегион> СуммаПриходаСРозницеРегион { get; set; }
        public virtual DbSet<СуммаПриходаСРозницеРегионЗаказы> СуммаПриходаСРозницеРегионЗаказы { get; set; }
        public virtual DbSet<СуммаПриходаСЦенойПоТовПоставки> СуммаПриходаСЦенойПоТовПоставки { get; set; }
        public virtual DbSet<СуммаПриходаСЦенойПоставки> СуммаПриходаСЦенойПоставки { get; set; }
        public virtual DbSet<СуммаПриходаСЦенойРегион> СуммаПриходаСЦенойРегион { get; set; }
        public virtual DbSet<СуммаРасхода> СуммаРасхода { get; set; }
        public virtual DbSet<СуммаРасходаДляБронейПоРазрешению> СуммаРасходаДляБронейПоРазрешению { get; set; }
        public virtual DbSet<СуммаРасходаДляБронейПоРазрешениюЦо> СуммаРасходаДляБронейПоРазрешениюЦо { get; set; }
        public virtual DbSet<СуммаРасходаЗап> СуммаРасходаЗап { get; set; }
        public virtual DbSet<СуммаРасходаЗапДоп> СуммаРасходаЗапДоп { get; set; }
        public virtual DbSet<СуммаРасходаКомпл> СуммаРасходаКомпл { get; set; }
        public virtual DbSet<СуммаРасходаРегион> СуммаРасходаРегион { get; set; }
        public virtual DbSet<СуммаРеалРозРегион> СуммаРеалРозРегион { get; set; }
        public virtual DbSet<СуммаРеалРозЦо> СуммаРеалРозЦо { get; set; }
        public virtual DbSet<СуммаРеалРозЦоКл> СуммаРеалРозЦоКл { get; set; }
        public virtual DbSet<СуммаРеальногоРасхода> СуммаРеальногоРасхода { get; set; }
        public virtual DbSet<СуммаРеальногоРасхода2> СуммаРеальногоРасхода2 { get; set; }
        public virtual DbSet<СуммаРеальногоРасхода2ПоТовПоставки> СуммаРеальногоРасхода2ПоТовПоставки { get; set; }
        public virtual DbSet<СуммаРеальногоРасхода2Поставки> СуммаРеальногоРасхода2Поставки { get; set; }
        public virtual DbSet<СуммаРеальногоРасхода2Регион> СуммаРеальногоРасхода2Регион { get; set; }
        public virtual DbSet<СуммаРеальногоРасхода2РегионЗаказы> СуммаРеальногоРасхода2РегионЗаказы { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаВсе> СуммаРеальногоРасходаВсе { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаДляОстатков> СуммаРеальногоРасходаДляОстатков { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаДляОстатковВсе> СуммаРеальногоРасходаДляОстатковВсе { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаДляОчередиРегион> СуммаРеальногоРасходаДляОчередиРегион { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаДляТипа> СуммаРеальногоРасходаДляТипа { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаДляТипаГл> СуммаРеальногоРасходаДляТипаГл { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаДляТипаГлЗаказ> СуммаРеальногоРасходаДляТипаГлЗаказ { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаПоЗаявкам> СуммаРеальногоРасходаПоЗаявкам { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаПоЗаявкамРегион> СуммаРеальногоРасходаПоЗаявкамРегион { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаПоСчетам> СуммаРеальногоРасходаПоСчетам { get; set; }
        public virtual DbSet<СуммаРеальногоРасходаРегион> СуммаРеальногоРасходаРегион { get; set; }
        public virtual DbSet<СуммаСчетаРегион> СуммаСчетаРегион { get; set; }
        public virtual DbSet<СчетМаксимальный> СчетМаксимальный { get; set; }
        public virtual DbSet<СчетФактураНаАвансРегион> СчетФактураНаАвансРегион { get; set; }
        public virtual DbSet<СчетаБезДолгаДолРегион> СчетаБезДолгаДолРегион { get; set; }
        public virtual DbSet<СчетаБезДолгаРегион> СчетаБезДолгаРегион { get; set; }
        public virtual DbSet<СчетаБезДолгаРегионСнятьГалочку> СчетаБезДолгаРегионСнятьГалочку { get; set; }
        public virtual DbSet<СчетаДляНакладныхДвойныхРегион> СчетаДляНакладныхДвойныхРегион { get; set; }
        public virtual DbSet<СчетаКлиентыСНеоплаченными> СчетаКлиентыСНеоплаченными { get; set; }
        public virtual DbSet<СчетаКлиентыСНеоплаченнымиРегион> СчетаКлиентыСНеоплаченнымиРегион { get; set; }
        public virtual DbSet<СчетаКлиентыЦо> СчетаКлиентыЦо { get; set; }
        public virtual DbSet<СчетаКлиентыЦоN> СчетаКлиентыЦоN { get; set; }
        public virtual DbSet<СчетаСВыписанСчет> СчетаСВыписанСчет { get; set; }
        public virtual DbSet<СчетаСУслугами> СчетаСУслугами { get; set; }
        public virtual DbSet<СчитанлСканеромСId> СчитанлСканеромСId { get; set; }
        public virtual DbSet<СчитанлСканеромСIdГруп> СчитанлСканеромСIdГруп { get; set; }
        public virtual DbSet<СчитанлСканеромСIdУзмк> СчитанлСканеромСIdУзмк { get; set; }
        public virtual DbSet<СчитанлСканеромСIdУзмкГрупп> СчитанлСканеромСIdУзмкГрупп { get; set; }
        public virtual DbSet<СчитаноГрупп> СчитаноГрупп { get; set; }
        public virtual DbSet<СчитаноГруппУзмк> СчитаноГруппУзмк { get; set; }
        public virtual DbSet<СчитаноСканером> СчитаноСканером { get; set; }
        public virtual DbSet<СчитаноСканеромДляОтгрузки> СчитаноСканеромДляОтгрузки { get; set; }
        public virtual DbSet<СчитаноСканеромДляОтгрузкиУзмк> СчитаноСканеромДляОтгрузкиУзмк { get; set; }
        public virtual DbSet<СчитаноСканеромДляФормы> СчитаноСканеромДляФормы { get; set; }
        public virtual DbSet<СчитаноСканеромДляФормыУзмк> СчитаноСканеромДляФормыУзмк { get; set; }
        public virtual DbSet<СчитаноСканеромДляФормыФилиал> СчитаноСканеромДляФормыФилиал { get; set; }
        public virtual DbSet<СчитаноСканеромРанее> СчитаноСканеромРанее { get; set; }
        public virtual DbSet<СчитаноСканеромРанееУзмк> СчитаноСканеромРанееУзмк { get; set; }
        public virtual DbSet<СчитаноСканеромУзмк> СчитаноСканеромУзмк { get; set; }
        public virtual DbSet<СчитаноСканеромЯчейкиДляОтгрузки> СчитаноСканеромЯчейкиДляОтгрузки { get; set; }
        public virtual DbSet<ТаможняДляСебестоимости> ТаможняДляСебестоимости { get; set; }
        public virtual DbSet<ТемпыРостаДляПрогноза> ТемпыРостаДляПрогноза { get; set; }
        public virtual DbSet<Тендера> Тендера { get; set; }
        public virtual DbSet<ТендераРегионы> ТендераРегионы { get; set; }
        public virtual DbSet<ТехническиеХарактеристики> ТехническиеХарактеристики { get; set; }
        public virtual DbSet<ТехническиеХарактеристикиПоставки> ТехническиеХарактеристикиПоставки { get; set; }
        public virtual DbSet<ТзАвгустРегион> ТзАвгустРегион { get; set; }
        public virtual DbSet<ТзОтгрузкаДилеры> ТзОтгрузкаДилеры { get; set; }
        public virtual DbSet<ТзОтгрузкаПоГруппам> ТзОтгрузкаПоГруппам { get; set; }
        public virtual DbSet<ТзОтгрузкаПоМоделям> ТзОтгрузкаПоМоделям { get; set; }
        public virtual DbSet<ТзОтгрузкаПоМоделямВсе> ТзОтгрузкаПоМоделямВсе { get; set; }
        public virtual DbSet<ТзОтгрузкаПодгруппы> ТзОтгрузкаПодгруппы { get; set; }
        public virtual DbSet<ТзПриходВПутиДоПериодЦо> ТзПриходВПутиДоПериодЦо { get; set; }
        public virtual DbSet<ТзПриходВПутиПериодЦо> ТзПриходВПутиПериодЦо { get; set; }
        public virtual DbSet<ТзПриходПериодЦо> ТзПриходПериодЦо { get; set; }
        public virtual DbSet<ТзРасходПериодЦо> ТзРасходПериодЦо { get; set; }
        public virtual DbSet<ТзРегионВыставкиЦо> ТзРегионВыставкиЦо { get; set; }
        public virtual DbSet<ТзРегионПереводНаВыстЦо> ТзРегионПереводНаВыстЦо { get; set; }
        public virtual DbSet<ТзРегионПереводСВыстЦо> ТзРегионПереводСВыстЦо { get; set; }
        public virtual DbSet<ТзРегионЦо> ТзРегионЦо { get; set; }
        public virtual DbSet<ТзСписаниеМоскваПериодЦо> ТзСписаниеМоскваПериодЦо { get; set; }
        public virtual DbSet<ТзСписаниеПериодЦо> ТзСписаниеПериодЦо { get; set; }
        public virtual DbSet<ТзвыставкиТмп> ТзвыставкиТмп { get; set; }
        public virtual DbSet<ТипыЗаказов> ТипыЗаказов { get; set; }
        public virtual DbSet<ТипыКонтактов> ТипыКонтактов { get; set; }
        public virtual DbSet<ТипыСкладов> ТипыСкладов { get; set; }
        public virtual DbSet<ТоварВЗаказеГруп> ТоварВЗаказеГруп { get; set; }
        public virtual DbSet<ТоварВЗаказеГрупДляОтгр> ТоварВЗаказеГрупДляОтгр { get; set; }
        public virtual DbSet<ТоварВЗаказеПоставки> ТоварВЗаказеПоставки { get; set; }
        public virtual DbSet<ТоварВЗаказеРегион> ТоварВЗаказеРегион { get; set; }
        public virtual DbSet<ТоварВЗаявке> ТоварВЗаявке { get; set; }
        public virtual DbSet<ТоварВСчете> ТоварВСчете { get; set; }
        public virtual DbSet<ТоварДляВозвратаРегион> ТоварДляВозвратаРегион { get; set; }
        public virtual DbSet<ТоварДляКонтроляДинамики> ТоварДляКонтроляДинамики { get; set; }
        public virtual DbSet<ТоварСклад> ТоварСклад { get; set; }
        public virtual DbSet<ТоварныйОтчетВозвратыКомплектыРегион> ТоварныйОтчетВозвратыКомплектыРегион { get; set; }
        public virtual DbSet<ТоварныйОтчетДилерыУслуги11111> ТоварныйОтчетДилерыУслуги11111 { get; set; }
        public virtual DbSet<ТоварныйОтчетКорректа1сРегион> ТоварныйОтчетКорректа1сРегион { get; set; }
        public virtual DbSet<ТоварныйОтчетКорректа1сРегионСос> ТоварныйОтчетКорректа1сРегионСос { get; set; }
        public virtual DbSet<ТоварныйОтчетОплаты1сРегион> ТоварныйОтчетОплаты1сРегион { get; set; }
        public virtual DbSet<ТоварныйОтчетПереводЗапчастиНаУзмк> ТоварныйОтчетПереводЗапчастиНаУзмк { get; set; }
        public virtual DbSet<ТоварныйОтчетПереводСписание> ТоварныйОтчетПереводСписание { get; set; }
        public virtual DbSet<ТоварныйОтчетПереводыПромЕвросейф> ТоварныйОтчетПереводыПромЕвросейф { get; set; }
        public virtual DbSet<ТоварныйОтчетПереводыСосенкиУзловая> ТоварныйОтчетПереводыСосенкиУзловая { get; set; }
        public virtual DbSet<ТоварныйОтчетПереводыУзловаяСосенки> ТоварныйОтчетПереводыУзловаяСосенки { get; set; }
        public virtual DbSet<ТоварныйОтчетПереводыУзмкПромет> ТоварныйОтчетПереводыУзмкПромет { get; set; }
        public virtual DbSet<ТоварныйОтчетПереводыУзмкСпецтехнологии> ТоварныйОтчетПереводыУзмкСпецтехнологии { get; set; }
        public virtual DbSet<ТоварныйОтчетПеремещенияПромТт> ТоварныйОтчетПеремещенияПромТт { get; set; }
        public virtual DbSet<ТоварныйОтчетПеремещенияПромет> ТоварныйОтчетПеремещенияПромет { get; set; }
        public virtual DbSet<ТоварныйОтчетПеремещенияПрометКрым> ТоварныйОтчетПеремещенияПрометКрым { get; set; }
        public virtual DbSet<ТоварныйОтчетПеремещенияСУзмк> ТоварныйОтчетПеремещенияСУзмк { get; set; }
        public virtual DbSet<ТоварныйОтчетПеремещенияТт> ТоварныйОтчетПеремещенияТт { get; set; }
        public virtual DbSet<ТоварныйОтчетПриходВозвратыРегион> ТоварныйОтчетПриходВозвратыРегион { get; set; }
        public virtual DbSet<ТоварныйОтчетПриходВозвратыРегион111> ТоварныйОтчетПриходВозвратыРегион111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасход1сРегион> ТоварныйОтчетРасход1сРегион { get; set; }
        public virtual DbSet<ТоварныйОтчетРасход1сРегион225> ТоварныйОтчетРасход1сРегион225 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасход1сРегион7> ТоварныйОтчетРасход1сРегион7 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасход1сРегионFze> ТоварныйОтчетРасход1сРегионFze { get; set; }
        public virtual DbSet<ТоварныйОтчетРасход1сРегионМосква> ТоварныйОтчетРасход1сРегионМосква { get; set; }
        public virtual DbSet<ТоварныйОтчетРасход1сРегионСос> ТоварныйОтчетРасход1сРегионСос { get; set; }
        public virtual DbSet<ТоварныйОтчетРасход1сРегионЭд> ТоварныйОтчетРасход1сРегионЭд { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходFze> ТоварныйОтчетРасходFze { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходДилеры1111> ТоварныйОтчетРасходДилеры1111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходДилерыБух1111> ТоварныйОтчетРасходДилерыБух1111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходДилерыБухВыставки1111> ТоварныйОтчетРасходДилерыБухВыставки1111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходДилерыБухГл1111> ТоварныйОтчетРасходДилерыБухГл1111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходДилерыЦепь11111> ТоварныйОтчетРасходДилерыЦепь11111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходКомплекты11111> ТоварныйОтчетРасходКомплекты11111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходКомплектыРегион> ТоварныйОтчетРасходКомплектыРегион { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходКомплектыРегионМосква> ТоварныйОтчетРасходКомплектыРегионМосква { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегион> ТоварныйОтчетРасходРегион { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионЕвродвери> ТоварныйОтчетРасходРегионЕвродвери { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионНпо> ТоварныйОтчетРасходРегионНпо { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионНпо111> ТоварныйОтчетРасходРегионНпо111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионНпоFze> ТоварныйОтчетРасходРегионНпоFze { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионНпоСос> ТоварныйОтчетРасходРегионНпоСос { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионНпоСос11111> ТоварныйОтчетРасходРегионНпоСос11111 { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионСос> ТоварныйОтчетРасходРегионСос { get; set; }
        public virtual DbSet<ТоварныйОтчетРасходРегионыЦепь> ТоварныйОтчетРасходРегионыЦепь { get; set; }
        public virtual DbSet<ТоварныйОтчетСписание111111> ТоварныйОтчетСписание111111 { get; set; }
        public virtual DbSet<ТоварыДляLb> ТоварыДляLb { get; set; }
        public virtual DbSet<ТоварыДляLbDveri> ТоварыДляLbDveri { get; set; }
        public virtual DbSet<ТоварыДляLbSl> ТоварыДляLbSl { get; set; }
        public virtual DbSet<ТоварыДляLbSlУзловая> ТоварыДляLbSlУзловая { get; set; }
        public virtual DbSet<ТоварыДляLbСим> ТоварыДляLbСим { get; set; }
        public virtual DbSet<ТоварыДляГлСклада> ТоварыДляГлСклада { get; set; }
        public virtual DbSet<ТоварыДляРаспискиКнРегион> ТоварыДляРаспискиКнРегион { get; set; }
        public virtual DbSet<ТоварыДляРаспискиПоОплРегион> ТоварыДляРаспискиПоОплРегион { get; set; }
        public virtual DbSet<ТоварыДляРаспискиРегион> ТоварыДляРаспискиРегион { get; set; }
        public virtual DbSet<ТоварыДляРаспискиТмп> ТоварыДляРаспискиТмп { get; set; }
        public virtual DbSet<ТоварыДляРаспискиТмпРегион> ТоварыДляРаспискиТмпРегион { get; set; }
        public virtual DbSet<ТоварыДляТтнДляСетей> ТоварыДляТтнДляСетей { get; set; }
        public virtual DbSet<ТоварыДляТтнДляСетей1111> ТоварыДляТтнДляСетей1111 { get; set; }
        public virtual DbSet<Торг12ДляСетейТтн> Торг12ДляСетейТтн { get; set; }
        public virtual DbSet<ТтнДилеры> ТтнДилеры { get; set; }
        public virtual DbSet<УвеличениеПоСкладамГрПодгр> УвеличениеПоСкладамГрПодгр { get; set; }
        public virtual DbSet<УвеличениеЦеныПоСкладам> УвеличениеЦеныПоСкладам { get; set; }
        public virtual DbSet<УвеличениеЦеныПоСкладамГр> УвеличениеЦеныПоСкладамГр { get; set; }
        public virtual DbSet<УвеличениеЦеныПоСкладамПодгр> УвеличениеЦеныПоСкладамПодгр { get; set; }
        public virtual DbSet<УпдТт> УпдТт { get; set; }
        public virtual DbSet<УсловияПоставки> УсловияПоставки { get; set; }
        public virtual DbSet<УчестьБрониПланаВСкладе> УчестьБрониПланаВСкладе { get; set; }
        public virtual DbSet<УчестьБрониПланаДляПланаПоставок> УчестьБрониПланаДляПланаПоставок { get; set; }
        public virtual DbSet<УчестьБрониПланаДляПланаПоставокТула> УчестьБрониПланаДляПланаПоставокТула { get; set; }
        public virtual DbSet<ФилиалМенеджер> ФилиалМенеджер { get; set; }
        public virtual DbSet<ФинпланПравилоЗатраты> ФинпланПравилоЗатраты { get; set; }
        public virtual DbSet<ФирмаНов> ФирмаНов { get; set; }
        public virtual DbSet<ФирмаНовРегион> ФирмаНовРегион { get; set; }
        public virtual DbSet<Хранилище> Хранилище { get; set; }
        public virtual DbSet<ХранилищеBg> ХранилищеBg { get; set; }
        public virtual DbSet<ХранилищеАстана> ХранилищеАстана { get; set; }
        public virtual DbSet<ХранилищеВсе> ХранилищеВсе { get; set; }
        public virtual DbSet<ХранилищеВсеBg> ХранилищеВсеBg { get; set; }
        public virtual DbSet<ХранилищеВсеАстана> ХранилищеВсеАстана { get; set; }
        public virtual DbSet<ХранилищеВсеУзмк> ХранилищеВсеУзмк { get; set; }
        public virtual DbSet<ХранилищеДвижение> ХранилищеДвижение { get; set; }
        public virtual DbSet<ХранилищеДвижениеBg> ХранилищеДвижениеBg { get; set; }
        public virtual DbSet<ХранилищеДвижениеАстана> ХранилищеДвижениеАстана { get; set; }
        public virtual DbSet<ХранилищеДвижениеУзмк> ХранилищеДвижениеУзмк { get; set; }
        public virtual DbSet<ХранилищеИсторияПеремещенийУзмк> ХранилищеИсторияПеремещенийУзмк { get; set; }
        public virtual DbSet<ХранилищеУзмк> ХранилищеУзмк { get; set; }
        public virtual DbSet<ЦенаЕвросейф> ЦенаЕвросейф { get; set; }
        public virtual DbSet<ЦенаИмпорт> ЦенаИмпорт { get; set; }
        public virtual DbSet<ЦенаКомплекта> ЦенаКомплекта { get; set; }
        public virtual DbSet<ЦенаКомплектаПредварительная> ЦенаКомплектаПредварительная { get; set; }
        public virtual DbSet<ЦеныДляВнутреннегоИспользования> ЦеныДляВнутреннегоИспользования { get; set; }
        public virtual DbSet<ЦеныДляРегионов> ЦеныДляРегионов { get; set; }
        public virtual DbSet<ЦеныДляРегионовДвери> ЦеныДляРегионовДвери { get; set; }
        public virtual DbSet<ЦеныДляТулметцентраПоОстаткамСм> ЦеныДляТулметцентраПоОстаткамСм { get; set; }
        public virtual DbSet<ЦеныЗмк> ЦеныЗмк { get; set; }
        public virtual DbSet<ЦеныПоДилерам> ЦеныПоДилерам { get; set; }
        public virtual DbSet<ЦеныПоДилерамНовРегион> ЦеныПоДилерамНовРегион { get; set; }
        public virtual DbSet<ЦеныПоДилерамРегион> ЦеныПоДилерамРегион { get; set; }
        public virtual DbSet<ЦеныПоКлиентам> ЦеныПоКлиентам { get; set; }
        public virtual DbSet<ЦпTmp> ЦпTmp { get; set; }
        public virtual DbSet<ЦпДляDib> ЦпДляDib { get; set; }
        public virtual DbSet<ЧастиОплаченыГруппКвРегион> ЧастиОплаченыГруппКвРегион { get; set; }
        public virtual DbSet<ЧастиОтгруженыГруппКвРегион> ЧастиОтгруженыГруппКвРегион { get; set; }
        public virtual DbSet<ЧастиТмп> ЧастиТмп { get; set; }
        public virtual DbSet<ЮрлицаИнн> ЮрлицаИнн { get; set; }
        public virtual DbSet<ЮрлицаИннВсе> ЮрлицаИннВсе { get; set; }
        public virtual DbSet<ЮрлицаИннГрупп> ЮрлицаИннГрупп { get; set; }
        public virtual DbSet<ЮрлицаИннРегион> ЮрлицаИннРегион { get; set; }
        public virtual DbSet<ЮрлицаОбъединенные> ЮрлицаОбъединенные { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=prosrvna.prometad.ru;Initial Catalog=DATA;Persist Security Info=True;User ID=datasa;Password=KoSt55RoMa;Connection Timeout=0");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ArtArticDКа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ART_ARTIC_d_ка");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Def).HasColumnName("DEF");

                entity.Property(e => e.Det)
                    .HasColumnName("DET")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DopCod)
                    .HasColumnName("DOP_COD")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Idizgot).HasColumnName("IDIZGOT");

                entity.Property(e => e.Idrec)
                    .HasColumnName("IDREC")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Nam)
                    .HasColumnName("NAM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Арт)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AskПолкиКартотекиKaidzen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ask-полки-картотеки_kaidzen");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_ask-полки-картотеки_kaidzen")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kaidzen)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Группа).HasMaxLength(100);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.ПроцентНефил).HasColumnName("Процент_нефил");

                entity.Property(e => e.ПроцентРоз).HasColumnName("Процент_роз");

                entity.Property(e => e.ПроцентФил)
                    .HasColumnName("Процент_фил")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<AspnetApplications>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_Applications");

                entity.HasIndex(e => e.ApplicationName)
                    .HasName("IX_aspnet_Applications")
                    .IsUnique();

                entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetMembership>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_Membership");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_aspnet_Membership")
                    .IsUnique();

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredEmail).HasMaxLength(256);

                entity.Property(e => e.MobilePin)
                    .HasColumnName("MobilePIN")
                    .HasMaxLength(16);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);

                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);

                entity.Property(e => e.PasswordSalt)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AspnetPaths>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_Paths");

                entity.HasIndex(e => e.PathId)
                    .HasName("IX_aspnet_Paths")
                    .IsUnique();

                entity.Property(e => e.LoweredPath)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<AspnetPersonalizationAllusers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_PersonalizationALLUsers");

                entity.HasIndex(e => e.PathId)
                    .HasName("IX_aspnet_PersonalizationALLUsers")
                    .IsUnique();

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");
            });

            modelBuilder.Entity<AspnetPersonalizationPerUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_PersonalizationPerUser");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_aspnet_PersonalizationPerUser")
                    .IsUnique();

                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PageSettings)
                    .IsRequired()
                    .HasColumnType("image");
            });

            modelBuilder.Entity<AspnetProfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_Profile");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_aspnet_Profile")
                    .IsUnique();

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.PropertyNames)
                    .IsRequired()
                    .HasColumnType("ntext");

                entity.Property(e => e.PropertyValuesBinary)
                    .IsRequired()
                    .HasColumnType("image");

                entity.Property(e => e.PropertyValuesString)
                    .IsRequired()
                    .HasColumnType("ntext");
            });

            modelBuilder.Entity<AspnetRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_Roles");

                entity.HasIndex(e => e.RoleId)
                    .HasName("IX_aspnet_Roles")
                    .IsUnique();

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredRoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetSchemaVersions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_SchemaVersions");

                entity.HasIndex(e => new { e.Feature, e.CompatibleSchemaVersion })
                    .HasName("IX_aspnet_SchemVersions")
                    .IsUnique();

                entity.Property(e => e.CompatibleSchemaVersion)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.Feature)
                    .IsRequired()
                    .HasMaxLength(128);
            });

            modelBuilder.Entity<AspnetUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_Users");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_aspnet_Users")
                    .IsUnique();

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredUserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.MobileAlias).HasMaxLength(16);

                entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<AspnetUsersInRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_UsersInRoles");

                entity.HasIndex(e => new { e.UserId, e.RoleId })
                    .HasName("IX_aspnet_UsersInRoles")
                    .IsUnique();
            });

            modelBuilder.Entity<AspnetWebEventEvents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("aspnet_WebEvent_Events");

                entity.HasIndex(e => e.EventId)
                    .HasName("IX_aspnet_WebEvent")
                    .IsUnique();

                entity.Property(e => e.ApplicationPath).HasMaxLength(256);

                entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);

                entity.Property(e => e.Details).HasColumnType("ntext");

                entity.Property(e => e.EventId)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");

                entity.Property(e => e.EventTime).HasColumnType("datetime");

                entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");

                entity.Property(e => e.EventType)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.ExceptionType).HasMaxLength(256);

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Message).HasMaxLength(1024);

                entity.Property(e => e.RequestUrl).HasMaxLength(1024);
            });

            modelBuilder.Entity<AsupКолВУпаковке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ASUP_кол_в_упаковке");

                entity.Property(e => e.ArticulTo)
                    .IsRequired()
                    .HasColumnName("ARTICUL_TO")
                    .HasMaxLength(50);

                entity.Property(e => e.KolUp)
                    .HasColumnName("KOL_UP")
                    .HasColumnType("decimal(4, 0)");
            });

            modelBuilder.Entity<AuditCloseDays>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("Audit_CloseDays", "DATASA");

                entity.Property(e => e.RecId).HasColumnName("RecID");

                entity.Property(e => e.D2).HasColumnType("date");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.User).HasMaxLength(50);
            });

            modelBuilder.Entity<AuditSklad>(entity =>
            {
                entity.ToTable("Audit_Sklad", "DATASA");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.Count).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Gtd)
                    .HasColumnName("GTD")
                    .HasMaxLength(50);

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.Nakl).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Sf)
                    .HasColumnName("SF")
                    .HasMaxLength(50);

                entity.Property(e => e.SkladId).HasColumnName("SkladID");

                entity.Property(e => e.Summa).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasDefaultValueSql("((-1))");
            });

            modelBuilder.Entity<BiometricData>(entity =>
            {
                entity.HasKey(e => e.IdRec)
                    .HasName("PK__Biometri__2A4A4C144B7E4754");

                entity.HasComment("Таблица биометрических данных сотрудников");

                entity.HasIndex(e => new { e.IdRec, e.TabNumber })
                    .HasName("Index_BiometricData_TabNbr");

                entity.Property(e => e.IdRec).HasComment("Счетчик");

                entity.Property(e => e.Created)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Дата создания снимка");

                entity.Property(e => e.TabNumber).HasComment("Табельный номер сотрудника");

                entity.Property(e => e.VeinData)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasComment("Снимок вен в двоичном виде");
            });

            modelBuilder.Entity<BuxgKorReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG_kor_reg");

                entity.HasIndex(e => new { e.UserId, e.Артикул, e.Количество, e.СуммаСНдс, e.Префикс, e.Номер, e.Регион, e.СуммаБезНалога })
                    .HasName("IX_BUXG_kor_reg")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(10);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаКорректы)
                    .HasColumnName("Дата корректы")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(250)
                    .IsFixedLength();

                entity.Property(e => e.Код).HasMaxLength(50);

                entity.Property(e => e.Менеджер).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Поставщик)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<BuxgMen>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG_men");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Группа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Код)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода1)
                    .HasColumnName("Код_города_1")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодСклада).HasColumnName("Код склада");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерПорядковый1).HasColumnName("Номер_порядковый");

                entity.Property(e => e.НомерСо)
                    .HasColumnName("Номер СО")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.НомерСф).HasColumnName("Номер сф");

                entity.Property(e => e.Поставщик)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Склад)
                    .HasMaxLength(70)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<BuxgOpl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG_opl");

                entity.HasIndex(e => new { e.RecordId, e.UserId })
                    .HasName("IX_BUXG_opl")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SumСуммаОплатыR).HasColumnName("Sum_Сумма оплаты R");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.СуммаОплатыR).HasColumnName("Сумма оплаты R");
            });

            modelBuilder.Entity<BuxgQbРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG-QB регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Артикул)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Группа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Код)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода1)
                    .HasColumnName("Код_города_1")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодСклада).HasColumnName("Код склада");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерПорядковый1).HasColumnName("Номер_порядковый");

                entity.Property(e => e.НомерСо)
                    .HasColumnName("Номер СО")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.НомерСф).HasColumnName("Номер сф");

                entity.Property(e => e.Поставщик)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Склад)
                    .HasMaxLength(70)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<BuxgReg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG_reg");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Klr).HasColumnName("KLR");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(10);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(250)
                    .IsFixedLength();

                entity.Property(e => e.ИныеУсловия)
                    .HasColumnName("Иные_условия")
                    .HasMaxLength(255);

                entity.Property(e => e.Код).HasMaxLength(50);

                entity.Property(e => e.КодГр).HasColumnName("Код_гр");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(255);

                entity.Property(e => e.Менеджер).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.ОснованиеУпд)
                    .HasColumnName("Основание_УПД")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Скл).HasColumnName("скл");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<BuxgSfРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG_sf регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Артикул)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Группа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Код)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода1)
                    .HasColumnName("Код_города_1")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодСклада).HasColumnName("Код склада");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерПорядковый1).HasColumnName("Номер_порядковый");

                entity.Property(e => e.НомерСо)
                    .HasColumnName("Номер СО")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.НомерСф).HasColumnName("Номер сф");

                entity.Property(e => e.Поставщик)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Склад)
                    .HasMaxLength(70)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<BuxgSoРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG_so регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Артикул)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Группа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Код)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодСклада).HasColumnName("Код склада");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомерСо)
                    .HasColumnName("Номер СО")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Поставщик)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Склад)
                    .HasMaxLength(70)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<BuxgРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BUXG регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.Вес).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор).HasMaxLength(20);

                entity.Property(e => e.Код).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода1)
                    .HasColumnName("Код_города_1")
                    .HasMaxLength(50);

                entity.Property(e => e.КодСклада).HasColumnName("Код склада");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерПорядковый1).HasColumnName("Номер_порядковый");

                entity.Property(e => e.НомерСо)
                    .HasColumnName("Номер СО")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерСф).HasColumnName("Номер сф");

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.Склад).HasMaxLength(100);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.СуммаБезНалога)
                    .HasColumnName("Сумма без налога")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаСНдс)
                    .HasColumnName("Сумма с НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<CashFlowTempKonvMes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_konv_mes");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_konv_mes")
                    .IsUnique();

                entity.Property(e => e.BlgU)
                    .HasColumnName("BLG_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgК)
                    .HasColumnName("BLG_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibU)
                    .HasColumnName("DIB_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibК)
                    .HasColumnName("DIB_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeU)
                    .HasColumnName("OAE_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeК)
                    .HasColumnName("OAE_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Вал).HasMaxLength(5);

                entity.Property(e => e.ГрмU)
                    .HasColumnName("ГРМ_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмК)
                    .HasColumnName("ГРМ_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкU)
                    .HasColumnName("ЗМК_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкК)
                    .HasColumnName("ЗМК_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхU)
                    .HasColumnName("КЗХ_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхК)
                    .HasColumnName("КЗХ_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайU)
                    .HasColumnName("КИТАЙ_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайК)
                    .HasColumnName("КИТАЙ_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.ОбU)
                    .HasColumnName("ОБ_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбК)
                    .HasColumnName("ОБ_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимU)
                    .HasColumnName("СИМ_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимК)
                    .HasColumnName("СИМ_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсU)
                    .HasColumnName("СИМ_УС_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсК)
                    .HasColumnName("СИМ_УС_к")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоU)
                    .HasColumnName("ТПО_u")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоК)
                    .HasColumnName("ТПО_к")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempMes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_mes");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_mes")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempMesDet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_mes_det");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_mes_det")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgВо)
                    .HasColumnName("BLG_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibВо)
                    .HasColumnName("DIB_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeВо)
                    .HasColumnName("OAE_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяВо)
                    .HasColumnName("Валовая_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмВо)
                    .HasColumnName("ГРМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкВо)
                    .HasColumnName("ЗМК_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхВо)
                    .HasColumnName("КЗХ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайВо)
                    .HasColumnName("КИТАЙ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.КодСтатьи)
                    .HasColumnName("Код статьи")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбВо)
                    .HasColumnName("ОБ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимВо)
                    .HasColumnName("СИМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсВо)
                    .HasColumnName("СИМ_УС_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоВо)
                    .HasColumnName("ТПО_во")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValKorMes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_kor_mes");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_kor_mes")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРуБндс)
                    .HasColumnName("BLG_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРуБндс)
                    .HasColumnName("DIB_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРуБндс)
                    .HasColumnName("OAE_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРуБндс)
                    .HasColumnName("Валовая_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРу)
                    .HasColumnName("ГРМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРуБндс)
                    .HasColumnName("ГРМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРуБндс)
                    .HasColumnName("ЗМК_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРу)
                    .HasColumnName("КЗХ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРуБндс)
                    .HasColumnName("КЗХ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРу)
                    .HasColumnName("КИТАЙ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРуБндс)
                    .HasColumnName("КИТАЙ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРуБндс)
                    .HasColumnName("ОБ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРуБндс)
                    .HasColumnName("СИМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРу)
                    .HasColumnName("СИМ_УС_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРуБндс)
                    .HasColumnName("СИМ_УС_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРуБндс)
                    .HasColumnName("ТПО_ру_бндс")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValKorMesDet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_kor_mes_det");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_kor_mes_det")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgВо)
                    .HasColumnName("BLG_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРуБндс)
                    .HasColumnName("BLG_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibВо)
                    .HasColumnName("DIB_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРуБндс)
                    .HasColumnName("DIB_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeВо)
                    .HasColumnName("OAE_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРуБндс)
                    .HasColumnName("OAE_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяВо)
                    .HasColumnName("Валовая_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРуБндс)
                    .HasColumnName("Валовая_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмВо)
                    .HasColumnName("ГРМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРу)
                    .HasColumnName("ГРМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРуБндс)
                    .HasColumnName("ГРМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкВо)
                    .HasColumnName("ЗМК_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРуБндс)
                    .HasColumnName("ЗМК_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхВо)
                    .HasColumnName("КЗХ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРу)
                    .HasColumnName("КЗХ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРуБндс)
                    .HasColumnName("КЗХ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайВо)
                    .HasColumnName("КИТАЙ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРу)
                    .HasColumnName("КИТАЙ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРуБндс)
                    .HasColumnName("КИТАЙ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.КодСтатьи)
                    .HasColumnName("Код статьи")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбВо)
                    .HasColumnName("ОБ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРуБндс)
                    .HasColumnName("ОБ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимВо)
                    .HasColumnName("СИМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРуБндс)
                    .HasColumnName("СИМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсВо)
                    .HasColumnName("СИМ_УС_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРу)
                    .HasColumnName("СИМ_УС_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРуБндс)
                    .HasColumnName("СИМ_УС_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоВо)
                    .HasColumnName("ТПО_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРуБндс)
                    .HasColumnName("ТПО_ру_бндс")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValMes>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_mes");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_mes")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРуБндс)
                    .HasColumnName("BLG_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРуБндс)
                    .HasColumnName("DIB_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРуБндс)
                    .HasColumnName("OAE_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРуБндс)
                    .HasColumnName("Валовая_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРу)
                    .HasColumnName("ГРМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРуБндс)
                    .HasColumnName("ГРМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРуБндс)
                    .HasColumnName("ЗМК_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРу)
                    .HasColumnName("КЗХ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРуБндс)
                    .HasColumnName("КЗХ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРу)
                    .HasColumnName("КИТАЙ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРуБндс)
                    .HasColumnName("КИТАЙ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРуБндс)
                    .HasColumnName("ОБ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРуБндс)
                    .HasColumnName("СИМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРу)
                    .HasColumnName("СИМ_УС_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРуБндс)
                    .HasColumnName("СИМ_УС_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРуБндс)
                    .HasColumnName("ТПО_ру_бндс")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValMesBlg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_mes_BLG");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_mes_BLG")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValMesDet>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_mes_det");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_mes_det")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgВо)
                    .HasColumnName("BLG_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРуБндс)
                    .HasColumnName("BLG_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibВо)
                    .HasColumnName("DIB_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРуБндс)
                    .HasColumnName("DIB_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeВо)
                    .HasColumnName("OAE_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРуБндс)
                    .HasColumnName("OAE_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяВо)
                    .HasColumnName("Валовая_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРуБндс)
                    .HasColumnName("Валовая_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмВо)
                    .HasColumnName("ГРМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРу)
                    .HasColumnName("ГРМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРуБндс)
                    .HasColumnName("ГРМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкВо)
                    .HasColumnName("ЗМК_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРуБндс)
                    .HasColumnName("ЗМК_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхВо)
                    .HasColumnName("КЗХ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРу)
                    .HasColumnName("КЗХ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРуБндс)
                    .HasColumnName("КЗХ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайВо)
                    .HasColumnName("КИТАЙ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРу)
                    .HasColumnName("КИТАЙ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРуБндс)
                    .HasColumnName("КИТАЙ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.КодСтатьи)
                    .HasColumnName("Код статьи")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбВо)
                    .HasColumnName("ОБ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРуБндс)
                    .HasColumnName("ОБ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимВо)
                    .HasColumnName("СИМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРуБндс)
                    .HasColumnName("СИМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсВо)
                    .HasColumnName("СИМ_УС_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРу)
                    .HasColumnName("СИМ_УС_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРуБндс)
                    .HasColumnName("СИМ_УС_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоВо)
                    .HasColumnName("ТПО_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРуБндс)
                    .HasColumnName("ТПО_ру_бндс")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValMesDetBlg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_mes_det_BLG");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_mes_det_BLG")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.КодСтатьи)
                    .HasColumnName("Код статьи")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValMesDetPr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_mes_det_pr");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_mes_det_pr")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgВо)
                    .HasColumnName("BLG_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРуБндс)
                    .HasColumnName("BLG_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibВо)
                    .HasColumnName("DIB_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРуБндс)
                    .HasColumnName("DIB_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdПодразд).HasColumnName("ID подразд");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeВо)
                    .HasColumnName("OAE_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРуБндс)
                    .HasColumnName("OAE_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяВо)
                    .HasColumnName("Валовая_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРуБндс)
                    .HasColumnName("Валовая_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмВо)
                    .HasColumnName("ГРМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРу)
                    .HasColumnName("ГРМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРуБндс)
                    .HasColumnName("ГРМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкВо)
                    .HasColumnName("ЗМК_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРуБндс)
                    .HasColumnName("ЗМК_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхВо)
                    .HasColumnName("КЗХ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРу)
                    .HasColumnName("КЗХ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРуБндс)
                    .HasColumnName("КЗХ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайВо)
                    .HasColumnName("КИТАЙ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРу)
                    .HasColumnName("КИТАЙ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРуБндс)
                    .HasColumnName("КИТАЙ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.КодСтатьи)
                    .HasColumnName("Код статьи")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбВо)
                    .HasColumnName("ОБ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРуБндс)
                    .HasColumnName("ОБ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимВо)
                    .HasColumnName("СИМ_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРуБндс)
                    .HasColumnName("СИМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсВо)
                    .HasColumnName("СИМ_УС_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРу)
                    .HasColumnName("СИМ_УС_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРуБндс)
                    .HasColumnName("СИМ_УС_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоВо)
                    .HasColumnName("ТПО_во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРуБндс)
                    .HasColumnName("ТПО_ру_бндс")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowTempValMesPr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow temp_val_mes_pr");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Cash Flow temp_val_mes_pr")
                    .IsUnique();

                entity.Property(e => e.Blg)
                    .HasColumnName("BLG")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРу)
                    .HasColumnName("BLG_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.BlgРуБндс)
                    .HasColumnName("BLG_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Dib)
                    .HasColumnName("DIB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРу)
                    .HasColumnName("DIB_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.DibРуБндс)
                    .HasColumnName("DIB_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdПодразд).HasColumnName("ID подразд");

                entity.Property(e => e.Oae)
                    .HasColumnName("OAE")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРу)
                    .HasColumnName("OAE_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.OaeРуБндс)
                    .HasColumnName("OAE_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Priz).HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Блок).HasMaxLength(150);

                entity.Property(e => e.Валовая).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРу)
                    .HasColumnName("Валовая_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВаловаяРуБндс)
                    .HasColumnName("Валовая_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Грм)
                    .HasColumnName("ГРМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРу)
                    .HasColumnName("ГРМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ГрмРуБндс)
                    .HasColumnName("ГРМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Змк)
                    .HasColumnName("ЗМК")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРу)
                    .HasColumnName("ЗМК_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗмкРуБндс)
                    .HasColumnName("ЗМК_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кзх)
                    .HasColumnName("КЗХ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРу)
                    .HasColumnName("КЗХ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КзхРуБндс)
                    .HasColumnName("КЗХ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Китай)
                    .HasColumnName("КИТАЙ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРу)
                    .HasColumnName("КИТАЙ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КитайРуБндс)
                    .HasColumnName("КИТАЙ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Код).HasMaxLength(15);

                entity.Property(e => e.Об)
                    .HasColumnName("ОБ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРу)
                    .HasColumnName("ОБ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбРуБндс)
                    .HasColumnName("ОБ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.Сим)
                    .HasColumnName("СИМ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРу)
                    .HasColumnName("СИМ_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимРуБндс)
                    .HasColumnName("СИМ_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУс)
                    .HasColumnName("СИМ_УС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРу)
                    .HasColumnName("СИМ_УС_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СимУсРуБндс)
                    .HasColumnName("СИМ_УС_ру_бндс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Слаг).HasMaxLength(15);

                entity.Property(e => e.Статья).HasMaxLength(150);

                entity.Property(e => e.Тпо)
                    .HasColumnName("ТПО")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРу)
                    .HasColumnName("ТПО_ру")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТпоРуБндс)
                    .HasColumnName("ТПО_ру_бндс")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowОстатки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow остатки");

                entity.HasIndex(e => new { e.Год, e.Месяц })
                    .HasName("IX_Cash Flow остатки")
                    .IsUnique();

                entity.Property(e => e.Остаток).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<CashFlowОстаткиДеньгиВПути>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cash Flow остатки деньги в пути");

                entity.HasIndex(e => new { e.Год, e.Месяц })
                    .HasName("IX_Cash")
                    .IsUnique();

                entity.Property(e => e.Остаток)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<CatCatgr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.catgr");

                entity.HasIndex(e => e.Articul)
                    .HasName("IX_Cat.catgr")
                    .IsUnique();

                entity.Property(e => e.Articul)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Idcat)
                    .HasColumnName("IDcat")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Iddet).HasColumnName("IDdet");

                entity.Property(e => e.Idsubcat).HasColumnName("IDsubcat");

                entity.Property(e => e.Lit)
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CatCatid>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.catid");

                entity.HasIndex(e => e.Idcat)
                    .HasName("IX_Cat.catid")
                    .IsUnique();

                entity.Property(e => e.Idcat).HasColumnName("IDcat");

                entity.Property(e => e.Lit)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.LustArticul).HasDefaultValueSql("(0)");

                entity.Property(e => e.Nam)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Root)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UserUr).HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<CatCatЗ>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.CatЗ");

                entity.HasIndex(e => e.Iddet)
                    .HasName("IX_Cat.CatZ")
                    .IsUnique();

                entity.Property(e => e.Articul)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Bai)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DataIzm).HasColumnType("datetime");

                entity.Property(e => e.Dostup)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Iddet).HasColumnName("IDDet");

                entity.Property(e => e.Idmain).HasColumnName("IDMain");

                entity.Property(e => e.Lider)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Nam)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CatCatб>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.catб");

                entity.HasIndex(e => e.Iddet)
                    .HasName("IX_Cat.catб")
                    .IsUnique();

                entity.Property(e => e.Articul)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Bai)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Cpu)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.DataIzm).HasColumnType("datetime");

                entity.Property(e => e.Dostup)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Ext)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Iddet).HasColumnName("IDdet");

                entity.Property(e => e.LaterUp)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Nam)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CatCatм>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.Catм");

                entity.HasIndex(e => e.Iddet)
                    .HasName("IX_Cat.Catм")
                    .IsUnique();

                entity.Property(e => e.Articul)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Bai)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DataIzm).HasColumnType("datetime");

                entity.Property(e => e.Dostup)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(6)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'кг')");

                entity.Property(e => e.Iddet).HasColumnName("IDdet");

                entity.Property(e => e.Nam)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CatMash>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.Mash");

                entity.HasIndex(e => e.Idmash)
                    .HasName("IX_Cat.Mash")
                    .IsUnique();

                entity.Property(e => e.Bai)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DataIzm).HasColumnType("datetime");

                entity.Property(e => e.Datavv).HasColumnType("datetime");

                entity.Property(e => e.Datavyv).HasColumnType("datetime");

                entity.Property(e => e.Idizgot)
                    .HasColumnName("IDIzgot")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Idmash).HasColumnName("IDmash");

                entity.Property(e => e.Idob)
                    .HasColumnName("IDob")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Nam)
                    .HasMaxLength(60)
                    .IsFixedLength();

                entity.Property(e => e.Price).HasColumnType("numeric(18, 0)");

                entity.Property(e => e.Prim).HasMaxLength(150);

                entity.Property(e => e.ZavNom)
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CatMashObj>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.MashObj");

                entity.HasIndex(e => e.Idobj)
                    .HasName("IX_Cat.MashObj")
                    .IsUnique();

                entity.Property(e => e.Datavv).HasColumnType("datetime");

                entity.Property(e => e.Datavyv).HasColumnType("datetime");

                entity.Property(e => e.Ideq).HasColumnName("IDEq");

                entity.Property(e => e.Idizgot)
                    .HasColumnName("IDIzgot")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdmainIzgot).HasColumnName("IDMainIzgot");

                entity.Property(e => e.Idobj).HasColumnName("IDObj");

                entity.Property(e => e.Inv).HasDefaultValueSql("(0)");

                entity.Property(e => e.Nam)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Resurs).HasDefaultValueSql("(5)");

                entity.Property(e => e.Status).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<CatPar>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.Par");

                entity.HasIndex(e => e.Idpar)
                    .HasName("IX_Cat.Par")
                    .IsUnique();

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Idpar).HasColumnName("IDpar");

                entity.Property(e => e.Nam)
                    .HasMaxLength(60)
                    .IsFixedLength();
            });

            modelBuilder.Entity<CatParMash>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Cat.ParMash");

                entity.HasIndex(e => new { e.Idmash, e.Idpar })
                    .HasName("IX_Cat.ParMash")
                    .IsUnique();

                entity.Property(e => e.Idmash).HasColumnName("IDMash");

                entity.Property(e => e.Idpar).HasColumnName("IDPar");

                entity.Property(e => e.ValPar).HasColumnType("numeric(18, 6)");
            });

            modelBuilder.Entity<CodId>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CodID");

                entity.HasIndex(e => e.TableName)
                    .HasName("IX_CodID")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CrmОперацииПоДилерам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CRM-операции по дилерам");

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.Expr4)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилКонтакт)
                    .HasColumnName("Дил_контакт")
                    .HasMaxLength(255);

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Менеджер)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Название).HasMaxLength(15);

                entity.Property(e => e.Накладная)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.РуководительДляСервиса)
                    .HasColumnName("Руководитель для сервиса")
                    .HasMaxLength(100);

                entity.Property(e => e.Телефон2).HasMaxLength(25);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТелефоныДляСервиса)
                    .HasColumnName("Телефоны для сервиса")
                    .HasMaxLength(100);

                entity.Property(e => e.ЮлКонтакт)
                    .HasColumnName("Юл_контакт")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CrmОперацииПоКлиентам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CRM-операции по клиентам");

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.Expr2).HasMaxLength(294);

                entity.Property(e => e.Expr3).HasMaxLength(511);

                entity.Property(e => e.Expr4)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес).HasMaxLength(188);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолВоСчетов).HasColumnName("Кол-во счетов");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Менеджер)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Накладная)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.РуководительДляСервиса)
                    .HasColumnName("Руководитель для сервиса")
                    .HasMaxLength(100);

                entity.Property(e => e.Телефоны).HasMaxLength(50);

                entity.Property(e => e.ТелефоныДляСервиса)
                    .HasColumnName("Телефоны для сервиса")
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<CurrentVersionDb>(entity =>
            {
                entity.HasKey(e => e.AppId);

                entity.ToTable("CurrentVersionDB");

                entity.Property(e => e.AppId)
                    .HasColumnName("AppID")
                    .HasMaxLength(50);

                entity.Property(e => e.Version)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeliveryTerms>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("DELIVERY TERMS");

                entity.HasIndex(e => e.Kod)
                    .HasName("IX_DELIVERY TERMS")
                    .IsUnique();

                entity.Property(e => e.DeliveryTerm)
                    .IsRequired()
                    .HasColumnName("DELIVERY TERM")
                    .HasMaxLength(50);

                entity.Property(e => e.IdDeliveryTerm)
                    .HasColumnName("ID DELIVERY TERM")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Kod).HasColumnName("KOD");
            });

            modelBuilder.Entity<DlaPlanaTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("dla_plana_tmp");

                entity.Property(e => e.IdДилераЦо).HasColumnName("ID дилера ЦО");

                entity.Property(e => e.ДатаОплатыПоПлану)
                    .HasColumnName("Дата оплаты по плану")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Дилер)
                    .HasColumnName("дилер")
                    .HasMaxLength(50);

                entity.Property(e => e.ДолгПоСчетуРуб).HasColumnName("Долг по счету руб");

                entity.Property(e => e.Клиент).HasMaxLength(150);

                entity.Property(e => e.КолДнейДоОплаты).HasColumnName("Кол дней до оплаты");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СрокОплаты).HasColumnName("Срок оплаты");

                entity.Property(e => e.Фамилия).HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(150);
            });

            modelBuilder.Entity<EcbsПоставщики>(entity =>
            {
                entity.HasKey(e => new { e.IdТовара, e.IdПоставщика });

                entity.ToTable("ECBS поставщики");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ErpДоступы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ERP-доступы");

                entity.HasIndex(e => new { e.IdРаботничка, e.Приложение })
                    .HasName("IX_ERP-доступы")
                    .IsUnique();

                entity.Property(e => e.Arm).HasColumnName("ARM");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.Приложение).HasMaxLength(50);
            });

            modelBuilder.Entity<FilДебиторскаяЗадолженностьНом>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Fil_Дебиторская задолженность_ном");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Fil_Дебиторская задолженность_ном111")
                    .IsUnique();

                entity.HasIndex(e => e.Userid)
                    .HasName("IX_Fil_Дебиторская задолженность_ном111_1");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdДилераЦо).HasColumnName("ID дилера ЦО");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.KolMes).HasColumnName("kol_mes");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SumСумма)
                    .HasColumnName("Sum-Сумма")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SumСуммаРуб)
                    .HasColumnName("Sum-Сумма_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.Канал).HasMaxLength(7);

                entity.Property(e => e.Категория).HasMaxLength(15);

                entity.Property(e => e.Мтк)
                    .HasColumnName("МТК")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Оплата12)
                    .HasColumnName("Оплата_12")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Оплата3)
                    .HasColumnName("Оплата_3")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Отдел).HasMaxLength(20);

                entity.Property(e => e.Отсрочка).HasDefaultValueSql("((0))");

                entity.Property(e => e.ОтсрочкаКарточка)
                    .HasColumnName("Отсрочка_карточка")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ОтсрочкаПродленная)
                    .HasColumnName("Отсрочка_продленная")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Регион).HasDefaultValueSql("((0))");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<FilСуммаЗаявкиДляДолга>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Fil_Сумма заявки для долга");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Fil_Сумма заявки для долга")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма_руб");

                entity.Property(e => e.Фамилия).HasMaxLength(50);
            });

            modelBuilder.Entity<FotoPdf>(entity =>
            {
                entity.ToTable("Foto_PDF");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.BinaryData).HasColumnType("image");

                entity.Property(e => e.Ext)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<GroupOfGoods>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Group Of Goods");

                entity.HasIndex(e => e.IdgroupOfGoods)
                    .HasName("IX_Group Of Goods")
                    .IsUnique();

                entity.Property(e => e.GroupOfGoods1)
                    .HasColumnName("GroupOfGoods")
                    .HasMaxLength(50);

                entity.Property(e => e.IdgroupOfGoods)
                    .HasColumnName("IDGroupOfGoods")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RussianName).HasMaxLength(50);
            });

            modelBuilder.Entity<IssuingBank>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdissuingBankType)
                    .HasName("IX_IssuingBank")
                    .IsUnique();

                entity.Property(e => e.Account).HasMaxLength(50);

                entity.Property(e => e.IdissuingBankType)
                    .HasColumnName("IDIssuingBankType")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IssuingBankType).HasMaxLength(100);

                entity.Property(e => e.Фирма).HasMaxLength(10);
            });

            modelBuilder.Entity<KaidzenScheta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Kaidzen_scheta");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<KaidzenSchetaCo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Kaidzen_scheta_co");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<KaidzenSchetaВсеПредыдущие>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Kaidzen_scheta_все_предыдущие");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<KaidzenSchetaМск>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Kaidzen_scheta_мск");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<KaidzenSchetaРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Kaidzen_scheta регион");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<KaidzenSchetaФилиал>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Kaidzen_scheta филиал");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<KfВыпуска>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KF выпуска");

                entity.HasIndex(e => new { e.IdГртов, e.Месяц, e.Завод })
                    .HasName("IX_KF выпуска")
                    .IsUnique();

                entity.Property(e => e.IdГртов).HasColumnName("ID гртов");

                entity.Property(e => e.KfВыпуска1)
                    .HasColumnName("KF выпуска")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.Завод).HasMaxLength(10);
            });

            modelBuilder.Entity<KfВыпускаПоТоварам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("KF выпуска по товарам");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.KfВыпуска)
                    .HasColumnName("KF выпуска")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Завод).HasMaxLength(10);
            });

            modelBuilder.Entity<KlientyРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KLIENTY регион");

                entity.HasIndex(e => new { e.Id, e.РегРег })
                    .HasName("IX_KLIENTY регион_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.Город)
                    .HasMaxLength(30)
                    .IsFixedLength();

                entity.Property(e => e.Индекс)
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.КраткоеНаименование)
                    .HasColumnName("Краткое наименование")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.НомерСвид)
                    .HasColumnName("Номер_свид")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Окнх)
                    .HasColumnName("ОКНХ")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.РегРег).HasColumnName("Рег_рег");

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(40)
                    .IsFixedLength();

                entity.Property(e => e.Телефон)
                    .HasMaxLength(40)
                    .IsFixedLength();

                entity.Property(e => e.ФизАдрес)
                    .HasColumnName("Физ_адрес")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.ЮрАдрес)
                    .HasColumnName("Юр_адрес")
                    .HasMaxLength(255)
                    .IsFixedLength();
            });

            modelBuilder.Entity<KnНеучт>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KN неучт");

                entity.HasIndex(e => new { e.ДатаПр, e.НомерПлатежки, e.СуммаОпл, e.UserId })
                    .HasName("IX_KN неучт")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<KnНеучтВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KN неучт все");

                entity.HasIndex(e => new { e.IdДилера, e.IdЮрлица, e.UserId, e.Юрлицо, e.Дилер })
                    .HasName("IX_KN неучт все")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<KnНеучтВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KN неучт все регион");

                entity.HasIndex(e => new { e.IdДилера, e.IdЮрлица, e.UserId, e.Регион, e.Юрлицо, e.Дилер })
                    .HasName("IX_KN неучт все регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<Konvice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KONVICE");

                entity.HasIndex(e => e.IdГруппы)
                    .HasName("IX_KONVICE")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Скидка).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<KrПоКатегориям>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("KR по категориям");

                entity.HasIndex(e => e.ТипТовара)
                    .HasName("IX_KR по категориям")
                    .IsUnique();

                entity.Property(e => e.Kr)
                    .HasColumnName("KR")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ТипТовара)
                    .HasColumnName("Тип товара")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LbPrognoz>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lb_prognoz");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Всего).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ЗаказКратность)
                    .HasColumnName("Заказ_кратность")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ЗаказРекомендация)
                    .HasColumnName("Заказ_рекомендация")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.КратностьСосенки)
                    .HasColumnName("Кратность_Сосенки")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Мжз).HasColumnName("МЖЗ");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.ПорогБольшихОтгрузок).HasColumnName("Порог_больших_отгрузок");

                entity.Property(e => e.Свободно).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СвободноНеделя)
                    .HasColumnName("Свободно_неделя")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СвободноОтгрузка)
                    .HasColumnName("Свободно_отгрузка")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Участок).HasMaxLength(80);
            });

            modelBuilder.Entity<LbTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LB_tmp");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_LB")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri).HasColumnName("pri");

                entity.Property(e => e.Ras).HasColumnName("ras");

                entity.Property(e => e.Vputi).HasColumnName("vputi");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e._1Дн1).HasColumnName("1 дн_");

                entity.Property(e => e._1дн).HasColumnName("1дн");

                entity.Property(e => e._2Дн).HasColumnName("2 дн");

                entity.Property(e => e._2Дн1).HasColumnName("2 дн_");

                entity.Property(e => e._3Дн1).HasColumnName("3 дн");

                entity.Property(e => e._3дн).HasColumnName("3дн");

                entity.Property(e => e._4дн).HasColumnName("4дн");

                entity.Property(e => e._4дн1).HasColumnName("4дн_");

                entity.Property(e => e._5дн).HasColumnName("5дн");

                entity.Property(e => e._5дн1).HasColumnName("5дн_");

                entity.Property(e => e._6дн).HasColumnName("6дн");

                entity.Property(e => e._6дн1).HasColumnName("6дн_");

                entity.Property(e => e.Артикул)
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Модель)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .HasMaxLength(70)
                    .IsFixedLength();

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(11)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<LbРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LB регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_LB регион")
                    .IsUnique();

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_LB регион_1");

                entity.Property(e => e.Day1)
                    .HasColumnName("DAY1")
                    .HasMaxLength(15);

                entity.Property(e => e.Day10)
                    .HasColumnName("DAY10")
                    .HasMaxLength(15);

                entity.Property(e => e.Day2)
                    .HasColumnName("DAY2")
                    .HasMaxLength(15);

                entity.Property(e => e.Day3)
                    .HasColumnName("DAY3")
                    .HasMaxLength(15);

                entity.Property(e => e.Day4)
                    .HasColumnName("DAY4")
                    .HasMaxLength(15);

                entity.Property(e => e.Day5)
                    .HasColumnName("DAY5")
                    .HasMaxLength(15);

                entity.Property(e => e.Day6)
                    .HasColumnName("DAY6")
                    .HasMaxLength(15);

                entity.Property(e => e.Day7)
                    .HasColumnName("DAY7")
                    .HasMaxLength(15);

                entity.Property(e => e.Day8)
                    .HasColumnName("DAY8")
                    .HasMaxLength(15);

                entity.Property(e => e.Day9)
                    .HasColumnName("DAY9")
                    .HasMaxLength(15);

                entity.Property(e => e.Expr1).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pos1)
                    .HasColumnName("POS1")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos10)
                    .HasColumnName("POS10")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos2)
                    .HasColumnName("POS2")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos3)
                    .HasColumnName("POS3")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos4)
                    .HasColumnName("POS4")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos5)
                    .HasColumnName("POS5")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos6)
                    .HasColumnName("POS6")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos7)
                    .HasColumnName("POS7")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos8)
                    .HasColumnName("POS8")
                    .HasMaxLength(15);

                entity.Property(e => e.Pos9)
                    .HasColumnName("POS9")
                    .HasMaxLength(15);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Red)
                    .HasColumnName("red")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Stop)
                    .HasColumnName("stop")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Yellow)
                    .HasColumnName("yellow")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВЗаявку)
                    .HasColumnName("В заявку")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В пути")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Завод).HasMaxLength(20);

                entity.Property(e => e.Канбан)
                    .HasColumnName("КАНБАН")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан1дн)
                    .HasColumnName("КАНБАН1дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан2дн)
                    .HasColumnName("КАНБАН2дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан3дн)
                    .HasColumnName("КАНБАН3дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан4дн)
                    .HasColumnName("КАНБАН4дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан5дн)
                    .HasColumnName("КАНБАН5дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан6дн)
                    .HasColumnName("КАНБАН6дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан7дн)
                    .HasColumnName("КАНБАН7дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан8дн)
                    .HasColumnName("КАНБАН8дн")
                    .HasMaxLength(15);

                entity.Property(e => e.Канбан9дн)
                    .HasColumnName("КАНБАН9дн")
                    .HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВУпаковке)
                    .HasColumnName("Количество в упаковке")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КратностьКроватка)
                    .HasColumnName("Кратность_кроватка")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КратностьФил)
                    .HasColumnName("Кратность_фил")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Мощность).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Остаток).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа1День)
                    .HasColumnName("План на 1 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа2День)
                    .HasColumnName("План на 2 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа3День)
                    .HasColumnName("План на 3 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа4День)
                    .HasColumnName("План на 4 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа5День)
                    .HasColumnName("План на 5 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа6День)
                    .HasColumnName("План на 6 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа7День)
                    .HasColumnName("План на 7 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа8День)
                    .HasColumnName("План на 8 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПланНа9День)
                    .HasColumnName("План на 9 день")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Подтв)
                    .HasColumnName("подтв")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СвободноНаНед)
                    .HasColumnName("Свободно на нед")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<LbФилиал>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LB филиал");

                entity.HasIndex(e => new { e.Idt, e.Регион })
                    .HasName("IX_LB филиал")
                    .IsUnique();

                entity.Property(e => e.Idt).HasColumnName("IDT");

                entity.Property(e => e.LbФил)
                    .HasColumnName("LB_фил")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КратностьФил)
                    .HasColumnName("Кратность_фил")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Мощность).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ListLoadingData>(entity =>
            {
                entity.HasKey(e => e.Name);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.LastDeleted).HasColumnType("datetime");
            });

            modelBuilder.Entity<ListNames>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.FactoryId });

                entity.HasIndex(e => e.Id)
                    .HasName("IX_ListNames")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(255);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.AltName).HasMaxLength(255);

                entity.Property(e => e.RusName).HasMaxLength(255);
            });

            modelBuilder.Entity<ListPostTmc>(entity =>
            {
                entity.HasKey(e => new { e.IdТовара, e.IdПоставщика, e.FactoryId });

                entity.ToTable("ListPostTMC");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsBase)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.OrigenName).HasMaxLength(300);
            });

            modelBuilder.Entity<LocalPathes>(entity =>
            {
                entity.HasKey(e => new { e.NamePath, e.FactoryId });

                entity.ToTable("Local_Pathes");

                entity.Property(e => e.NamePath).HasMaxLength(50);

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");
            });

            modelBuilder.Entity<LogAsup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Log_ASUP", "DATASA");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<LogUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Log_users");

                entity.HasIndex(e => new { e.Кто, e.Что })
                    .HasName("IX_Log_users")
                    .IsUnique();

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Кто)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<MaxПартияТовараВыставкаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MaxПартияТовараВыставкаРегион");

                entity.Property(e => e.IdSkl).HasColumnName("ID_skl");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MxPart)
                    .HasColumnName("MX_part")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<MaxПартияТовараРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MaxПартияТовараРегион");

                entity.Property(e => e.IdSkl).HasColumnName("ID_skl");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MxPart).HasColumnName("MX_part");

                entity.Property(e => e.Уз)
                    .IsRequired()
                    .HasColumnName("УЗ")
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MaxПартияТовараРегионЗаказа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MaxПартияТовараРегион_Заказа");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<MedHid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MED_HID");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.OrgId).HasColumnName("OrgID");
            });

            modelBuilder.Entity<MenuДолжностейПоставки>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.MenuId });

                entity.ToTable("Menu должностей поставки");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");
            });

            modelBuilder.Entity<MenuПользователейПоставки>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.MenuId });

                entity.ToTable("Menu пользователей поставки");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");
            });

            modelBuilder.Entity<MenuПоставки>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.ParentId });

                entity.ToTable("Menu поставки");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.NameMenu).HasMaxLength(50);

                entity.Property(e => e.NameMenuA).HasMaxLength(50);

                entity.Property(e => e.StyleId).HasColumnName("StyleID");

                entity.Property(e => e.ToolTip).HasMaxLength(50);

                entity.Property(e => e.ToolTipA).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<MetodOfPayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Metod of payment");

                entity.HasIndex(e => e.IdMetodOfPayment)
                    .HasName("IX_Metod of payment")
                    .IsUnique();

                entity.Property(e => e.CreditsDays).HasColumnName("Credits days");

                entity.Property(e => e.IdMetodOfPayment)
                    .HasColumnName("ID Metod of payment")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.MetodOfPayment1)
                    .IsRequired()
                    .HasColumnName("Metod of payment")
                    .HasMaxLength(50);

                entity.Property(e => e.Percent).HasMaxLength(50);
            });

            modelBuilder.Entity<MetodOfTransport>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Metod of transport");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Metod of transport")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdMetodOfTransport).HasColumnName("ID Metod of transport");

                entity.Property(e => e.MetodOfTransport1)
                    .IsRequired()
                    .HasColumnName("Metod of transport")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ModBs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_BS");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_BS")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModBsFact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_BS_fact");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_BS_fact")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModCf>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_CF");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_CF")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModCfFact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_CF_fact");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_CF_fact")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModCogsFinplan>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_COGS_FINPLAN");

                entity.HasIndex(e => new { e.IdCogs, e.КодФинплан })
                    .HasName("IX_Mod_COGS_FINPLAN")
                    .IsUnique();

                entity.Property(e => e.IdCogs).HasColumnName("ID COGS");

                entity.Property(e => e.КодФинплан)
                    .HasColumnName("Код финплан")
                    .HasMaxLength(10);

                entity.Property(e => e.СтатьяВCogs)
                    .HasColumnName("Статья в COGS")
                    .HasMaxLength(150);

                entity.Property(e => e.Тип).HasMaxLength(10);
            });

            modelBuilder.Entity<ModIncome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Income");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Income")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Змк)
                    .HasColumnName("2015_01_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Импорт)
                    .HasColumnName("2015_01_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Узмк)
                    .HasColumnName("2015_01_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Змк)
                    .HasColumnName("2015_02_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Импорт)
                    .HasColumnName("2015_02_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Узмк)
                    .HasColumnName("2015_02_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Змк)
                    .HasColumnName("2015_03_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Импорт)
                    .HasColumnName("2015_03_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Узмк)
                    .HasColumnName("2015_03_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Змк)
                    .HasColumnName("2015_04_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Импорт)
                    .HasColumnName("2015_04_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Узмк)
                    .HasColumnName("2015_04_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Змк)
                    .HasColumnName("2015_05_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Импорт)
                    .HasColumnName("2015_05_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Узмк)
                    .HasColumnName("2015_05_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Змк)
                    .HasColumnName("2015_06_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Импорт)
                    .HasColumnName("2015_06_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Узмк)
                    .HasColumnName("2015_06_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Змк)
                    .HasColumnName("2015_07_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Импорт)
                    .HasColumnName("2015_07_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Узмк)
                    .HasColumnName("2015_07_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Змк)
                    .HasColumnName("2015_08_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Импорт)
                    .HasColumnName("2015_08_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Узмк)
                    .HasColumnName("2015_08_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Змк)
                    .HasColumnName("2015_09_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Импорт)
                    .HasColumnName("2015_09_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Узмк)
                    .HasColumnName("2015_09_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Змк)
                    .HasColumnName("2015_10_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Импорт)
                    .HasColumnName("2015_10_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Узмк)
                    .HasColumnName("2015_10_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Змк)
                    .HasColumnName("2015_11_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Импорт)
                    .HasColumnName("2015_11_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Узмк)
                    .HasColumnName("2015_11_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Змк)
                    .HasColumnName("2015_12_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Импорт)
                    .HasColumnName("2015_12_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Узмк)
                    .HasColumnName("2015_12_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601)
                    .HasColumnName("2016_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601Змк)
                    .HasColumnName("2016_01_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601Импорт)
                    .HasColumnName("2016_01_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601Узмк)
                    .HasColumnName("2016_01_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602)
                    .HasColumnName("2016_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602Змк)
                    .HasColumnName("2016_02_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602Импорт)
                    .HasColumnName("2016_02_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602Узмк)
                    .HasColumnName("2016_02_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603)
                    .HasColumnName("2016_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603Змк)
                    .HasColumnName("2016_03_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603Импорт)
                    .HasColumnName("2016_03_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603Узмк)
                    .HasColumnName("2016_03_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604)
                    .HasColumnName("2016_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604Змк)
                    .HasColumnName("2016_04_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604Импорт)
                    .HasColumnName("2016_04_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604Узмк)
                    .HasColumnName("2016_04_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605)
                    .HasColumnName("2016_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605Змк)
                    .HasColumnName("2016_05_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605Импорт)
                    .HasColumnName("2016_05_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605Узмк)
                    .HasColumnName("2016_05_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606)
                    .HasColumnName("2016_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606Змк)
                    .HasColumnName("2016_06_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606Импорт)
                    .HasColumnName("2016_06_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606Узмк)
                    .HasColumnName("2016_06_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607)
                    .HasColumnName("2016_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607Змк)
                    .HasColumnName("2016_07_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607Импорт)
                    .HasColumnName("2016_07_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607Узмк)
                    .HasColumnName("2016_07_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608)
                    .HasColumnName("2016_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608Змк)
                    .HasColumnName("2016_08_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608Импорт)
                    .HasColumnName("2016_08_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608Узмк)
                    .HasColumnName("2016_08_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609)
                    .HasColumnName("2016_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609Змк)
                    .HasColumnName("2016_09_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609Импорт)
                    .HasColumnName("2016_09_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609Узмк)
                    .HasColumnName("2016_09_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610)
                    .HasColumnName("2016_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610Змк)
                    .HasColumnName("2016_10_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610Импорт)
                    .HasColumnName("2016_10_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610Узмк)
                    .HasColumnName("2016_10_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611)
                    .HasColumnName("2016_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611Змк)
                    .HasColumnName("2016_11_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611Импорт)
                    .HasColumnName("2016_11_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611Узмк)
                    .HasColumnName("2016_11_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612)
                    .HasColumnName("2016_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612Змк)
                    .HasColumnName("2016_12_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612Импорт)
                    .HasColumnName("2016_12_Импорт")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612Узмк)
                    .HasColumnName("2016_12_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПоказательЗмк2014)
                    .HasColumnName("Показатель_ЗМК_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательЗмк2015)
                    .HasColumnName("Показатель_ЗМК_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательЗмк2016)
                    .HasColumnName("Показатель_ЗМК_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательИмпорт2014)
                    .HasColumnName("Показатель_Импорт_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательИмпорт2015)
                    .HasColumnName("Показатель_Импорт_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательИмпорт2016)
                    .HasColumnName("Показатель_Импорт_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2014)
                    .HasColumnName("Показатель_УЗМК_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2015)
                    .HasColumnName("Показатель_УЗМК_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2016)
                    .HasColumnName("Показатель_УЗМК_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModInputData>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Input_Data");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Input_Data")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 6)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(50);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModInputInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Input_Inv");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Input_Inv")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModInputSchwarz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Input_Schwarz");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Input_Schwarz")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModInputСтоимостьТруда>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Input_Стоимость_труда");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Input_Стоимость_труда")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModInputСтоимостьТрудаРазбивка>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Input_Стоимость труда_разбивка");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Mod_Input_Стоимость труда_разбивка_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.Структура, e.Завод, e.Производство })
                    .HasName("IX_Mod_Input_Стоимость труда_разбивка");

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Смпр)
                    .HasColumnName("2015_01_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Смпр)
                    .HasColumnName("2015_02_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Смпр)
                    .HasColumnName("2015_03_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Смпр)
                    .HasColumnName("2015_04_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Смпр)
                    .HasColumnName("2015_05_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Смпр)
                    .HasColumnName("2015_06_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Смпр)
                    .HasColumnName("2015_07_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Смпр)
                    .HasColumnName("2015_08_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Смпр)
                    .HasColumnName("2015_09_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Смпр)
                    .HasColumnName("2015_10_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Смпр)
                    .HasColumnName("2015_11_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Смпр)
                    .HasColumnName("2015_12_СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Завод).HasMaxLength(10);

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.Производство).HasMaxLength(50);

                entity.Property(e => e.СтрокаВInputСтоимость).HasColumnName("Строка в Input_стоимость");

                entity.Property(e => e.Структура)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ModSalesForecast>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Sales_Forecast");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Sales_Forecast")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModАмортизация>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Амортизация");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Амортизация")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModРасчетыCogs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Расчеты_COGS");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Расчеты_COGS")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Змк)
                    .HasColumnName("2015_01_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Узмк)
                    .HasColumnName("2015_01_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Змк)
                    .HasColumnName("2015_02_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Узмк)
                    .HasColumnName("2015_02_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Змк)
                    .HasColumnName("2015_03_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Узмк)
                    .HasColumnName("2015_03_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Змк)
                    .HasColumnName("2015_04_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Узмк)
                    .HasColumnName("2015_04_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Змк)
                    .HasColumnName("2015_05_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Узмк)
                    .HasColumnName("2015_05_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Змк)
                    .HasColumnName("2015_06_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Узмк)
                    .HasColumnName("2015_06_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Змк)
                    .HasColumnName("2015_07_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Узмк)
                    .HasColumnName("2015_07_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Змк)
                    .HasColumnName("2015_08_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Узмк)
                    .HasColumnName("2015_08_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Змк)
                    .HasColumnName("2015_09_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Узмк)
                    .HasColumnName("2015_09_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Змк)
                    .HasColumnName("2015_10_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Узмк)
                    .HasColumnName("2015_10_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Змк)
                    .HasColumnName("2015_11_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Узмк)
                    .HasColumnName("2015_11_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Змк)
                    .HasColumnName("2015_12_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Узмк)
                    .HasColumnName("2015_12_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601)
                    .HasColumnName("2016_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601Змк)
                    .HasColumnName("2016_01_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601Узмк)
                    .HasColumnName("2016_01_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602)
                    .HasColumnName("2016_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602Змк)
                    .HasColumnName("2016_02_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602Узмк)
                    .HasColumnName("2016_02_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603)
                    .HasColumnName("2016_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603Змк)
                    .HasColumnName("2016_03_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603Узмк)
                    .HasColumnName("2016_03_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604)
                    .HasColumnName("2016_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604Змк)
                    .HasColumnName("2016_04_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604Узмк)
                    .HasColumnName("2016_04_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605)
                    .HasColumnName("2016_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605Змк)
                    .HasColumnName("2016_05_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605Узмк)
                    .HasColumnName("2016_05_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606)
                    .HasColumnName("2016_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606Змк)
                    .HasColumnName("2016_06_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606Узмк)
                    .HasColumnName("2016_06_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607)
                    .HasColumnName("2016_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607Змк)
                    .HasColumnName("2016_07_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607Узмк)
                    .HasColumnName("2016_07_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608)
                    .HasColumnName("2016_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608Змк)
                    .HasColumnName("2016_08_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608Узмк)
                    .HasColumnName("2016_08_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609)
                    .HasColumnName("2016_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609Змк)
                    .HasColumnName("2016_09_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609Узмк)
                    .HasColumnName("2016_09_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610)
                    .HasColumnName("2016_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610Змк)
                    .HasColumnName("2016_10_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610Узмк)
                    .HasColumnName("2016_10_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611)
                    .HasColumnName("2016_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611Змк)
                    .HasColumnName("2016_11_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611Узмк)
                    .HasColumnName("2016_11_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612)
                    .HasColumnName("2016_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612Змк)
                    .HasColumnName("2016_12_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612Узмк)
                    .HasColumnName("2016_12_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.ПоказательЗмк2014)
                    .HasColumnName("Показатель_ЗМК_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательЗмк2015)
                    .HasColumnName("Показатель_ЗМК_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательЗмк2016)
                    .HasColumnName("Показатель_ЗМК_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательИмпорт2014)
                    .HasColumnName("Показатель_Импорт_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2014)
                    .HasColumnName("Показатель_УЗМК_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2015)
                    .HasColumnName("Показатель_УЗМК_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2016)
                    .HasColumnName("Показатель_УЗМК_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModРасчетыCogsFact>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Расчеты_COGS_fact");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Расчеты_COGS_fact")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Змк)
                    .HasColumnName("2015_01_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201501Узмк)
                    .HasColumnName("2015_01_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Змк)
                    .HasColumnName("2015_02_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502Узмк)
                    .HasColumnName("2015_02_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Змк)
                    .HasColumnName("2015_03_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503Узмк)
                    .HasColumnName("2015_03_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Змк)
                    .HasColumnName("2015_04_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504Узмк)
                    .HasColumnName("2015_04_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Змк)
                    .HasColumnName("2015_05_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505Узмк)
                    .HasColumnName("2015_05_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Змк)
                    .HasColumnName("2015_06_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506Узмк)
                    .HasColumnName("2015_06_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Змк)
                    .HasColumnName("2015_07_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507Узмк)
                    .HasColumnName("2015_07_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Змк)
                    .HasColumnName("2015_08_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508Узмк)
                    .HasColumnName("2015_08_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Змк)
                    .HasColumnName("2015_09_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509Узмк)
                    .HasColumnName("2015_09_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Змк)
                    .HasColumnName("2015_10_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510Узмк)
                    .HasColumnName("2015_10_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Змк)
                    .HasColumnName("2015_11_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511Узмк)
                    .HasColumnName("2015_11_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Змк)
                    .HasColumnName("2015_12_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512Узмк)
                    .HasColumnName("2015_12_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601)
                    .HasColumnName("2016_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601Змк)
                    .HasColumnName("2016_01_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201601Узмк)
                    .HasColumnName("2016_01_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602)
                    .HasColumnName("2016_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602Змк)
                    .HasColumnName("2016_02_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201602Узмк)
                    .HasColumnName("2016_02_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603)
                    .HasColumnName("2016_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603Змк)
                    .HasColumnName("2016_03_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201603Узмк)
                    .HasColumnName("2016_03_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604)
                    .HasColumnName("2016_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604Змк)
                    .HasColumnName("2016_04_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201604Узмк)
                    .HasColumnName("2016_04_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605)
                    .HasColumnName("2016_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605Змк)
                    .HasColumnName("2016_05_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201605Узмк)
                    .HasColumnName("2016_05_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606)
                    .HasColumnName("2016_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606Змк)
                    .HasColumnName("2016_06_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201606Узмк)
                    .HasColumnName("2016_06_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607)
                    .HasColumnName("2016_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607Змк)
                    .HasColumnName("2016_07_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201607Узмк)
                    .HasColumnName("2016_07_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608)
                    .HasColumnName("2016_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608Змк)
                    .HasColumnName("2016_08_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201608Узмк)
                    .HasColumnName("2016_08_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609)
                    .HasColumnName("2016_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609Змк)
                    .HasColumnName("2016_09_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201609Узмк)
                    .HasColumnName("2016_09_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610)
                    .HasColumnName("2016_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610Змк)
                    .HasColumnName("2016_10_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201610Узмк)
                    .HasColumnName("2016_10_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611)
                    .HasColumnName("2016_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611Змк)
                    .HasColumnName("2016_11_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201611Узмк)
                    .HasColumnName("2016_11_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612)
                    .HasColumnName("2016_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612Змк)
                    .HasColumnName("2016_12_ЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201612Узмк)
                    .HasColumnName("2016_12_УЗМК")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.ПоказательЗмк2014)
                    .HasColumnName("Показатель_ЗМК_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательЗмк2015)
                    .HasColumnName("Показатель_ЗМК_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательЗмк2016)
                    .HasColumnName("Показатель_ЗМК_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательИмпорт2014)
                    .HasColumnName("Показатель_Импорт_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2014)
                    .HasColumnName("Показатель_УЗМК_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2015)
                    .HasColumnName("Показатель_УЗМК_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПоказательУзмк2016)
                    .HasColumnName("Показатель_УЗМК_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<ModРасчетыНдс>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Mod_Расчеты_НДС");

                entity.HasIndex(e => e.КодСтатьи)
                    .HasName("IX_Mod_Расчеты_НДС")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e._201501)
                    .HasColumnName("2015_01")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201502)
                    .HasColumnName("2015_02")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201503)
                    .HasColumnName("2015_03")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201504)
                    .HasColumnName("2015_04")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201505)
                    .HasColumnName("2015_05")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201506)
                    .HasColumnName("2015_06")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201507)
                    .HasColumnName("2015_07")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201508)
                    .HasColumnName("2015_08")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201509)
                    .HasColumnName("2015_09")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201510)
                    .HasColumnName("2015_10")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201511)
                    .HasColumnName("2015_11")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e._201512)
                    .HasColumnName("2015_12")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код_сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСтатьи).HasColumnName("Код_статьи");

                entity.Property(e => e.Показатель2014)
                    .HasColumnName("Показатель_2014")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2015)
                    .HasColumnName("Показатель_2015")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Показатель2016)
                    .HasColumnName("Показатель_2016")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статья).HasMaxLength(150);
            });

            modelBuilder.Entity<NId>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.OldId });

                entity.ToTable("nID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OldId).HasColumnName("OLD_ID");

                entity.Property(e => e.Art).HasMaxLength(50);
            });

            modelBuilder.Entity<NameForms>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Form)
                    .HasName("IX_NameForms")
                    .IsUnique();

                entity.Property(e => e.NameForm)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<OplatyQbРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OPLATY-QB регион");

                entity.Property(e => e.CustomerType)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.КодГородаПокупателя)
                    .HasColumnName("Код города покупателя")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГородаСчета)
                    .HasColumnName("Код города счета")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Назначение)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Покупатель)
                    .HasMaxLength(100)
                    .IsFixedLength();
            });

            modelBuilder.Entity<OplatyРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OPLATY регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.КодГородаПокупателя)
                    .HasColumnName("Код города покупателя")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодГородаСчета)
                    .HasColumnName("Код города счета")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Назначение)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Покупатель)
                    .HasMaxLength(100)
                    .IsFixedLength();
            });

            modelBuilder.Entity<OplУчт>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OPL учт");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_OPL учт_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ДатаПр, e.НомерПлатежки, e.СуммаОпл, e.UserId, e.НомерСчета })
                    .HasName("IX_OPL учт");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<OrderListKazanlyk>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Id, e.UserId })
                    .HasName("IX_OrderListKazanlyk")
                    .IsUnique();

                entity.Property(e => e.Artikul)
                    .HasColumnName("artikul")
                    .HasMaxLength(50);

                entity.Property(e => e.BalOst)
                    .HasColumnName("Bal_ost")
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Balance1)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Balance2)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Balance3)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Balance4)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Balance5)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Customer).HasMaxLength(150);

                entity.Property(e => e.DateFact).HasColumnType("smalldatetime");

                entity.Property(e => e.DateNewPlan).HasColumnType("smalldatetime");

                entity.Property(e => e.DatePlan).HasColumnType("smalldatetime");

                entity.Property(e => e.Fact1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fact2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fact3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fact4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fact5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Income)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inv1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Inv2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Inv3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Inv4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Inv5).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderDate).HasColumnType("smalldatetime");

                entity.Property(e => e.OrderNo).HasMaxLength(50);

                entity.Property(e => e.Plan1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plan2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plan3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plan4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plan5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plant1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plant2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plant3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plant4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Plant5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Tovar)
                    .HasColumnName("tovar")
                    .HasMaxLength(150);

                entity.Property(e => e.TovarTovar)
                    .HasColumnName("tovar_tovar")
                    .HasMaxLength(150);

                entity.Property(e => e.UserId).HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЖел1)
                    .HasColumnName("Кол_жел1")
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЖел2)
                    .HasColumnName("Кол_жел2")
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЖел3)
                    .HasColumnName("Кол_жел3")
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЖел4)
                    .HasColumnName("Кол_жел4")
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЖел5)
                    .HasColumnName("Кол_жел5")
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Статус).HasMaxLength(50);

                entity.Property(e => e.СтатусТовара)
                    .HasColumnName("Статус товара")
                    .HasMaxLength(50);

                entity.Property(e => e.ЦенаИнвойса)
                    .HasColumnName("цена_инвойса")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПередачи)
                    .HasColumnName("цена_передачи")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdOrder)
                    .HasName("IX_Orders")
                    .IsUnique();

                entity.HasIndex(e => e.IdПоставщика)
                    .HasName("IX_Orders_1");

                entity.HasIndex(e => e.НомерЗаказа)
                    .HasName("IX_Orders_2")
                    .IsUnique();

                entity.Property(e => e.FreightCharges)
                    .HasColumnName("FREIGHT CHARGES")
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdDeliveryTerm)
                    .HasColumnName("ID DELIVERY TERM")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdManager)
                    .HasColumnName("ID Manager")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdMetodOfPayment).HasColumnName("ID Metod of payment");

                entity.Property(e => e.IdMetodOfTransport)
                    .HasColumnName("ID Metod of transport")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdOrder)
                    .HasColumnName("ID order")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПокупателя)
                    .HasColumnName("ID покупателя")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПостДост)
                    .HasColumnName("ID пост_дост")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПостСтрах)
                    .HasColumnName("ID пост_страх")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПостТам)
                    .HasColumnName("ID пост_там")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПоставщика)
                    .HasColumnName("ID поставщика")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТипаГруза)
                    .HasColumnName("ID типа груза")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.InsCharges)
                    .HasColumnName("INS CHARGES")
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RealArriveDate)
                    .HasColumnName("Real arrive date")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Вариант).HasMaxLength(50);

                entity.Property(e => e.ДатаВнесенияИзменений)
                    .HasColumnName("Дата внесения изменений")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузкиПлановая)
                    .HasColumnName("Дата отгрузки  плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрибытияВМоскву)
                    .HasColumnName("Дата прибытия в Москву")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрибытияВПорт)
                    .HasColumnName("Дата прибытия в порт")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрибытияДляОтечественных)
                    .HasColumnName("Дата прибытия для отечественных")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('не прибыл')");

                entity.Property(e => e.ДатаПрибытияПлановая)
                    .HasColumnName("Дата прибытия плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрибытияРасчетная)
                    .HasColumnName("Дата прибытия расчетная")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрибытияФактическая)
                    .HasColumnName("Дата прибытия фактическая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРазмещенияЗаказа)
                    .HasColumnName("Дата размещения заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРастаможки)
                    .HasColumnName("Дата растаможки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИзмененияВнес)
                    .HasColumnName("Изменения внес")
                    .HasMaxLength(50);

                entity.Property(e => e.КоличествоКонтейнеров)
                    .HasColumnName("Количество контейнеров")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерЗаказа)
                    .IsRequired()
                    .HasColumnName("Номер заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерЗаказаДляПеревозчика)
                    .HasColumnName("Номер заказа для перевозчика")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерЗаявки)
                    .HasColumnName("Номер заявки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерИнвойса)
                    .HasColumnName("Номер инвойса")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('не известен')");

                entity.Property(e => e.НомерКонтейнера)
                    .HasColumnName("Номер контейнера")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПроформы)
                    .HasColumnName("Номер проформы")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('не известен')");

                entity.Property(e => e.Опл).HasDefaultValueSql("(0)");

                entity.Property(e => e.ОплатаЗаПеревозкуПоставщику)
                    .IsRequired()
                    .HasColumnName("Оплата за перевозку поставщику")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Ответственный).HasMaxLength(150);

                entity.Property(e => e.Пол).HasDefaultValueSql("(0)");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПроцентСтраховки)
                    .HasColumnName("Процент страховки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СебестоимостьСформирована)
                    .IsRequired()
                    .HasColumnName("Себестоимость сформирована")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Скидка).HasDefaultValueSql("(0)");

                entity.Property(e => e.СкидкаАбсолютная)
                    .HasColumnName("Скидка абсолютная")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СтатусЗаявки)
                    .HasColumnName("Статус заявки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СтоимостьЗаказа)
                    .HasColumnName("Стоимость заказа")
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СтоимостьПеревозки)
                    .HasColumnName("Стоимость перевозки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СтоимостьПрочая)
                    .HasColumnName("Стоимость прочая")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СтоимостьСтраховки)
                    .HasColumnName("Стоимость страховки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СтоимостьТаможня)
                    .HasColumnName("Стоимость таможня")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СтоимостьТаможняОсобая)
                    .HasColumnName("Стоимость таможня особая")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаВДолларах)
                    .HasColumnName("Сумма в долларах")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаФактическая)
                    .HasColumnName("Сумма фактическая")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ТипЗаказа)
                    .HasColumnName("Тип заказа")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Otgr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("OTGR");

                entity.HasIndex(e => new { e.Накладная, e.UserId, e.КодЗаказа, e.Префикс, e.СуммаОтгр, e.ДатаВывоза, e.Номер, e.Накладная1 })
                    .HasName("IX_OTGR")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.КолЗаказано)
                    .HasColumnName("Кол_заказано")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолПаллет)
                    .HasColumnName("Кол_паллет")
                    .HasColumnType("decimal(7, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолФакта)
                    .HasColumnName("Кол_факта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Накладная1)
                    .HasColumnName("Накладная_")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.СуммаЗаказа)
                    .HasColumnName("Сумма заказа")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ParamList>(entity =>
            {
                entity.HasKey(e => e.ParamId);

                entity.Property(e => e.ParamId).HasColumnName("ParamID");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.EdIzmId).HasColumnName("EdIzmID");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.SubGroupId).HasColumnName("SubGroupID");
            });

            modelBuilder.Entity<ParamValue>(entity =>
            {
                entity.HasKey(e => new { e.IdТовара, e.ParamId, e.FactoryId });

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ParamId).HasColumnName("ParamID");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");
            });

            modelBuilder.Entity<PlanAsup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PLAN_ASUP");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Idizgot).HasColumnName("IDIZGOT");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol)
                    .HasColumnName("KOL")
                    .HasColumnType("decimal(38, 0)");

                entity.Property(e => e.Выражение1).HasColumnType("smalldatetime");

                entity.Property(e => e.Выражение2).HasColumnType("decimal(4, 0)");

                entity.Property(e => e.Выражение3).HasColumnType("decimal(2, 0)");

                entity.Property(e => e.Площадка).HasMaxLength(50);

                entity.Property(e => e.Спецзаказ)
                    .HasColumnName("спецзаказ")
                    .HasColumnType("decimal(38, 0)");
            });

            modelBuilder.Entity<PlanWeek>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Id, e.UserId, e.Article })
                    .HasName("IX_PlanWeek")
                    .IsUnique();

                entity.Property(e => e.Article).HasMaxLength(50);

                entity.Property(e => e.ExtraCode)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.FactCz).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactEweek)
                    .HasColumnName("FactEWeek")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPn).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactPt).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactSreda).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactSub).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactVt).HasDefaultValueSql("((0))");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.PlanCz).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanPn).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanPt).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanSreda).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanSub).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlanVt).HasDefaultValueSql("((0))");

                entity.Property(e => e.PlantSim)
                    .HasColumnName("PlantSIM")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PlantWeek).HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasDefaultValueSql("((0))");

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(50);

                entity.Property(e => e.Статус).HasMaxLength(3);

                entity.Property(e => e.Товар).HasMaxLength(150);

                entity.Property(e => e.Цена).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<PlantTypes>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PlantTypes");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idchief).HasColumnName("IDChief");

                entity.Property(e => e.PlantType)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PriTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("pri_tmp");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.Userid, e.НомерЗаказа, e.Регион })
                    .HasName("IX_pri_tmp111_1")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrZakaza)
                    .HasColumnName("SSR_zakaza")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.ВПути).HasColumnName("В пути");

                entity.Property(e => e.Клиент).HasMaxLength(150);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер_заказа");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион_заказа");

                entity.Property(e => e.Факт).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Price>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Price_2")
                    .IsUnique();

                entity.HasIndex(e => e.SafeId)
                    .HasName("IX_Price_1")
                    .IsUnique();

                entity.Property(e => e.Price1)
                    .HasColumnName("Price")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrЗаводаUzmk)
                    .HasColumnName("SSR_завода_UZMK")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SsrЗаводаСосенки)
                    .HasColumnName("SSR_завода_Сосенки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АмортизацияUzmk)
                    .HasColumnName("Амортизация_UZMK")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АмортизацияСосенки)
                    .HasColumnName("Амортизация_Сосенки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПрямыеЗатраты)
                    .HasColumnName("Прямые_затраты")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СредняяРозн2020)
                    .HasColumnName("Средняя Розн2020")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СредняяСкидка)
                    .HasColumnName("Средняя скидка")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СредняяЦп2020)
                    .HasColumnName("Средняя ЦП2020")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СредняяЦр2020)
                    .HasColumnName("Средняя ЦР2020")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Price06072016>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Price_06072016");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Price112015>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_11_2015");

                entity.HasIndex(e => e.SafeId)
                    .HasName("IX_Price_11_2015_1")
                    .IsUnique();

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_тула")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Price18122017>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_18122017");

                entity.HasIndex(e => e.SafeId)
                    .HasName("IX_Price_18122017")
                    .IsUnique();

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПрямыеЗатраты)
                    .HasColumnName("Прямые_затраты")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Price190715>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Price_190715");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrЗаводаUzmk)
                    .HasColumnName("SSR_завода_UZMK")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SsrЗаводаСосенки)
                    .HasColumnName("SSR_завода_Сосенки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АмортизацияUzmk)
                    .HasColumnName("Амортизация_UZMK")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АмортизацияСосенки)
                    .HasColumnName("Амортизация_Сосенки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПрямыеЗатраты)
                    .HasColumnName("Прямые_затраты")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СредняяСкидка)
                    .HasColumnName("Средняя скидка")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Price19092016>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_19092016");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Price20170405>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_2017_04_05");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Price20170712>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_20170712");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Price20180913>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_20180913");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Price20180913Aprel)
                    .HasColumnName("Price_20180913_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Price20180913Min)
                    .HasColumnName("Price_20180913_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Price20180913MinБезНдс)
                    .HasColumnName("Price_20180913_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Price20180913Spec)
                    .HasColumnName("Price_20180913_spec")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Price20180913Uzmk)
                    .HasColumnName("Price_20180913_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Price20180913UzmkAprel)
                    .HasColumnName("Price_20180913_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ПрямыеЗатраты)
                    .HasColumnName("Прямые_затраты")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Price20191001>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_20191001");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMinБезНдс)
                    .HasColumnName("Price_min_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkБезНдс)
                    .HasColumnName("SSR_UZMK_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrЗаводаUzmk)
                    .HasColumnName("SSR_завода_UZMK")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SsrЗаводаСосенки)
                    .HasColumnName("SSR_завода_Сосенки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АмортизацияUzmk)
                    .HasColumnName("Амортизация_UZMK")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АмортизацияСосенки)
                    .HasColumnName("Амортизация_Сосенки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПрямыеЗатраты)
                    .HasColumnName("Прямые_затраты")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СредняяСкидка)
                    .HasColumnName("Средняя скидка")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенкиБезНдс)
                    .HasColumnName("ЦП_Сосенки_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпТулаБезНдс)
                    .HasColumnName("ЦП_Тула_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<PriceBlg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_blg");

                entity.HasIndex(e => e.SafeId)
                    .HasName("IX_Price_blg")
                    .IsUnique();

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceNds)
                    .HasColumnName("Price_NDS")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SafeId)
                    .HasColumnName("Safe ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PriceFirm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price firm");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Price firm")
                    .IsUnique();

                entity.Property(e => e.PriceДиал)
                    .HasColumnName("Price_Диал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceКон)
                    .HasColumnName("Price_Кон")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceМтк)
                    .HasColumnName("Price_МТК")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceОоо)
                    .HasColumnName("Price_ООО")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SafeId)
                    .HasColumnName("Safe ID")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PriceHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price history");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Price history")
                    .IsUnique();

                entity.HasIndex(e => new { e.Дата, e.IdТовара })
                    .HasName("IX_Price history_1")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Test)
                    .HasColumnName("test")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ЧертежBin).HasColumnName("Чертеж_bin");
            });

            modelBuilder.Entity<PriceOld>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Price_OLD");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<PriceUkr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price_ukr");

                entity.HasIndex(e => e.SafeId)
                    .HasName("IX_Price_ukr")
                    .IsUnique();

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceNds)
                    .HasColumnName("Price_NDS")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SafeId)
                    .HasColumnName("Safe ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PriceПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Price поставки");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Price поставки")
                    .IsUnique();

                entity.HasIndex(e => e.SafeId)
                    .HasName("IX_Price поставки_1")
                    .IsUnique();

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SafeId)
                    .HasColumnName("Safe ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ДатаПартии)
                    .HasColumnName("Дата партии")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаБезНдсНаПромет)
                    .HasColumnName("Цена_без_НДС_на_ПРОМЕТ")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаБезНдсНаСейф)
                    .HasColumnName("Цена_без_НДС_на_СЕЙФ")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаСНдсПромет)
                    .HasColumnName("Цена_с_НДС_ПРОМЕТ")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаСНдсСейф)
                    .HasColumnName("Цена_с_НДС_СЕЙФ")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<PriceЦп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Price_ЦП");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Амортизация).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.СредняяСкидка)
                    .HasColumnName("Средняя скидка")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сс)
                    .HasColumnName("СС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СсБезНдс)
                    .HasColumnName("СС_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цп)
                    .HasColumnName("ЦП")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Prognoz>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("prognoz");

                entity.Property(e => e.Art)
                    .HasColumnName("art")
                    .HasMaxLength(30);

                entity.Property(e => e.God).HasColumnName("god");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Mes).HasColumnName("mes");

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<PstUzmkСписокТоварныхКодов>(entity =>
            {
                entity.HasKey(e => e.CodeId);

                entity.ToTable("pst.UZMK_Список_товарных_Кодов");

                entity.Property(e => e.CodeId)
                    .HasColumnName("CodeID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PstАвтоЗаявкиПоРеализации>(entity =>
            {
                entity.HasKey(e => new { e.Требование, e.Заявка });

                entity.ToTable("pst.Авто_Заявки_По_реализации");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Дата).HasColumnType("date");

                entity.Property(e => e.СкладКуда).HasColumnName("Склад куда");

                entity.Property(e => e.СкладОткуда).HasColumnName("Склад откуда");

                entity.Property(e => e.ФирмаКуда).HasColumnName("Фирма куда");

                entity.Property(e => e.ФирмаОткуда).HasColumnName("Фирма откуда");
            });

            modelBuilder.Entity<PstАналоги>(entity =>
            {
                entity.HasKey(e => new { e.BaseId, e.AnalogId })
                    .HasName("PK_pst_Аналоги");

                entity.ToTable("pst.Аналоги");

                entity.Property(e => e.BaseId).HasColumnName("BaseID");

                entity.Property(e => e.AnalogId).HasColumnName("AnalogID");

                entity.Property(e => e.Count).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<PstАртикулыКлиентов>(entity =>
            {
                entity.HasKey(e => e.RecId)
                    .HasName("PK_post_Артикулы_Клиентов");

                entity.ToTable("pst.Артикулы_Клиентов");

                entity.HasIndex(e => new { e.IdTmc, e.Поставщик })
                    .HasName("IX_post_Артикулы_Клиентов")
                    .IsUnique();

                entity.Property(e => e.RecId).HasColumnName("RecID");

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.АртикулКлиента)
                    .HasColumnName("Артикул Клиента")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(500);
            });

            modelBuilder.Entity<PstВхождениеСкладовВТовНаправления>(entity =>
            {
                entity.HasKey(e => new { e.IdСклада, e.TovDir })
                    .HasName("PK_pst_Вхождение_складов_в_Тов_направления");

                entity.ToTable("pst.Вхождение_складов_в_Тов_направления");

                entity.Property(e => e.IdСклада).HasColumnName("ID_склада");

                entity.Property(e => e.TovDir).HasMaxLength(50);
            });

            modelBuilder.Entity<PstКритерииПоставщиков>(entity =>
            {
                entity.ToTable("pst.Критерии поставщиков");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.From).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Sign).HasMaxLength(10);

                entity.Property(e => e.To).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PstМатериалыВЭксплуатации>(entity =>
            {
                entity.ToTable("pst.Материалы_в_Эксплуатации");

                entity.HasIndex(e => new { e.Hid, e.IdTmc, e.Date, e.TypeSpisId })
                    .HasName("IX_pst.Список_материалов_в_Эксплуатации");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Count).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.DateCreated).HasColumnType("date");

                entity.Property(e => e.Description).HasMaxLength(100);

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.FinId).HasColumnName("FinID");

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.RecIdRashod).HasColumnName("RecID_Rashod");

                entity.Property(e => e.TypeSpisId).HasColumnName("TypeSpisID");

                entity.Property(e => e.НомерТребования).HasColumnName("Номер требования");
            });

            modelBuilder.Entity<PstНомерТнвэдПоставки>(entity =>
            {
                entity.HasKey(e => e.IdТовара)
                    .HasName("PK_Номер_ТНВЭД");

                entity.ToTable("pst.Номер ТНВЭД поставки");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedNever();

                entity.Property(e => e.Percent)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Tnved)
                    .IsRequired()
                    .HasColumnName("TNVED")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<PstОстатокПоСкладуTmp>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.IdСклада, e.IdТовара });

                entity.ToTable("pst_Остаток_по_складу_TMP");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.AllCount).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Place).HasMaxLength(255);

                entity.Property(e => e.Zapas).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.Валюта).HasMaxLength(10);

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<PstОтветственныеПоТоварам>(entity =>
            {
                entity.HasKey(e => new { e.IdТовара, e.Ответственный });

                entity.ToTable("pst_Ответственные_по_товарам", "DATASA");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ответственный).HasMaxLength(50);
            });

            modelBuilder.Entity<PstПерсональныйСписокПозиций>(entity =>
            {
                entity.ToTable("pst.Персональный список позиций");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(50);

                entity.Property(e => e.LastUpdate).HasColumnType("smalldatetime");

                entity.Property(e => e.Template).HasColumnType("xml");

                entity.Property(e => e.TemplateName).HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<PstПодтверждениеСписания>(entity =>
            {
                entity.HasKey(e => new { e.Number, e.FactoryId });

                entity.ToTable("pst.Подтверждение списания");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.DateTime).HasColumnType("datetime");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(150);

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<PstПроверкаПоОтветственным>(entity =>
            {
                entity.ToTable("pst.Проверка_по_ответственным");

                entity.HasIndex(e => new { e.Date, e.ManagerId, e.SkladId })
                    .HasName("IX_pst_Проверка_по_ответственным");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DateFix).HasColumnType("datetime");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.ManagerId).HasColumnName("ManagerID");

                entity.Property(e => e.PlanDate).HasColumnType("datetime");

                entity.Property(e => e.SkladId).HasColumnName("SkladID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<PstРеквизитыФирмДляПоставок>(entity =>
            {
                entity.ToTable("pst.Реквизиты фирм для поставок");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ГрузоотправительДляСф)
                    .HasColumnName("Грузоотправитель для СФ")
                    .HasMaxLength(500);

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<PstРекламацииСписание>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("pst.Рекламации_Списание");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.Recl)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PstСостояниеСкладаПоОтветственным>(entity =>
            {
                entity.ToTable("pst.Состояние_склада_по_ответственным");

                entity.HasIndex(e => new { e.Date, e.IdСклада, e.ManagerId, e.FactoryId, e.ParentId })
                    .HasName("IX_pst.Состояние_склада_по_ответственным");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CountAll).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.CountInU)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CountU).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.EdIzmId).HasColumnName("EdIzmID");

                entity.Property(e => e.FactCountAll).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FactCountU).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ManagerId).HasColumnName("ManagerID");

                entity.Property(e => e.ParentId).HasColumnName("ParentID");
            });

            modelBuilder.Entity<PstСтатусыМатериаловВЭксплуатации>(entity =>
            {
                entity.HasKey(e => e.StatusId);

                entity.ToTable("pst.Статусы_Материалов_в_Эксплуатации");

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<PstТаможенныеРасходы>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("pst.Таможенные расходы");

                entity.Property(e => e.RecordId)
                    .HasColumnName("RecordID")
                    .ValueGeneratedNever();

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdВалютаДопРасходы).HasColumnName("ID Валюта Доп Расходы");

                entity.Property(e => e.IdВалютаДоставка).HasColumnName("ID Валюта Доставка");

                entity.Property(e => e.IdВалютаИнвойса).HasColumnName("ID Валюта инвойса");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID Поставщика");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Percent).HasDefaultValueSql("((100))");

                entity.Property(e => e.PrType).HasColumnName("PR_Type");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ВалютаИнвойса)
                    .HasColumnName("Валюта инвойса")
                    .HasMaxLength(10);

                entity.Property(e => e.Гтд)
                    .IsRequired()
                    .HasColumnName("ГТД")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаДт)
                    .HasColumnName("Дата ДТ")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаКурсаИнвойса)
                    .HasColumnName("Дата курса инвойса")
                    .HasColumnType("date");

                entity.Property(e => e.ДопРасходы)
                    .HasColumnName("Доп расходы")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДопРасходыВВалюте)
                    .HasColumnName("Доп расходы в валюте")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДопРасходыДоля)
                    .HasColumnName("Доп расходы доля")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДопРасходыДоляВВалюте)
                    .HasColumnName("Доп расходы доля в валюте")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Доставка).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоставкаВВалюте)
                    .HasColumnName("Доставка в валюте")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоставкаДоля)
                    .HasColumnName("Доставка доля")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоставкаДоляВВалюте)
                    .HasColumnName("Доставка доля в валюте")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КорНдс)
                    .HasColumnName("Кор НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КорНдсДоля)
                    .HasColumnName("Кор НДС доля")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КорПошлина)
                    .HasColumnName("Кор Пошлина")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КорПошлинаДоля)
                    .HasColumnName("Кор Пошлина доля")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КурсДопРасходы)
                    .HasColumnName("Курс Доп Расходы")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.КурсДоставка)
                    .HasColumnName("Курс Доставка")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.КурсИнвойса)
                    .HasColumnName("Курс инвойса")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НдсДоля)
                    .HasColumnName("НДС доля")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбщаяСтоимость)
                    .HasColumnName("Общая стоимость")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТаможеннаяСтоимость)
                    .HasColumnName("Таможенная стоимость")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТаможеннаяСтоимостьВВалюте)
                    .HasColumnName("Таможенная стоимость в валюте")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТаможенныеПлатежи)
                    .HasColumnName("Таможенные платежи")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТаможенныеПлатежиДоля)
                    .HasColumnName("Таможенные платежи доля")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<PstТоварныеНаправленияПоставки>(entity =>
            {
                entity.ToTable("pst.Товарные направления поставки");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<PstТоварыПоОтветственным>(entity =>
            {
                entity.HasKey(e => new { e.ManagerId, e.IdТовара, e.FactoryId })
                    .HasName("PK_pst.Товары_по_ответственным_1");

                entity.ToTable("pst.Товары_по_ответственным");

                entity.Property(e => e.ManagerId).HasColumnName("ManagerID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");
            });

            modelBuilder.Entity<PstФормыЗначенияПоУмолчанию>(entity =>
            {
                entity.HasKey(e => new { e.FormName, e.UserId, e.ObjectName, e.FactoryId });

                entity.ToTable("pst.Формы_значения_по умолчанию");

                entity.HasIndex(e => e.RecId)
                    .HasName("IX_pst.Формы_значения_по умолчанию");

                entity.Property(e => e.FormName).HasMaxLength(100);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ObjectName).HasMaxLength(100);

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.DefValue).HasMaxLength(150);

                entity.Property(e => e.RecId)
                    .HasColumnName("RecID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<RecIds>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("RecIDs#");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ReportParams>(entity =>
            {
                entity.HasKey(e => new { e.ParamName, e.ReportId })
                    .HasName("PK_ReportParams_1");

                entity.Property(e => e.ParamName).HasMaxLength(50);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ReportQueries>(entity =>
            {
                entity.HasKey(e => new { e.QueryId, e.ReportId });

                entity.HasIndex(e => e.QueryId)
                    .HasName("IX_ReportQueries");

                entity.Property(e => e.QueryId)
                    .HasColumnName("QueryID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.DetailQueryId).HasColumnName("DetailQueryID");

                entity.Property(e => e.ExcelRange).HasMaxLength(50);

                entity.Property(e => e.KeyId)
                    .HasColumnName("KeyID")
                    .HasMaxLength(255);

                entity.Property(e => e.QueryName).HasMaxLength(50);
            });

            modelBuilder.Entity<Reports>(entity =>
            {
                entity.HasKey(e => e.ReportId);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.FileName).HasMaxLength(150);

                entity.Property(e => e.ReportName).HasMaxLength(150);

                entity.Property(e => e.ReportPath).HasMaxLength(150);
            });

            modelBuilder.Entity<Results>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.SumOfКоличество).HasDefaultValueSql("(0)");

                entity.Property(e => e.Разница).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ScanerLog>(entity =>
            {
                entity.ToTable("Scaner_Log");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<SebestoimostKomplekta>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sebestoimost komplekta");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrБезНдс).HasColumnName("SSR_без_НДС");

                entity.Property(e => e.Цп).HasColumnName("ЦП");
            });

            modelBuilder.Entity<TPrice>(entity =>
            {
                entity.HasKey(e => e.Артикул)
                    .HasName("PK_tPrice_1");

                entity.ToTable("tPrice", "DATASA");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.FobЗмк)
                    .HasColumnName("FOB_ЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FobУзмк)
                    .HasColumnName("FOB_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Наименование).HasMaxLength(550);

                entity.Property(e => e.СсЗмк)
                    .HasColumnName("СС_ЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СсУзмк)
                    .HasColumnName("СС_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_Сосенки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦпУзмк)
                    .HasColumnName("ЦП_УЗМК")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Table1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Table_1");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Table_1_2")
                    .IsUnique();

                entity.HasIndex(e => e.НомерСертификата)
                    .HasName("IX_Table_1_3")
                    .IsUnique();

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdМодели)
                    .HasColumnName("ID модели")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДатаРегистрации)
                    .HasColumnName("Дата регистрации")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСертификата)
                    .HasColumnName("Дата сертификата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КтоВнес).HasColumnName("Кто внес");

                entity.Property(e => e.НомерСертификата)
                    .HasColumnName("Номер сертификата")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Table2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Table_2");

                entity.Property(e => e.Yyy)
                    .HasColumnName("yyy")
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<TableForFiles>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_TableForFiles")
                    .IsUnique();

                entity.Property(e => e.Art)
                    .HasColumnName("art")
                    .HasMaxLength(50);

                entity.Property(e => e.ArtKl)
                    .HasColumnName("art_kl")
                    .HasMaxLength(50);

                entity.Property(e => e.Foto)
                    .HasColumnName("foto")
                    .HasColumnType("image");

                entity.Property(e => e.Kol)
                    .HasColumnName("kol")
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasColumnName("name")
                    .HasMaxLength(255);

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Skl).HasColumnName("skl");

                entity.Property(e => e.Userid).HasColumnName("userid");
            });

            modelBuilder.Entity<TableForFilesTender>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_TableForFilesTender")
                    .IsUnique();

                entity.Property(e => e.Etp)
                    .HasColumnName("etp")
                    .HasMaxLength(255);

                entity.Property(e => e.Fz)
                    .HasColumnName("fz")
                    .HasMaxLength(10);

                entity.Property(e => e.Kon)
                    .HasColumnName("kon")
                    .HasMaxLength(50);

                entity.Property(e => e.Nck)
                    .HasColumnName("nck")
                    .HasMaxLength(50);

                entity.Property(e => e.Nom)
                    .HasColumnName("nom")
                    .HasMaxLength(50);

                entity.Property(e => e.Prov)
                    .HasColumnName("prov")
                    .HasMaxLength(50);

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Region)
                    .HasColumnName("region")
                    .HasMaxLength(255);

                entity.Property(e => e.Sposob)
                    .HasColumnName("sposob")
                    .HasMaxLength(255);

                entity.Property(e => e.Ssylka)
                    .HasColumnName("ssylka")
                    .HasMaxLength(255);

                entity.Property(e => e.Tip).HasColumnName("tip");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Zakazczik).HasColumnName("zakazczik");
            });

            modelBuilder.Entity<TbhOrderStatuses>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbh_OrderStatuses");

                entity.HasIndex(e => e.OrderStatusId)
                    .HasName("IX_tbh_OrderStatuses")
                    .IsUnique();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.OrderStatusId).HasColumnName("OrderStatusID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<TbhPoisk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbh_poisk");

                entity.HasIndex(e => e.UserName)
                    .HasName("IX_tbh_poisk")
                    .IsUnique();

                entity.Property(e => e.UserName)
                    .HasColumnName("User_name")
                    .HasMaxLength(50);

                entity.Property(e => e.Найти).HasMaxLength(150);

                entity.Property(e => e.ЦеныПоказать)
                    .HasColumnName("Цены_показать")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TbhPollOptions>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbh_PollOptions");

                entity.HasIndex(e => e.OptionId)
                    .HasName("IX_tbh_PollsOptions")
                    .IsUnique();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.AddedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.OptionId).HasColumnName("OptionID");

                entity.Property(e => e.OptionText)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.PollId).HasColumnName("PollID");
            });

            modelBuilder.Entity<TbhPolls>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbh_Polls");

                entity.HasIndex(e => e.PollId)
                    .HasName("IX_Polls")
                    .IsUnique();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.AddedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ArchivedDate).HasColumnType("datetime");

                entity.Property(e => e.PollId).HasColumnName("PollID");

                entity.Property(e => e.QuestionText)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<TbhProducts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbh_Products");

                entity.HasIndex(e => e.ProductId)
                    .HasName("IX_tbh_Products")
                    .IsUnique();

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.UnitsInStock).HasColumnType("decimal(15, 2)");
            });

            modelBuilder.Entity<TbhShippingMethods>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tbh_ShippingMethods");

                entity.HasIndex(e => e.ShippingMethodId)
                    .HasName("IX_tbh_ShippingMethods")
                    .IsUnique();

                entity.Property(e => e.AddedBy)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<TestChert>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("test_chert");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_test_chert")
                    .IsUnique();

                entity.Property(e => e.Immm)
                    .HasColumnName("immm")
                    .HasMaxLength(50);

                entity.Property(e => e.Innn).HasColumnName("innn");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ЧертежBin).HasColumnName("Чертеж_bin");
            });

            modelBuilder.Entity<TestЗаявкиОтДилеровПоставки>(entity =>
            {
                entity.HasKey(e => e.Номер);

                entity.ToTable("TEST_Заявки от дилеров поставки");

                entity.Property(e => e.Номер).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.CurrentEditUserId).HasColumnName("CurrentEditUserID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВалюты).HasColumnName("ID Валюты");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОперации).HasColumnName("ID операции");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((11))");

                entity.Property(e => e.IdЮрЛица).HasColumnName("ID ЮрЛица");

                entity.Property(e => e.InsideNbr).HasMaxLength(50);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Вес).HasDefaultValueSql("((0))");

                entity.Property(e => e.ВидОплаты)
                    .HasColumnName("Вид оплаты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаПодтверждения)
                    .HasColumnName("Дата подтверждения")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПечатный)
                    .HasColumnName("Номер_печатный")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерСф)
                    .HasColumnName("Номер СФ")
                    .HasMaxLength(50);

                entity.Property(e => e.Объем)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ответственные).HasMaxLength(100);

                entity.Property(e => e.Отсрочка).HasDefaultValueSql("((0))");

                entity.Property(e => e.СтатусЗаказа).HasColumnName("Статус заказа");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ФирмаПлательщик).HasColumnName("Фирма_Плательщик");
            });

            modelBuilder.Entity<TestПриходТовараПоставки>(entity =>
            {
                entity.HasKey(e => new { e.IdСклада, e.IdТовара, e.Партия });

                entity.ToTable("TEST_Приход товара поставки");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.AnalogId)
                    .HasColumnName("AnalogID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bkid)
                    .HasColumnName("BKID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BkuserId).HasColumnName("BKUserID");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВнутреннейЗаявки).HasColumnName("ID Внутренней Заявки");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId)
                    .HasColumnName("АвтоСписаниеID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ВсегоПоДоговору)
                    .HasColumnName("Всего_по_договору")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Грузоотправитель).HasDefaultValueSql("((0))");

                entity.Property(e => e.Грузополучатель).HasDefaultValueSql("((11))");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(20);

                entity.Property(e => e.Доставка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Итого).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЗаказе)
                    .HasColumnName("Количество в заказе")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерДт)
                    .HasColumnName("Номер ДТ")
                    .HasMaxLength(40);

                entity.Property(e => e.Ордер).HasMaxLength(20);

                entity.Property(e => e.Рекламация).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПоДоговору)
                    .HasColumnName("Цена_по_договору")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Юрлицо).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TestПрогноз>(entity =>
            {
                entity.ToTable("Test_Прогноз");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(50);

                entity.Property(e => e.Pdr)
                    .HasColumnName("PDR")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<TestПрогнозHeader>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Pdr, e.UserId });

                entity.ToTable("Test_Прогноз_Header");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Pdr)
                    .HasColumnName("PDR")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ArticulTo)
                    .IsRequired()
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(50);

                entity.Property(e => e.EdIzm).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .HasMaxLength(1000)
                    .IsFixedLength();
            });

            modelBuilder.Entity<TestПрогнозSafe>(entity =>
            {
                entity.ToTable("Test_Прогноз_Safe");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ArticulSafe).HasMaxLength(50);

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(50);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Kol).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.Smonth1).HasColumnName("SMonth1");

                entity.Property(e => e.Smonth2).HasColumnName("SMonth2");

                entity.Property(e => e.Smonth3).HasColumnName("SMonth3");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<TestРасходТовараПоставки>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("TEST_Расход товара поставки");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AnalogId).HasColumnName("AnalogID");

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdСкладКуда).HasColumnName("ID Склад_Куда");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TovDirId).HasColumnName("TovDirID");

                entity.Property(e => e.TypeSpisId).HasColumnName("TypeSpisID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId)
                    .HasColumnName("АвтоСписаниеID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВСчетеToDelete)
                    .HasColumnName("Количество в счете_to_Delete")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоКОплатеToDelete)
                    .HasColumnName("Количество к оплате_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КоличествоОплаченноеToDelete)
                    .HasColumnName("Количество оплаченное_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КомплектRecId).HasColumnName("Комплект_RecID");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки)
                    .HasColumnName("Обоснование блокировки")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ПостРас).HasColumnName("Пост_рас");

                entity.Property(e => e.Префикс).HasDefaultValueSql("((0))");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasDefaultValueSql("((9))");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.TestПриходТовараПоставки)
                    .WithMany(p => p.TestРасходТовараПоставки)
                    .HasForeignKey(d => new { d.IdСклада, d.IdТовара, d.Партия })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TEST_Расход товара поставки_Приход товара поставки1");
            });

            modelBuilder.Entity<TmcIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMC_IN");

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(11);

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Итого).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЗаказе)
                    .HasColumnName("Количество в заказе")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Ордер).HasMaxLength(11);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Tmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP");

                entity.Property(e => e.Art).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.S).HasMaxLength(50);
            });

            modelBuilder.Entity<TmpP>(entity =>
            {
                entity.HasKey(e => new { e.Площадка, e.Id });

                entity.ToTable("TMP_P");

                entity.Property(e => e.Площадка).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(550);
            });

            modelBuilder.Entity<TmpPrice>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("TMP_Price");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceAprel)
                    .HasColumnName("Price_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceSpec)
                    .HasColumnName("Price_spec")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmk)
                    .HasColumnName("Price_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.PriceUzmkAprel)
                    .HasColumnName("Price_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SafeId).HasColumnName("Safe ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrAprel)
                    .HasColumnName("SSR_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmkAprel)
                    .HasColumnName("SSR_UZMK_aprel")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаУзмкСейф)
                    .HasColumnName("Цена_УЗМК_СЕЙФ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦеныFobРуб)
                    .HasColumnName("Цены_FOB_руб")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<TreeПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Tree поставки");

                entity.Property(e => e.CodeTmc)
                    .HasColumnName("CodeTMC")
                    .HasMaxLength(2);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(20);

                entity.Property(e => e.Name).HasMaxLength(4000);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(20);

                entity.Property(e => e.SearchId).HasColumnName("SearchID");
            });

            modelBuilder.Entity<Tt>(entity =>
            {
                entity.HasKey(e => e.RecId);

                entity.ToTable("TT");

                entity.Property(e => e.RecId)
                    .HasColumnName("RecID")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<Tula>(entity =>
            {
                entity.HasKey(e => e.Articul);

                entity.ToTable("Tula", "Dobromyslov");

                entity.Property(e => e.Articul).HasMaxLength(50);

                entity.Property(e => e.Category).HasMaxLength(350);

                entity.Property(e => e.Group).HasMaxLength(350);

                entity.Property(e => e.SubGroup).HasMaxLength(350);
            });

            modelBuilder.Entity<UlTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ul_tmp");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_ul_tmp_1");

                entity.HasIndex(e => new { e.Id, e.Группа, e.Подгруппа, e.Регион })
                    .HasName("IX_ul_tmp")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);
            });

            modelBuilder.Entity<VPrognoz1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognoz1");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Smonth4)
                    .HasColumnName("SMonth4")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Sweek1)
                    .HasColumnName("SWeek1")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Sweek2)
                    .HasColumnName("SWeek2")
                    .HasColumnType("decimal(38, 8)");
            });

            modelBuilder.Entity<VPrognozAsup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognozASUP");

                entity.Property(e => e.IdRec).ValueGeneratedOnAdd();

                entity.Property(e => e.Kol).HasColumnType("numeric(10, 4)");
            });

            modelBuilder.Entity<VPrognozNew1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognoz_New1");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Tp).HasColumnName("TP");
            });

            modelBuilder.Entity<VPrognozNewOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognoz_New_OLD");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth4)
                    .HasColumnName("SMonth4")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Sweek1)
                    .HasColumnName("SWeek1")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Sweek2)
                    .HasColumnName("SWeek2")
                    .HasColumnType("numeric(38, 8)");
            });

            modelBuilder.Entity<VPrognozPr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognoz_PR");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Tp).HasColumnName("TP");
            });

            modelBuilder.Entity<VPrognozSafe1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognozSafe1");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Koeff1C).HasColumnType("decimal(18, 6)");

                entity.Property(e => e.Kol).HasColumnType("decimal(29, 10)");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth4)
                    .HasColumnName("SMonth4")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Sweek1)
                    .HasColumnName("SWeek1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Sweek2)
                    .HasColumnName("SWeek2")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<VPrognozSafeNewOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognozSafe_NEW_OLD");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth4)
                    .HasColumnName("SMonth4")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Sweek1)
                    .HasColumnName("SWeek1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Sweek2)
                    .HasColumnName("SWeek2")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<VPrognozSafePr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognozSafe_PR");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdTmcPost).HasColumnName("ID_TMC_POST");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Tp).HasColumnName("TP");
            });

            modelBuilder.Entity<VPrognozSafeTo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognozSafe_TO");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdTmcPost).HasColumnName("ID_TMC_POST");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("numeric(10, 4)");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Tp).HasColumnName("TP");
            });

            modelBuilder.Entity<VPrognozTo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vPrognoz_TO");

                entity.Property(e => e.ArticulTo)
                    .HasColumnName("ArticulTO")
                    .HasMaxLength(25);

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("numeric(38, 8)");

                entity.Property(e => e.Tp).HasColumnName("TP");
            });

            modelBuilder.Entity<Vedomo>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VEDOMO");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VEDOMO111_1")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.Мтк)
                    .HasColumnName("МТК")
                    .HasMaxLength(50);

                entity.Property(e => e.Отдел).HasMaxLength(20);

                entity.Property(e => e.Отсрочка).HasMaxLength(10);

                entity.Property(e => e.Посредник).HasMaxLength(10);

                entity.Property(e => e.Скидка).HasMaxLength(10);

                entity.Property(e => e.Сумма)
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма дол")
                    .HasColumnType("numeric(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<Vgazmtk>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VGAZMTK");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VGAZMTK")
                    .IsUnique();

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Готово)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ОбработаноФилиалом)
                    .IsRequired()
                    .HasColumnName("Обработано филиалом")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенесено)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<View1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_1");

                entity.Property(e => e.Name1)
                    .HasColumnName("name1")
                    .HasMaxLength(255);

                entity.Property(e => e.Name2)
                    .HasColumnName("name2")
                    .HasMaxLength(255);

                entity.Property(e => e.Name3)
                    .HasColumnName("name3")
                    .HasMaxLength(255);

                entity.Property(e => e.Name4)
                    .HasColumnName("name4")
                    .HasMaxLength(255);

                entity.Property(e => e.Name5)
                    .HasColumnName("name5")
                    .HasMaxLength(255);

                entity.Property(e => e.Name6)
                    .HasColumnName("name6")
                    .HasMaxLength(255);

                entity.Property(e => e.Name7)
                    .IsRequired()
                    .HasColumnName("name7")
                    .HasMaxLength(255);

                entity.Property(e => e.NodeLevelSt)
                    .IsRequired()
                    .HasColumnName("NodeLevel_st")
                    .HasMaxLength(8);
            });

            modelBuilder.Entity<View2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_2");

                entity.Property(e => e.AddedDate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.DepartmentTitle).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(20);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Sku111).HasColumnName("SKU111");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UnitsInStock).HasMaxLength(30);
            });

            modelBuilder.Entity<View3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_3");

                entity.Property(e => e.AddedDate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.DepartmentTitle).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(20);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Sku).HasColumnName("SKU");

                entity.Property(e => e.Sku111).HasColumnName("SKU111");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UnitsInStock).HasMaxLength(30);
            });

            modelBuilder.Entity<View4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_4");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<View5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_5");

                entity.Property(e => e.AddedDate)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.DepartmentTitle).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(20);

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Sku).HasColumnName("SKU");

                entity.Property(e => e.Sku111).HasColumnName("SKU111");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UnitsInStock).HasMaxLength(30);
            });

            modelBuilder.Entity<View6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_6");

                entity.Property(e => e.Expr10).HasMaxLength(50);

                entity.Property(e => e.Expr11)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr12)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr13)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr14)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr15)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr16)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr17)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr18)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr19)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr20)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr21)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr22)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Expr23)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr24)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr25)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr26)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr27)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr28)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr29)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr30)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Expr31)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr32).HasMaxLength(7);

                entity.Property(e => e.Expr33).HasMaxLength(255);

                entity.Property(e => e.Expr34)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr35)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr36).HasMaxLength(10);

                entity.Property(e => e.Expr37)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr38)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr39).HasMaxLength(255);

                entity.Property(e => e.Expr4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr40)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr41)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr42)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr43)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr44).HasMaxLength(25);

                entity.Property(e => e.Expr5)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr6)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr7)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr8)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr9)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.Итого).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<View7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_7");

                entity.Property(e => e.Adrespok)
                    .HasColumnName("adrespok")
                    .HasMaxLength(427);

                entity.Property(e => e.Adresprod)
                    .HasColumnName("adresprod")
                    .HasMaxLength(255);

                entity.Property(e => e.Bux)
                    .HasColumnName("bux")
                    .HasMaxLength(50);

                entity.Property(e => e.Dan)
                    .HasColumnName("dan")
                    .HasMaxLength(75);

                entity.Property(e => e.Dat)
                    .HasColumnName("dat")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dol1)
                    .IsRequired()
                    .HasColumnName("dol1")
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.Fio1)
                    .HasColumnName("fio1")
                    .HasMaxLength(50);

                entity.Property(e => e.Fio2)
                    .HasColumnName("fio2")
                    .HasMaxLength(50);

                entity.Property(e => e.Gruzop)
                    .HasColumnName("gruzop")
                    .HasMaxLength(255);

                entity.Property(e => e.Gruzotp)
                    .HasColumnName("gruzotp")
                    .HasMaxLength(255);

                entity.Property(e => e.Ident)
                    .HasColumnName("ident")
                    .HasMaxLength(50);

                entity.Property(e => e.Innpok)
                    .HasColumnName("innpok")
                    .HasMaxLength(511);

                entity.Property(e => e.Innprod)
                    .HasColumnName("innprod")
                    .HasMaxLength(511);

                entity.Property(e => e.My)
                    .HasColumnName("my")
                    .HasMaxLength(111);

                entity.Property(e => e.Nom)
                    .HasColumnName("nom")
                    .HasMaxLength(255);

                entity.Property(e => e.Oni)
                    .HasColumnName("oni")
                    .HasMaxLength(316);

                entity.Property(e => e.Osnov)
                    .HasColumnName("osnov")
                    .HasMaxLength(413);

                entity.Property(e => e.Pok)
                    .HasColumnName("pok")
                    .HasMaxLength(255);

                entity.Property(e => e.Prik)
                    .HasColumnName("prik")
                    .HasMaxLength(767);

                entity.Property(e => e.Prim)
                    .HasColumnName("prim")
                    .HasMaxLength(90);

                entity.Property(e => e.Prod)
                    .HasColumnName("prod")
                    .HasMaxLength(255);

                entity.Property(e => e.Ruk)
                    .HasColumnName("ruk")
                    .HasMaxLength(50);

                entity.Property(e => e.Sved)
                    .HasColumnName("sved")
                    .HasMaxLength(273);

                entity.Property(e => e.Valuta)
                    .IsRequired()
                    .HasColumnName("valuta")
                    .HasMaxLength(22)
                    .IsUnicode(false);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<View8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_8");

                entity.Property(e => e.Expr10).HasMaxLength(50);

                entity.Property(e => e.Expr11)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr12)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr13)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr14)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr15)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr16)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr17)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr18)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr19)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr20)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr21)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr22)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Expr23)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr24)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr25)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr26)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr27)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr28)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr29)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr30)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Expr31)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr32).HasMaxLength(7);

                entity.Property(e => e.Expr33).HasMaxLength(255);

                entity.Property(e => e.Expr34)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr35)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr36).HasMaxLength(10);

                entity.Property(e => e.Expr37)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr38)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr39).HasMaxLength(255);

                entity.Property(e => e.Expr4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr40)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr41)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr42)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr43)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr44).HasMaxLength(25);

                entity.Property(e => e.Expr5)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr6)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr7)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr8)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr9)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Итого).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Кодвидатовара)
                    .HasColumnName("кодвидатовара")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<Vozv>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VOZV");

                entity.HasIndex(e => new { e.ДатаВывоза, e.UserId, e.Основание, e.НомерНакл, e.СуммаОтгр })
                    .HasName("IX_VOZV")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Основание)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<VozvP>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VOZV_P");

                entity.HasIndex(e => new { e.ДатаВывоза, e.Основание, e.UserId, e.НомерНакл, e.СуммаОтгр })
                    .HasName("IX_VOZV_P")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Основание)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<VozvPDilVse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VOZV_P_dil_vse");

                entity.HasIndex(e => new { e.IdДилера, e.IdЮрлица, e.UserId })
                    .HasName("IX_VOZV_P_dil_vse")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<VwAspnetApplication>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Application");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredApplicationName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetMembershipUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_MembershipUsers");

                entity.Property(e => e.Comment).HasColumnType("ntext");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");

                entity.Property(e => e.LastLoginDate).HasColumnType("datetime");

                entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredEmail).HasMaxLength(256);

                entity.Property(e => e.MobileAlias).HasMaxLength(16);

                entity.Property(e => e.MobilePin)
                    .HasColumnName("MobilePIN")
                    .HasMaxLength(16);

                entity.Property(e => e.PasswordAnswer).HasMaxLength(128);

                entity.Property(e => e.PasswordQuestion).HasMaxLength(256);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetProfiles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Profiles");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAspnetRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Roles");

                entity.Property(e => e.Description).HasMaxLength(256);

                entity.Property(e => e.LoweredRoleName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetUsers>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_Users");

                entity.Property(e => e.LastActivityDate).HasColumnType("datetime");

                entity.Property(e => e.LoweredUserName)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.MobileAlias).HasMaxLength(16);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetUsersInRoles>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_UsersInRoles");
            });

            modelBuilder.Entity<VwAspnetWebPartStatePaths>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_WebPartState_Paths");

                entity.Property(e => e.LoweredPath)
                    .IsRequired()
                    .HasMaxLength(256);

                entity.Property(e => e.Path)
                    .IsRequired()
                    .HasMaxLength(256);
            });

            modelBuilder.Entity<VwAspnetWebPartStateShared>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_WebPartState_Shared");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<VwAspnetWebPartStateUser>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vw_aspnet_WebPartState_User");

                entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Vypgaz>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VYPGAZ");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VYPGAZ")
                    .IsUnique();

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Готово)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ГотовоФил)
                    .HasColumnName("Готово_Фил")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерФилиальный)
                    .HasColumnName("Номер филиальный")
                    .HasMaxLength(20);

                entity.Property(e => e.ОбработаноФилиалом)
                    .IsRequired()
                    .HasColumnName("Обработано филиалом")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенесено)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<Vypgazarch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VYPGAZARCH");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VYPGAZARCH")
                    .IsUnique();

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Готово)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ГотовоФил)
                    .HasColumnName("Готово_Фил")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерФилиальный)
                    .HasColumnName("Номер филиальный")
                    .HasMaxLength(20);

                entity.Property(e => e.ОбработаноФилиалом)
                    .IsRequired()
                    .HasColumnName("Обработано филиалом")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенесено)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<Vypiski>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VYPISKI");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VYPISKI")
                    .IsUnique();

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Готово)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенесено)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<Vypprom>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VYPPROM");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VYPPROM")
                    .IsUnique();

                entity.HasIndex(e => new { e.НомерПп, e.ДатаПол, e.Сумма, e.Фирма })
                    .HasName("IX_VYPPROM_1")
                    .IsUnique();

                entity.Property(e => e.IdДилераПлат)
                    .HasColumnName("ID дилера_плат")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ГотовоФил)
                    .HasColumnName("Готово_Фил")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.ИннПолуч)
                    .HasColumnName("ИНН получ")
                    .HasMaxLength(12);

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерФилиальный)
                    .HasColumnName("Номер филиальный")
                    .HasMaxLength(20);

                entity.Property(e => e.ОбработаноФилиалом).HasColumnName("Обработано филиалом");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<Vypraif>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VYPRAIF");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VYPRAIF")
                    .IsUnique();

                entity.HasIndex(e => new { e.НомерПп, e.ДатаПол, e.Сумма })
                    .HasName("IX_VYPRAIF_1")
                    .IsUnique();

                entity.Property(e => e.IdДилераПлат)
                    .HasColumnName("ID дилера_плат")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Готово)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ГотовоФил)
                    .HasColumnName("Готово_Фил")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.ИннПолуч)
                    .HasColumnName("ИНН получ")
                    .HasMaxLength(12);

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерФилиальный)
                    .HasColumnName("Номер филиальный")
                    .HasMaxLength(20);

                entity.Property(e => e.ОбработаноФилиалом)
                    .IsRequired()
                    .HasColumnName("Обработано филиалом")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенесено)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<Vypraifarch>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VYPRAIFARCH");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_VYPRAIFARCH")
                    .IsUnique();

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Готово)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ГотовоФил)
                    .HasColumnName("Готово_Фил")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерФилиальный)
                    .HasColumnName("Номер филиальный")
                    .HasMaxLength(20);

                entity.Property(e => e.ОбработаноФилиалом)
                    .IsRequired()
                    .HasColumnName("Обработано филиалом")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенесено)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<Vyst>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("VYST");

                entity.HasIndex(e => new { e.Накладная, e.UserId, e.КодЗаказа, e.ДатаВывоза })
                    .HasName("IX_VYST")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.Накладная1)
                    .HasColumnName("Накладная_")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.СуммаЗаказа)
                    .HasColumnName("Сумма заказа")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<VВсеСборкиAsup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vВсе_сборки_ASUP");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.AsVvod)
                    .HasColumnName("AS_VVOD")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.AsVyvod)
                    .HasColumnName("AS_VYVOD")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Det)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("decimal(10, 6)");

                entity.Property(e => e.Lit)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.NamDoc)
                    .HasColumnName("NAM_DOC")
                    .HasMaxLength(60)
                    .IsUnicode(false);

                entity.Property(e => e.PerentDet)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VГоловныеСборки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vГоловные_сборки");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(30);

                entity.Property(e => e.Det)
                    .HasColumnName("DET")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<VПрогнозПроизводство>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Прогноз_Производство");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<VПрогнозТо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Прогноз_ТО");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Smonth1)
                    .HasColumnName("SMonth1")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth2)
                    .HasColumnName("SMonth2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Smonth3)
                    .HasColumnName("SMonth3")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<WarehousePlace>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("PK_Warehouse_Place_1")
                    .IsClustered(false);

                entity.ToTable("Warehouse_Place");

                entity.HasIndex(e => new { e.IdТовара, e.Полка, e.Стелаж, e.Этаж, e.FactoryId })
                    .HasName("IX_Warehouse_Place")
                    .IsClustered();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Оборудование).HasMaxLength(50);

                entity.Property(e => e.Полка).HasMaxLength(50);

                entity.Property(e => e.Стелаж).HasMaxLength(10);

                entity.Property(e => e.Этаж).HasMaxLength(50);
            });

            modelBuilder.Entity<ZakFileList>(entity =>
            {
                entity.ToTable("zak.FileList");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Destination).HasMaxLength(500);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<ZakMaxТекущаяМощностьУчастков>(entity =>
            {
                entity.HasKey(e => e.Uid);

                entity.ToTable("zak.Max_Текущая_мощность_участков");

                entity.Property(e => e.Uid)
                    .HasColumnName("UID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EditDate).HasColumnType("date");
            });

            modelBuilder.Entity<ZakPlanArt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Zak.PlanArt");

                entity.HasIndex(e => new { e.IdIzgot, e.Year, e.Month, e.Articul, e.DopCod })
                    .HasName("IX_Zak.PlanArt")
                    .IsUnique();

                entity.Property(e => e.Articul)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsFixedLength();

                entity.Property(e => e.Bai)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DateIzm).HasColumnType("datetime");

                entity.Property(e => e.DopCod)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.KolZak).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ZakPlanMat>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Zak.PlanMat");

                entity.HasIndex(e => new { e.IdIzgot, e.Year, e.Month, e.Det, e.Mat })
                    .HasName("IX_Zak.PlanMat")
                    .IsUnique();

                entity.Property(e => e.Bai)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.DateIzm).HasColumnType("datetime");

                entity.Property(e => e.Det)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.EdIzm)
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.Kod1C)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Koeff1C)
                    .HasColumnType("numeric(18, 6)")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Kol)
                    .HasColumnType("numeric(10, 4)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Litera)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Mat)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ZakStNSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ZAK_ST_n_sub");

                entity.Property(e => e.NSub)
                    .HasColumnName("N_SUB")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Prizn)
                    .HasColumnName("PRIZN")
                    .HasColumnType("decimal(1, 0)");
            });

            modelBuilder.Entity<ZakЗаказыУчастковПоДням>(entity =>
            {
                entity.HasKey(e => new { e.ZakId, e.Date, e.Uid });

                entity.ToTable("zak.Заказы_участков_по_дням");

                entity.Property(e => e.ZakId).HasColumnName("ZakID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Uid).HasColumnName("UID");
            });

            modelBuilder.Entity<ZakМощностьОстаток>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Zak_мощность_остаток");

                entity.Property(e => e.Group)
                    .HasColumnName("GROUP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityProducedDay).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<ZakМощностьУчастковПоДням>(entity =>
            {
                entity.HasKey(e => new { e.Uid, e.Date })
                    .HasName("PK_zak.Мощность_по_учасков_по_дням");

                entity.ToTable("zak.Мощность_участков_по_дням");

                entity.Property(e => e.Uid).HasColumnName("UID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.EditDate).HasColumnType("date");

                entity.Property(e => e.EditUserId).HasColumnName("EditUserID");
            });

            modelBuilder.Entity<ZakПроцентРезервированияМощностиУчастков>(entity =>
            {
                entity.HasKey(e => e.Uid);

                entity.ToTable("zak.Процент_резервирования_мощности_участков");

                entity.Property(e => e.Uid)
                    .HasColumnName("UID")
                    .ValueGeneratedNever();

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EditDate).HasColumnType("date");

                entity.Property(e => e.Percent).HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<ZakСдано>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Zak_Сдано");

                entity.Property(e => e.Накл).HasMaxLength(50);

                entity.Property(e => e.Сдано).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ZakСданоIdТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Zak_Сдано_id_товара");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(50);

                entity.Property(e => e.Expr1)
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Group)
                    .HasColumnName("GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.Idizgot).HasColumnName("IDIZGOT");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.QuantityProducedDay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Накл).HasMaxLength(50);

                entity.Property(e => e.Сдано).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ZakСданоПоЗаказам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Zak_сдано_по_заказам");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.Group)
                    .HasColumnName("GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.NSub)
                    .HasColumnName("N_SUB")
                    .HasMaxLength(50);

                entity.Property(e => e.QuantityProducedDay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Сдано).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<АдресаРассылки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Адреса рассылки");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Адреса рассылки")
                    .IsUnique();

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Адреса рассылки_1")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Емайл).HasMaxLength(255);

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<АдресаЯчеек>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Адреса ячеек");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Адреса ячеек")
                    .IsUnique();

                entity.HasIndex(e => e.Адрес)
                    .HasName("IX_Адреса ячеек_1")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.ШтрихКод).HasMaxLength(15);
            });

            modelBuilder.Entity<АдресаЯчеекBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Адреса Ячеек BG");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Адреса Ячеек BG")
                    .IsUnique();

                entity.HasIndex(e => e.Адрес)
                    .HasName("IX_Адреса Ячеек BG_1")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Склад).HasDefaultValueSql("((0))");

                entity.Property(e => e.ШтрихКод).HasMaxLength(15);
            });

            modelBuilder.Entity<АдресаЯчеекАстана>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Адреса ячеек Астана");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Адреса ячеек Астана")
                    .IsUnique();

                entity.HasIndex(e => e.Адрес)
                    .HasName("IX_Адреса ячеек Астана_1")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Склад).HasDefaultValueSql("((0))");

                entity.Property(e => e.ШтрихКод).HasMaxLength(15);
            });

            modelBuilder.Entity<АдресаЯчеекУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Адреса Ячеек УЗМК");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Адреса Ячеек УЗМК")
                    .IsUnique();

                entity.HasIndex(e => new { e.Адрес, e.Регион })
                    .HasName("IX_Адреса Ячеек УЗМК_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.ШтрихКод, e.Регион })
                    .HasName("IX_Адреса Ячеек УЗМК_2")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Склад).HasDefaultValueSql("((0))");

                entity.Property(e => e.ШтрихКод).HasMaxLength(15);
            });

            modelBuilder.Entity<АктСверкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Акт сверки регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПп)
                    .HasColumnName("Дата пп")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолОтгр).HasColumnName("Кол_отгр");

                entity.Property(e => e.КолСпис).HasColumnName("Кол_спис");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Накладная)
                    .HasMaxLength(120)
                    .IsFixedLength();

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.СсОтгр).HasColumnName("СС_отгр");

                entity.Property(e => e.СсСпи).HasColumnName("СС_спи");

                entity.Property(e => e.СуммаОплаты).HasColumnName("Сумма оплаты");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");

                entity.Property(e => e.СуммаРуб1).HasColumnName("Сумма руб1");
            });

            modelBuilder.Entity<АктСписания>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Акт списания");

                entity.Property(e => e.FirstOfДокумент).HasMaxLength(30);

                entity.Property(e => e.MinOfДатаПрихода)
                    .HasColumnName("MinOfДата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Num).HasMaxLength(20);

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ПринятоеРешение)
                    .HasColumnName("Принятое решение")
                    .HasMaxLength(255);

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Распор).HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<АктСписанияДляЗаявки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Акт списания для заявки");

                entity.Property(e => e.FirstOfДокумент).HasMaxLength(30);

                entity.Property(e => e.MinOfДатаПрихода)
                    .HasColumnName("MinOfДата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Распор).HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Амортизация>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Код1)
                    .HasName("IX_Амортизация")
                    .IsUnique();

                entity.HasIndex(e => new { e.Год, e.Месяц, e.Код })
                    .HasName("IX_Амортизация_1");

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdПодразделения)
                    .HasColumnName("ID подразделения")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗначениеBlg).HasColumnName("ЗначениеBLG");

                entity.Property(e => e.ЗначениеBlgБндс).HasColumnName("ЗначениеBLG_бндс");

                entity.Property(e => e.ЗначениеCим).HasColumnName("ЗначениеCИМ");

                entity.Property(e => e.ЗначениеCимБндс).HasColumnName("ЗначениеCИМ_бндс");

                entity.Property(e => e.ЗначениеDib).HasColumnName("ЗначениеDIB");

                entity.Property(e => e.ЗначениеDibБндс).HasColumnName("ЗначениеDIB_бндс");

                entity.Property(e => e.ЗначениеOae).HasColumnName("ЗначениеOAE");

                entity.Property(e => e.ЗначениеOaeБндс).HasColumnName("ЗначениеOAE_бндс");

                entity.Property(e => e.ЗначениеГрм).HasColumnName("ЗначениеГРМ");

                entity.Property(e => e.ЗначениеГрмБндс).HasColumnName("ЗначениеГРМ_бндс");

                entity.Property(e => e.ЗначениеЗмк).HasColumnName("ЗначениеЗМК");

                entity.Property(e => e.ЗначениеЗмкБндс).HasColumnName("ЗначениеЗМК_бндс");

                entity.Property(e => e.ЗначениеКзх).HasColumnName("ЗначениеКЗХ");

                entity.Property(e => e.ЗначениеКзхБндс).HasColumnName("ЗначениеКЗХ_бндс");

                entity.Property(e => e.ЗначениеКитай).HasColumnName("ЗначениеКИТАЙ");

                entity.Property(e => e.ЗначениеКитайБндс).HasColumnName("ЗначениеКИТАЙ_бндс");

                entity.Property(e => e.ЗначениеМебПрфМа).HasColumnName("ЗначениеМеб_прф_МА");

                entity.Property(e => e.ЗначениеМо).HasColumnName("ЗначениеМО");

                entity.Property(e => e.ЗначениеТпо).HasColumnName("ЗначениеТПО");

                entity.Property(e => e.ЗначениеТпоБндс).HasColumnName("ЗначениеТПО_бндс");

                entity.Property(e => e.Код).HasMaxLength(6);

                entity.Property(e => e.Код1).ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(100);
            });

            modelBuilder.Entity<АмортизацияБаланс>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Амортизация_баланс");

                entity.HasIndex(e => new { e.Фирма, e.Год, e.Месяц })
                    .HasName("IX_Амортизация_баланс")
                    .IsUnique();

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.АвансыВыданные).HasColumnName("Авансы_выданные");

                entity.Property(e => e.ДеньгиВПути).HasColumnName("Деньги_в_пути");

                entity.Property(e => e.КзЗп).HasColumnName("КЗ_ЗП");

                entity.Property(e => e.КзНалоги).HasColumnName("КЗ_налоги");

                entity.Property(e => e.КзПоставщики).HasColumnName("КЗ_поставщики");

                entity.Property(e => e.НалоговыеАктивы).HasColumnName("Налоговые_активы");

                entity.Property(e => e.ТмцАмортизация).HasColumnName("ТМЦ_амортизация");

                entity.Property(e => e.ТмцГотоваяПродукцияDib).HasColumnName("ТМЦ_готовая_продукция_DIB");

                entity.Property(e => e.ТмцОсновныеСредстваНП).HasColumnName("ТМЦ_основные_средства_н_п");

                entity.Property(e => e.ТмцСырье).HasColumnName("ТМЦ_сырье");

                entity.Property(e => e.Ук).HasColumnName("УК");

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<АртикулыАсупТо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Артикулы_АСУП_ТО");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.AsVyvod)
                    .HasColumnName("AS_VYVOD")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Dbenennung)
                    .HasColumnName("DBENENNUNG")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Def).HasColumnName("DEF");

                entity.Property(e => e.DopCod)
                    .HasColumnName("DOP_COD")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Idizgot).HasColumnName("IDIZGOT");

                entity.Property(e => e.Idrec).HasColumnName("IDREC");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nam)
                    .HasColumnName("NAM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Rbenennung)
                    .HasColumnName("RBENENNUNG")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<АртикулыАсупТоКа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Артикулы_АСУП_ТО_ка");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.AsVyvod)
                    .HasColumnName("AS_VYVOD")
                    .HasColumnType("decimal(3, 0)");

                entity.Property(e => e.Dbenennung)
                    .HasColumnName("DBENENNUNG")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Def).HasColumnName("DEF");

                entity.Property(e => e.DopCod)
                    .HasColumnName("DOP_COD")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Idizgot).HasColumnName("IDIZGOT");

                entity.Property(e => e.Idrec).HasColumnName("IDREC");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nam)
                    .HasColumnName("NAM")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Price)
                    .HasColumnName("PRICE")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Rbenennung)
                    .HasColumnName("RBENENNUNG")
                    .HasMaxLength(40)
                    .IsUnicode(false);

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<АртикулыКлиента>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Артикулы клиента");

                entity.HasIndex(e => new { e.IdТовара, e.IdКлиента, e.Регион, e.АртикулКлиента })
                    .HasName("IX_Артикулы клиента")
                    .IsUnique();

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.АртикулКлиента)
                    .HasColumnName("Артикул клиента")
                    .HasMaxLength(15);

                entity.Property(e => e.НаименованиеКлиента)
                    .HasColumnName("Наименование клиента")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<АртикулыМетро>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Артикулы МЕТРО");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Артикулы МЕТРО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.АртикулMgb)
                    .HasColumnName("Артикул MGB")
                    .HasMaxLength(50);

                entity.Property(e => e.АртикулМетро)
                    .HasColumnName("Артикул МЕТРО")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<АсупУчастки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("АСУП_участки");

                entity.Property(e => e.Nam)
                    .IsRequired()
                    .HasColumnName("NAM")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ProductionType)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TimeRatePrice).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<АсупУчасткиУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("АСУП_участки_Узловая");

                entity.Property(e => e.Name).HasMaxLength(60);

                entity.Property(e => e.ProductionType)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false);

                entity.Property(e => e.Section)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.TimeRatePrice).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Unit).HasColumnName("unit");
            });

            modelBuilder.Entity<БазовыеМоделиДверей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Базовые модели Дверей");

                entity.HasIndex(e => e.IdБазы)
                    .HasName("IX_Базовые модели Дверей")
                    .IsUnique();

                entity.HasIndex(e => e.Артикул)
                    .HasName("IX_Базовые модели Дверей_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdКонструкции, e.КодВысоты, e.КодОткрывания, e.КодШирины })
                    .HasName("IX_Базовые модели Дверей_2")
                    .IsUnique();

                entity.Property(e => e.IdБазы).HasColumnName("ID базы");

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Артикул)
                    .IsRequired()
                    .HasMaxLength(11);

                entity.Property(e => e.КодВысоты)
                    .HasColumnName("Код_высоты")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодОткрывания)
                    .HasColumnName("Код_открывания")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.КодШирины)
                    .HasColumnName("Код_ширины")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.ПлощадьМ2)
                    .HasColumnName("Площадь_м2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Цена).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЦенаТрудозатрат)
                    .HasColumnName("Цена_трудозатрат")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЧасыТрудозатрат)
                    .HasColumnName("Часы_трудозатрат")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ШифрСборки)
                    .HasColumnName("Шифр_сборки")
                    .HasMaxLength(40);
            });

            modelBuilder.Entity<БазовыеСкидки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Базовые скидки");

                entity.HasIndex(e => e.IdГруппы)
                    .HasName("IX_Базовые скидки_1")
                    .IsUnique();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Базовые скидки")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Скидка).HasDefaultValueSql("(0)");

                entity.Property(e => e.Скидка10)
                    .HasColumnName("Скидка 10")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Скидка5)
                    .HasColumnName("Скидка 5")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Скидка51)
                    .HasColumnName("Скидка -5")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<БазовыеЭкспортныеЦены>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Базовые экспортные цены");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Базовые экспортные цены")
                    .IsUnique();

                entity.Property(e => e.IdПоставщика)
                    .HasColumnName("ID поставщика")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Price)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Баланс2011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Баланс_2011");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Баланс_2011")
                    .IsUnique();

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.Значение).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерСорт)
                    .HasColumnName("Номер сорт")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Статья)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<Баланс2012>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Баланс_2012");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Баланс_2")
                    .IsUnique();

                entity.HasIndex(e => e.Месяц)
                    .HasName("IX_Баланс_1");

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.ДеньгиВПути).HasColumnName("Деньги_в_пути");

                entity.Property(e => e.ДзКлиента).HasColumnName("ДЗ_клиента");

                entity.Property(e => e.ДзПоставщика).HasColumnName("ДЗ_поставщика");

                entity.Property(e => e.ДивидентыОбъекты).HasColumnName("Дивиденты_объекты");

                entity.Property(e => e.ИнвестииВКрупныеПроекты).HasColumnName("Инвестии_в_крупные_проекты");

                entity.Property(e => e.КзЗп).HasColumnName("КЗ_ЗП");

                entity.Property(e => e.КзКлиента).HasColumnName("КЗ_клиента");

                entity.Property(e => e.КзНалоги).HasColumnName("КЗ_налоги");

                entity.Property(e => e.КзПоставщики).HasColumnName("КЗ_поставщики");

                entity.Property(e => e.НалоговыеАктивы).HasColumnName("Налоговые_активы");

                entity.Property(e => e.НераспределеннаяПрибыль).HasColumnName("Нераспределенная_прибыль");

                entity.Property(e => e.Ниокр).HasColumnName("НИОКР");

                entity.Property(e => e.ТмцГотоваяПродукцияDib).HasColumnName("ТМЦ_готовая_продукция_DIB");

                entity.Property(e => e.ТмцОсновныеСредстваНП).HasColumnName("ТМЦ_основные_средства_н_п");

                entity.Property(e => e.Ук).HasColumnName("УК");
            });

            modelBuilder.Entity<Баланс2013>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Баланс_2013");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Баланс1111_1")
                    .IsUnique();

                entity.HasIndex(e => e.Месяц)
                    .HasName("IX_Баланс1111");

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.ДеньгиВПути).HasColumnName("Деньги_в_пути");

                entity.Property(e => e.ДзКлиента).HasColumnName("ДЗ_клиента");

                entity.Property(e => e.ДзПоставщика).HasColumnName("ДЗ_поставщика");

                entity.Property(e => e.ДивидентыОбъекты).HasColumnName("Дивиденты_объекты");

                entity.Property(e => e.ИнвестииВКрупныеПроекты).HasColumnName("Инвестии_в_крупные_проекты");

                entity.Property(e => e.КзЗп).HasColumnName("КЗ_ЗП");

                entity.Property(e => e.КзКлиента).HasColumnName("КЗ_клиента");

                entity.Property(e => e.КзНалоги).HasColumnName("КЗ_налоги");

                entity.Property(e => e.КзПоставщики).HasColumnName("КЗ_поставщики");

                entity.Property(e => e.НалоговыеАктивы).HasColumnName("Налоговые_активы");

                entity.Property(e => e.НераспределеннаяПрибыль).HasColumnName("Нераспределенная_прибыль");

                entity.Property(e => e.Ниокр).HasColumnName("НИОКР");

                entity.Property(e => e.ТмцГотоваяПродукцияDib).HasColumnName("ТМЦ_готовая_продукция_DIB");

                entity.Property(e => e.ТмцОсновныеСредстваНП).HasColumnName("ТМЦ_основные_средства_н_п");

                entity.Property(e => e.Ук).HasColumnName("УК");
            });

            modelBuilder.Entity<Баланс2014>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Баланс_2014");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Баланс")
                    .IsUnique();

                entity.Property(e => e.Значение).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерСорт)
                    .HasColumnName("Номер сорт")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Статья)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<БалансДеньги2013>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Баланс_деньги_2013");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Баланс_деньги_1")
                    .IsUnique();

                entity.HasIndex(e => e.Фирма)
                    .HasName("IX_Баланс_деньги");

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.Август).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АвгустДол)
                    .HasColumnName("Август_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АпрельДол)
                    .HasColumnName("Апрель_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДекабрьДол)
                    .HasColumnName("Декабрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ИюльДол)
                    .HasColumnName("Июль_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ИюньДол)
                    .HasColumnName("Июнь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Май).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.МайДол)
                    .HasColumnName("Май_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.МартДол)
                    .HasColumnName("Март_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НоябрьДол)
                    .HasColumnName("Ноябрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОктябрьДол)
                    .HasColumnName("Октябрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СентябрьДол)
                    .HasColumnName("Сентябрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Февраль).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ФевральДол)
                    .HasColumnName("Февраль_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Январь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЯнварьДол)
                    .HasColumnName("Январь_дол")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<БалансДеньги2014>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Баланс_деньги_2014");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Баланс_деньги_2014_1")
                    .IsUnique();

                entity.HasIndex(e => e.Фирма)
                    .HasName("IX_Баланс_деньги_2014");

                entity.Property(e => e.Август).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АвгустДол)
                    .HasColumnName("Август_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.АпрельДол)
                    .HasColumnName("Апрель_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДекабрьДол)
                    .HasColumnName("Декабрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ИюльДол)
                    .HasColumnName("Июль_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ИюньДол)
                    .HasColumnName("Июнь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Май).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.МайДол)
                    .HasColumnName("Май_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.МартДол)
                    .HasColumnName("Март_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НоябрьДол)
                    .HasColumnName("Ноябрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОктябрьДол)
                    .HasColumnName("Октябрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СентябрьДол)
                    .HasColumnName("Сентябрь_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Февраль).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ФевральДол)
                    .HasColumnName("Февраль_дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Январь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЯнварьДол)
                    .HasColumnName("Январь_дол")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<БвГазКв>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("бв_ГАЗ_кв");

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.НомерФилиальный)
                    .HasColumnName("Номер филиальный")
                    .HasMaxLength(20);

                entity.Property(e => e.ОбработаноФилиалом).HasColumnName("Обработано филиалом");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.Сумма).HasMaxLength(50);

                entity.Property(e => e.СуммаПп).HasColumnName("Сумма_пп");

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<Блоки>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdБлока)
                    .HasName("IX_Table_1")
                    .IsUnique();

                entity.Property(e => e.IdБлока).HasColumnName("ID блока");

                entity.Property(e => e.Блок)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<БлокиГруппа>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Блоки-группа");

                entity.HasIndex(e => e.IdГруппы)
                    .HasName("IX_Блоки-группа")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Группа)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<БлокиПодгруппа>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Блоки-подгруппа");

                entity.HasIndex(e => e.IdПодгруппы)
                    .HasName("IX_Блоки-подгруппа")
                    .IsUnique();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.Подгруппа)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<БолгарияПриходРасход>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Болгария_Приход_Расход");

                entity.Property(e => e.IdЕдИзм).HasColumnName("ID Ед_изм");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование_BLG")
                    .HasMaxLength(150);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Брони>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Брони")
                    .IsUnique();

                entity.HasIndex(e => new { e.RecordPostavka, e.RecordRashod })
                    .HasName("IX_Брони_1")
                    .IsUnique();

                entity.Property(e => e.Kol).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordPostavka).HasColumnName("Record_postavka");

                entity.Property(e => e.RecordRashod).HasColumnName("Record_rashod");
            });

            modelBuilder.Entity<БрониПлана>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Брони плана");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Брони плана")
                    .IsUnique();

                entity.HasIndex(e => e.RecordPlana)
                    .HasName("IX_Брони плана_1");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordPlana).HasColumnName("Record_plana");

                entity.Property(e => e.Бронь)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.НомерНедели)
                    .HasColumnName("Номер недели")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерРегиона)
                    .HasColumnName("Номер_региона")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РегионЗабронировал)
                    .HasColumnName("Регион_забронировал")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<БрониПланаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Брони плана регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Брони плана регион")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordPlana).HasColumnName("Record_plana");

                entity.Property(e => e.Бронь).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.НомерНедели)
                    .HasColumnName("Номер недели")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерРегиона)
                    .HasColumnName("Номер_региона")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РегионЗабронировал)
                    .HasColumnName("Регион_забронировал")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Валюта>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdВалюты)
                    .HasName("IX_Валюта")
                    .IsUnique();

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Валюта1)
                    .HasColumnName("Валюта")
                    .HasMaxLength(50);

                entity.Property(e => e.КодВалюты)
                    .HasColumnName("Код валюты")
                    .HasMaxLength(15);

                entity.Property(e => e.КурсКДоллару)
                    .HasColumnName("Курс к доллару")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ВводОстаткаПоПлатежке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ввод остатка по платежке");

                entity.Property(e => e.Expr1).HasColumnType("money");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа).HasColumnName("Вид платежа");

                entity.Property(e => e.Время).HasColumnType("smalldatetime");

                entity.Property(e => e.Выражение2).HasColumnType("money");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ВнутренниеЗаявкиВЗаявке>(entity =>
            {
                entity.HasKey(e => new { e.IdЗаявки, e.IdВнутреннейЗаявки });

                entity.ToTable("Внутренние заявки в Заявке");

                entity.Property(e => e.IdЗаявки).HasColumnName("ID заявки");

                entity.Property(e => e.IdВнутреннейЗаявки).HasColumnName("ID Внутренней Заявки");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");
            });

            modelBuilder.Entity<ВнутренниеЗаявкиДеталиПоставки>(entity =>
            {
                entity.HasKey(e => e.Nbr);

                entity.ToTable("Внутренние Заявки Детали поставки");

                entity.HasIndex(e => new { e.Id, e.FactoryId })
                    .HasName("IX_Внутренние Заявки Детали поставки");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Price)
                    .HasColumnType("numeric(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Summa)
                    .HasColumnType("numeric(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Количество).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.НомерЗаявки)
                    .HasColumnName("Номер заявки")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.ВнутренниеЗаявкиПоставки)
                    .WithMany(p => p.ВнутренниеЗаявкиДеталиПоставки)
                    .HasForeignKey(d => new { d.Id, d.FactoryId })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Внутренние Заявки Детали поставки_Внутренние Заявки поставки");
            });

            modelBuilder.Entity<ВнутренниеЗаявкиПоставки>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.FactoryId });

                entity.ToTable("Внутренние Заявки поставки");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdРаботника).HasColumnName("ID работника");

                entity.Property(e => e.IdУчастка).HasColumnName("ID участка");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Пояснение).HasMaxLength(100);
            });

            modelBuilder.Entity<ВозвратГрупДляМз>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ВозвратГруп для МЗ");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.UserId })
                    .HasName("IX_ВозвратГруп для МЗ")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<ВозвратТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Возврат товара");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВозврата)
                    .HasColumnName("Дата возврата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Колво).HasColumnType("decimal(20, 3)");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ВозвратТовараРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Возврат товара регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВозврата)
                    .HasColumnName("Дата возврата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Колво).HasColumnType("decimal(20, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Преф)
                    .HasColumnName("преф")
                    .HasMaxLength(30);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ВозвратныеСтрочки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Возвратные строчки");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<Возвраты>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Возвраты");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<Возвраты1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Возвраты");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ВозвратыПоставкиТолькоУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Возвраты поставки только УЗМК");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Выражение1)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ВозвратыПоставкиУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Возвраты поставки УЗМК");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Выражение1)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ВозвратыТолькоУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Возвраты_только_УЗМК");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ВозвратыУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Возвраты_УЗМК");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ВремяОбработкиДокуметов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Время обработки докуметов");

                entity.Property(e => e.Expr1).HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.ОтгруженаВых)
                    .HasColumnName("Отгружена_вых")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ВремяОбработкиДокуметовСчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Время обработки докуметов счета");

                entity.Property(e => e.Expr1).HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.ОтгруженаВых)
                    .HasColumnName("Отгружена_вых")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ВсеНаСкладеПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Все на складе поставки");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ВсеНаСкладеПоставки1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Все на складе поставки1");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ВсеЮрлица>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Все юрлица");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Kod)
                    .HasColumnName("KOD")
                    .HasMaxLength(23);

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.МаксимальныйКредитR).HasColumnName("Максимальный кредит R");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фил)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ВсеЮрлицаNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Все юрлица_new");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Kod)
                    .HasColumnName("KOD")
                    .HasMaxLength(23);

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.МаксимальныйКредитR).HasColumnName("Максимальный кредит R");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фил)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ВсеЮрлицаГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Все юрлица_групп");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Kod)
                    .HasColumnName("KOD")
                    .HasMaxLength(23);

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.МаксимальныйКредитR).HasColumnName("Максимальный кредит R");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фил)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ВсеЮрлицаГруппNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Все юрлица_групп_new");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Kod)
                    .HasColumnName("KOD")
                    .HasMaxLength(23);

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.МаксимальныйКредитR).HasColumnName("Максимальный кредит R");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фил)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ВсегоНаВыставкахРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на выставках регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Vputi).HasColumnName("vputi");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ВсегоНаСкладахВыставкахРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складах выставках регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Vputi).HasColumnName("vputi");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ВсегоНаСкладе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri).HasColumnName("pri");

                entity.Property(e => e.Ras).HasColumnName("ras");
            });

            modelBuilder.Entity<ВсегоНаСкладеВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе все");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr).HasColumnName("nedogr");

                entity.Property(e => e.Pri).HasColumnName("pri");

                entity.Property(e => e.Ras).HasColumnName("ras");
            });

            modelBuilder.Entity<ВсегоНаСкладеВсеБезНедлогрузов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе_все_без недлогрузов");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.RasV)
                    .HasColumnName("ras_v")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ВсегоНаСкладеВсеНедогрузы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе_все_недогрузы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ВсегоНаСкладеГруппПоТоварам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе_групп_по_товарам");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sost)
                    .HasColumnName("sost")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ВсегоНаСкладеМосква>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе Москва");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КратностьКроватка).HasColumnName("Кратность_кроватка");

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Мощность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ВсегоНаСкладеОст>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе_ост");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ВМашине).HasColumnName("В Машине");
            });

            modelBuilder.Entity<ВсегоНаСкладеОстБрони>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе_ост_брони");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sost)
                    .HasColumnName("sost")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ВсегоНаСкладеОстРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе_ост_регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sost)
                    .HasColumnName("sost")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Фил).HasMaxLength(10);
            });

            modelBuilder.Entity<ВсегоНаСкладеПоВсемСкладамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе по всем складам регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.НаимТов)
                    .IsRequired()
                    .HasColumnName("Наим_тов")
                    .HasMaxLength(150);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Товар).HasMaxLength(30);

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ВсегоНаСкладеПоПартиямПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе по партиям поставки");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд1)
                    .HasColumnName("Номер ГТД1")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ВсегоНаСкладеПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе поставки");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ВсегоНаСкладеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КратностьКроватка).HasColumnName("Кратность_кроватка");

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ВсегоНаСкладеСЦенойИнвTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Всего на складе с ценой инв_tmp");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Всего на складе с ценой инв_tmp_1");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.UserId })
                    .HasName("IX_Всего на складе с ценой инв_tmp")
                    .IsUnique();

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикула).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Модель).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ВсегоНаСкладеСЦенойТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Всего на складе с ценой тмп");

                entity.HasIndex(e => new { e.IdТовара, e.IdСклада, e.Userid, e.Регион })
                    .HasName("IX_Всего на складе с ценой тмп111")
                    .IsUnique();

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(520);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ВсегоНаСкладеСЦенойТмпЗаказы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Всего на складе с ценой тмп_заказы");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.Userid, e.Регион, e.НомерЗаказа })
                    .HasName("IX_Всего на складе с ценой тмп_заказы111")
                    .IsUnique();

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Клиент).HasMaxLength(150);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(520);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер_заказа");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион_заказа");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ВсегоНаСкладеСЦенойЦоTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Всего на складе с ценой ЦО_tmp");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.UserId })
                    .HasName("IX_Всего на складе с ценой ЦО_tmp")
                    .IsUnique();

                entity.Property(e => e.Expr1).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Артикула)
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Модель)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Скидка).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ВсегоНаСкладеТип>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе тип");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВМашине).HasColumnName("В Машине");
            });

            modelBuilder.Entity<ВсегоНаСкладеТипВМашине>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе тип в машине");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ВМашине)
                    .HasColumnName("В Машине")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ВсегоНаСкладеТипЗаказ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе тип_заказ");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SsrZak)
                    .HasColumnName("ssr_zak")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ВМашине).HasColumnName("В Машине");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<ВсегоНаСкладеУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе узловая");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ВсегоНаСкладеФилЛб>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе Фил_ЛБ");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КратностьКроватка).HasColumnName("Кратность_кроватка");

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КратностьФил)
                    .HasColumnName("Кратность_фил")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Мощность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ВсегоНаСкладеФилиалов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего на складе филиалов");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ВсегоПоВыставкамПоДилерамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Всего по выставкам по дилерам регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Всего)
                    .HasColumnName("всего")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ВыборСкладаПереводаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Выбор склада-перевода регион");

                entity.Property(e => e.Название).HasMaxLength(30);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ВыбратьКонтсрукциюИзМатрицы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Выбрать контсрукцию из матрицы");

                entity.Property(e => e.IdБазы).HasColumnName("ID базы");

                entity.Property(e => e.IdКатегории)
                    .IsRequired()
                    .HasColumnName("ID категории")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.IdКласса).HasColumnName("ID класса");

                entity.Property(e => e.IdКонструкции)
                    .IsRequired()
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТипа)
                    .HasColumnName("ID типа")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Артикул).HasMaxLength(11);

                entity.Property(e => e.Замок).HasMaxLength(100);

                entity.Property(e => e.ЗамокДоп)
                    .HasColumnName("Замок_доп")
                    .HasMaxLength(100);

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.КодШирины)
                    .HasColumnName("Код_ширины")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КолЗамков).HasColumnName("Кол_замков");

                entity.Property(e => e.Конструкция)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.КоробТолщина)
                    .HasColumnName("Короб_Толщина")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Наполнитель).HasMaxLength(100);

                entity.Property(e => e.ПлощадьМ2)
                    .HasColumnName("Площадь_м2")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Тип)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ТольщинаПолотна)
                    .HasColumnName("Тольщина_полотна")
                    .HasMaxLength(20);

                entity.Property(e => e.Цена).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЦенаТрудозатрат)
                    .HasColumnName("Цена_трудозатрат")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЧасыТрудозатрат)
                    .HasColumnName("Часы_трудозатрат")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ВыпускСосенкиМесяц>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Выпуск Сосенки месяц");

                entity.Property(e => e.Expr3).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Сс).HasColumnName("СС");
            });

            modelBuilder.Entity<ВыпускУзловаяМесяц>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Выпуск Узловая месяц");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Сс)
                    .HasColumnName("СС")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ВыставкаЦенаТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Выставка цена товара");

                entity.Property(e => e.IdSkl).HasColumnName("ID_skl");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ВыставкаЦенаТовараДилеры>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Выставка цена товара дилеры");

                entity.Property(e => e.IdSkl).HasColumnName("ID_skl");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ВыставкиТмпРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Выставки_тмп регион");

                entity.HasIndex(e => new { e.IdТовара, e.НомерПокупателя, e.Userid })
                    .HasName("IX_Выставки_тмп регион")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Количество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ГдеЛежитТовар>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Где лежит товар");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ГдеЛежит).HasColumnName("Где_лежит");
            });

            modelBuilder.Entity<ГдеЛежитТоварBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Где лежит товар BG");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ГдеЛежит).HasColumnName("Где_лежит");
            });

            modelBuilder.Entity<ГдеЛежитТоварАстана>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Где лежит товар Астана");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ГдеЛежит).HasColumnName("Где_лежит");
            });

            modelBuilder.Entity<ГдеЛежитТоварУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Где лежит товар УЗМК");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ГдеЛежит).HasColumnName("Где_лежит");
            });

            modelBuilder.Entity<Глобальные>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Глобальные")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.БикКорсчет)
                    .HasColumnName("Бик_корсчет")
                    .HasMaxLength(100);

                entity.Property(e => e.БлокКопия).HasColumnName("Блок_копия");

                entity.Property(e => e.БлокМеньше).HasColumnName("Блок_меньше");

                entity.Property(e => e.БлокНал).HasColumnName("Блок_нал");

                entity.Property(e => e.БлокПлатежка).HasColumnName("Блок_платежка");

                entity.Property(e => e.БлокСчет).HasColumnName("Блок_счет");

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.ВремяЦентральной)
                    .HasColumnName("Время центральной")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.КурсДляТочек)
                    .HasColumnName("Курс для точек")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.ПарольНаВыпискуРаспоряжения)
                    .IsRequired()
                    .HasColumnName("Пароль на выписку распоряжения")
                    .HasMaxLength(10);

                entity.Property(e => e.ПарольНаИзменениеЗаявки)
                    .IsRequired()
                    .HasColumnName("Пароль на изменение заявки")
                    .HasMaxLength(10);

                entity.Property(e => e.ПарольНаИзменениеМенеджера)
                    .IsRequired()
                    .HasColumnName("Пароль на изменение менеджера")
                    .HasMaxLength(10);

                entity.Property(e => e.ПарольНаИзменениеЦены)
                    .IsRequired()
                    .HasColumnName("Пароль на изменение цены")
                    .HasMaxLength(10);

                entity.Property(e => e.ПроцентДляКон)
                    .HasColumnName("Процент для КОН")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.РаботаетЦентральная).HasColumnName("Работает центральная");

                entity.Property(e => e.РасСчет)
                    .HasColumnName("Рас_счет")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(20);

                entity.Property(e => e.ЦепочкаДо)
                    .HasColumnName("Цепочка до")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЦепочкаОд)
                    .HasColumnName("Цепочка од")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ГлобальныеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Глобальные регион");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Глобальные регион")
                    .IsUnique();

                entity.HasIndex(e => e.БлокНал)
                    .HasName("IX_Глобальные регион_2");

                entity.HasIndex(e => e.Склад)
                    .HasName("IX_Глобальные регион_1")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.БикКорсчет)
                    .HasColumnName("Бик_корсчет")
                    .HasMaxLength(100);

                entity.Property(e => e.БлокКопия).HasColumnName("Блок_копия");

                entity.Property(e => e.БлокМеньше).HasColumnName("Блок_меньше");

                entity.Property(e => e.БлокНал).HasColumnName("Блок_нал");

                entity.Property(e => e.БлокПлатежка).HasColumnName("Блок_платежка");

                entity.Property(e => e.БлокСчет).HasColumnName("Блок_счет");

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.ВремяЦентральной)
                    .HasColumnName("Время центральной")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПереносаЭд)
                    .HasColumnName("Дата переноса ЭД")
                    .HasColumnType("datetime");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.КурсДляТочек)
                    .HasColumnName("Курс для точек")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.ПарольНаВыпискуРаспоряжения)
                    .HasColumnName("Пароль на выписку распоряжения")
                    .HasMaxLength(10);

                entity.Property(e => e.ПарольНаИзменениеЗаявки)
                    .HasColumnName("Пароль на изменение заявки")
                    .HasMaxLength(10);

                entity.Property(e => e.ПарольНаИзменениеМенеджера)
                    .HasColumnName("Пароль на изменение менеджера")
                    .HasMaxLength(10);

                entity.Property(e => e.ПарольНаИзменениеЦены)
                    .HasColumnName("Пароль на изменение цены")
                    .HasMaxLength(10);

                entity.Property(e => e.РаботаетЦентральная).HasColumnName("Работает центральная");

                entity.Property(e => e.РасСчет)
                    .HasColumnName("Рас_счет")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.СубсчетДляРеестра).HasColumnName("Субсчет для реестра");

                entity.Property(e => e.Телефон).HasMaxLength(20);

                entity.Property(e => e.Фирма1ДляРеестра).HasColumnName("Фирма 1 для реестра");

                entity.Property(e => e.Фирма2ДляРеестра).HasColumnName("Фирма 2 для реестра");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Годовой отчет по филиалам_1");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2011>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам 2011");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Годовой отчет по филиалам 2011_1");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам 2011")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2012>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2012");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2012")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2013>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2013");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам1111_2")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2014>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2014");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2014")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2015>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2015");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2015")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2016>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2016");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2016")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2017>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2017");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2017")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2018");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2018")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2019>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2019");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2019")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2020>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2020");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2020")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Двери).HasDefaultValueSql("((0))");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГодовойОтчетПоФилиалам2021>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Годовой отчет по филиалам_2021");

                entity.HasIndex(e => new { e.КодСортировки, e.Регион })
                    .HasName("IX_Годовой отчет по филиалам_2021")
                    .IsUnique();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Двери).HasDefaultValueSql("((0))");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого)
                    .HasColumnName("ИТОГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГрафы)
                    .HasColumnName("Номер графы")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерГрафы1)
                    .HasColumnName("Номер графы_")
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбычнаяСумма)
                    .HasColumnName("обычная_сумма")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбычнаяСуммаСвод)
                    .HasColumnName("обычная_сумма_свод")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтатьяОтчета)
                    .IsRequired()
                    .HasColumnName("Статья отчета")
                    .HasMaxLength(150);

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ГрафикОтгрузокФилиалов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График отгрузок филиалов");

                entity.HasIndex(e => new { e.IdТовара, e.Регион, e.Дата, e.Склад })
                    .HasName("IX_График отгрузок филиалов")
                    .IsUnique();

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Вес).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВремяВПути)
                    .HasColumnName("Время в пути")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Количество)
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Объем).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Регион).HasDefaultValueSql("((0))");

                entity.Property(e => e.Склад).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ГрафикПродаж>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж");

                entity.HasIndex(e => new { e.НомерМесяца, e.Userid })
                    .HasName("IX_График продаж")
                    .IsUnique();

                entity.Property(e => e.Userid).HasMaxLength(50);

                entity.Property(e => e.Месяц).HasMaxLength(50);

                entity.Property(e => e.НомерМесяца)
                    .HasColumnName("Номер месяца")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатРуб)
                    .HasColumnName("Сумма оплат руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПродажРуб)
                    .HasColumnName("Сумма продаж руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажЕдиный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("График продаж единый");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажЗаТриГодаNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж за три года_new");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_График продаж за три года_new111")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Год).HasDefaultValueSql("((0))");

                entity.Property(e => e.Доходность)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаСентДек)
                    .HasColumnName("Сумма_сент_дек")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ГрафикПродажЗаТриГодаКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж за три года_кл");

                entity.HasIndex(e => new { e.Год, e.IdДилера, e.Сумма })
                    .HasName("IX_График продаж за три года_кл")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Доходность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажЗаТриГодаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж за три года регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_График продаж за три года регион")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Доходность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаСентДек)
                    .HasColumnName("Сумма_сент_дек")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажЗаТриГодаСвРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж за три года_св регион");

                entity.HasIndex(e => new { e.Год, e.Регион, e.Сумма, e.СуммаОплат })
                    .HasName("IX_График продаж за три года_св регион")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Доходность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажЗаТриГодаЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж за три года_ЦО");

                entity.HasIndex(e => new { e.Год, e.IdДилера, e.Сумма, e.СуммаОплат, e.Доходность })
                    .HasName("IX_График продаж за три года_ЦО")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Доходность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПг>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж_пг");

                entity.HasIndex(e => new { e.НомерМесяца, e.Userid })
                    .HasName("IX_График продаж_пг")
                    .IsUnique();

                entity.Property(e => e.Userid).HasMaxLength(50);

                entity.Property(e => e.Месяц).HasMaxLength(50);

                entity.Property(e => e.НомерМесяца)
                    .HasColumnName("Номер месяца")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатРуб)
                    .HasColumnName("Сумма оплат руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПродажРуб)
                    .HasColumnName("Сумма продаж руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцаПгКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяца_пг_кл");

                entity.HasIndex(e => new { e.Год, e.IdДилера, e.Сумма, e.Месяц })
                    .HasName("IX_График продаж по месяца_пг_кл")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.IdДилера, e.Сумма, e.СуммаОплат })
                    .HasName("IX_График продаж по месяцам");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам_кл");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_График продаж по месяцам_кл_1");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.IdДилера, e.Сумма })
                    .HasName("IX_График продаж по месяцам_кл")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамПг>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам_пг");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_График продаж по месяцам_пг_1");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.IdДилера, e.Сумма })
                    .HasName("IX_График продаж по месяцам_пг");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_График продаж по месяцам регион")
                    .IsUnique();

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_График продаж по месяцам регион_1");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамРегионПг>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам регион_пг");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_График продаж по месяцам регион_пг11")
                    .IsUnique();

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_График продаж по месяцам регион_пг11_1");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамСвРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам_св регион");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.Сумма, e.Регион })
                    .HasName("IX_График продаж по месяцам_св регион")
                    .IsUnique();

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамСвРегионПг>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам_св регион_пг");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.Регион, e.Сумма })
                    .HasName("IX_График продаж по месяцам_св регион_пг")
                    .IsUnique();

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам_ЦО");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_График продаж по месяцам_ЦО_1");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.IdДилера, e.Сумма, e.СуммаОплат, e.Zn })
                    .HasName("IX_График продаж по месяцам_ЦО")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Zn).HasColumnName("zn");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамЦоГр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцам_ЦО_гр");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_График продаж по месяцам_ЦО_гр_1");

                entity.HasIndex(e => new { e.Год, e.IdДилера, e.Zn, e.Группа, e.Месяц, e.Сумма, e.СуммаОплат })
                    .HasName("IX_График продаж по месяцам_ЦО_гр")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Zn).HasColumnName("zn");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамиПгЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцами_пг_ЦО");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_График продаж по месяцами_пг_ЦО_1");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.IdДилера, e.Сумма, e.СуммаОплат, e.Zn })
                    .HasName("IX_График продаж по месяцами_пг_ЦО")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Zn).HasColumnName("zn");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрафикПродажПоМесяцамиПгЦоГр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("График продаж по месяцами_пг_ЦО_гр");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_График продаж по месяцами_пг_ЦО_гр_1");

                entity.HasIndex(e => new { e.Год, e.IdДилера, e.Zn, e.Группа, e.Месяц, e.Сумма, e.СуммаОплат })
                    .HasName("IX_График продаж по месяцами_пг_ЦО_гр")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Zn).HasColumnName("zn");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ГрузополучателиФилиалы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Грузополучатели_филиалы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Prim)
                    .IsRequired()
                    .HasColumnName("prim")
                    .HasMaxLength(70);

                entity.Property(e => e.Грузопол).HasMaxLength(255);

                entity.Property(e => e.Фил)
                    .IsRequired()
                    .HasColumnName("фил")
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ГруппыИПодгруппы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Группы и Подгруппы");

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.КодСортировки).HasColumnName("Код сортировки");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<ГруппыКритериев>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Группы критериев");

                entity.HasIndex(e => e.ГруппаКритерия)
                    .HasName("IX_Группы критериев")
                    .IsUnique();

                entity.Property(e => e.ГруппаКритерия)
                    .HasColumnName("Группа критерия")
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Отношение)
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ГтдОсталось>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ГТД_осталось");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Ордер).HasMaxLength(30);

                entity.Property(e => e.Осталось)
                    .HasColumnName("осталось")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ГтдТовар>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ГТД_Товар");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<ГтдТоварГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ГТД_Товар_групп");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Ушло)
                    .HasColumnName("ушло")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ГтдТоварПриход>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ГТД_Товар_приход");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаГтд)
                    .HasColumnName("Дата_ГТД")
                    .HasMaxLength(10);

                entity.Property(e => e.Ордер).HasMaxLength(30);

                entity.Property(e => e.Пришло)
                    .HasColumnName("пришло")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ДанныеДляПоставок>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Данные для поставок");

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SumБронь)
                    .HasColumnName("Sum-Бронь")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ПланНаДень)
                    .HasColumnName("План на день")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Рц)
                    .HasColumnName("рц")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаCc)
                    .HasColumnName("Сумма cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРц)
                    .HasColumnName("Сумма рц")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ДанныеДляПоставокТула>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Данные для поставок Тула");

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SumБронь)
                    .HasColumnName("Sum-Бронь")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ПланНаДень)
                    .HasColumnName("План на день")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Рц)
                    .HasColumnName("рц")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаCc)
                    .HasColumnName("Сумма cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРц)
                    .HasColumnName("Сумма рц")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ДанныеСПроходной>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Данные с проходной");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Данные с проходной")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ВремяВъезда)
                    .HasColumnName("Время въезда")
                    .HasColumnType("datetime");

                entity.Property(e => e.ВремяВыезда)
                    .HasColumnName("Время выезда")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаВвода).HasColumnType("datetime");

                entity.Property(e => e.Накладная1)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная10)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная11)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная12)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная13)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная14)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная15)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная16)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная17)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная18)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная19)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная2)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная20)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная3)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная4)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная5)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная6)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная7)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная8)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная9)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерАвтомобиля)
                    .IsRequired()
                    .HasColumnName("Номер автомобиля")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ДатаКорректировкиУвеличенияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дата корректировки увеличения регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерКоректы).HasColumnName("Номер_коректы");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ДатаКорректировкиУвеличенияЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дата корректировки увеличения цо");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерКоректы).HasColumnName("Номер_коректы");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ДатаПрихода>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дата прихода");

                entity.Property(e => e.FirstOfДокумент).HasMaxLength(30);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MinOfДатаПрихода)
                    .HasColumnName("MinOfДата прихода")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ДатаПриходаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ДатаПриходаРегион");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);
            });

            modelBuilder.Entity<Двери>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Art).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(550);

                entity.Property(e => e.Price).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ДебКредТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Деб_Кред_тмп");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Деб_Кред_тмп_1");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Деб_Кред_тмп");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеДол)
                    .HasColumnName("Задолженность по отгрузке дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеРуб)
                    .HasColumnName("Задолженность по отгрузке руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеРубБезНдс)
                    .HasColumnName("Задолженность по отгрузке руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КредиторкаДол)
                    .HasColumnName("Кредиторка дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КредиторкаРуб)
                    .HasColumnName("Кредиторка руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наим)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Накл).HasMaxLength(50);

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоНакладной)
                    .HasColumnName("Сумма по накладной")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоНакладнойБезНдс)
                    .HasColumnName("Сумма по накладной_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоСчету)
                    .HasColumnName("Сумма по счету")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоСчетуБезНдс)
                    .HasColumnName("Сумма по счету_без_НДС")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ДебТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Деб_тмп");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Деб_тмп")
                    .IsUnique();

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Деб_тмп1111_1");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Деб_тмп1111");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеДол)
                    .HasColumnName("Задолженность по отгрузке дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеРуб)
                    .HasColumnName("Задолженность по отгрузке руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеРубБезНдс)
                    .HasColumnName("Задолженность по отгрузке руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наим)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Накл).HasMaxLength(50);

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоНакладной)
                    .HasColumnName("Сумма по накладной")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоНакладнойБезНдс)
                    .HasColumnName("Сумма по накладной_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоСчету)
                    .HasColumnName("Сумма по счету")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоСчетуБезНдс)
                    .HasColumnName("Сумма по счету_без_НДС")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ДебиторскаяЗадолженность>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Дебиторская задолженность");

                entity.Property(e => e.Cc)
                    .HasColumnName("CC")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.TkВид)
                    .HasColumnName("TK_вид")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ДебиторскаяЗадолженностьПоВыставкам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Дебиторская задолженность по выставкам");

                entity.Property(e => e.Cc)
                    .HasColumnName("CC")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.TkВид)
                    .HasColumnName("TK_вид")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Название).HasMaxLength(15);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(50);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ДебиторскаяЗадолженностьПоКлиентам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Дебиторская задолженность по клиентам");

                entity.Property(e => e.Cc).HasColumnName("CC");

                entity.Property(e => e.TkВид).HasColumnName("TK_вид");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ДебиторскаяЗадолженностьПоКлиентамПодр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Дебиторская задолженность по клиентам подр");

                entity.Property(e => e.Bux)
                    .HasColumnName("bux")
                    .HasMaxLength(12);

                entity.Property(e => e.Cc)
                    .HasColumnName("CC")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.TkВид)
                    .HasColumnName("TK_вид")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ДеревоТоваров2уроверь>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дерево_товаров_2уроверь");

                entity.Property(e => e.CodeTmc)
                    .HasColumnName("CodeTMC")
                    .HasMaxLength(2);

                entity.Property(e => e.L3)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(47);

                entity.Property(e => e.SearchId)
                    .IsRequired()
                    .HasColumnName("SearchID")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sort)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasMaxLength(46);
            });

            modelBuilder.Entity<ДеревоТоваров3уровень>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дерево_товаров_3уровень");

                entity.Property(e => e.CodeTmc)
                    .HasColumnName("CodeTMC")
                    .HasMaxLength(2);

                entity.Property(e => e.L3)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.L4)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(46);

                entity.Property(e => e.SearchId)
                    .IsRequired()
                    .HasColumnName("SearchID")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sort)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasMaxLength(46);
            });

            modelBuilder.Entity<ДеревоТоваров4уровень>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дерево_товаров_4уровень");

                entity.Property(e => e.CodeTmc)
                    .HasColumnName("CodeTMC")
                    .HasMaxLength(2);

                entity.Property(e => e.L3)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.L4)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.L5)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(46);

                entity.Property(e => e.SearchId)
                    .IsRequired()
                    .HasColumnName("SearchID")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Sort)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasMaxLength(46);
            });

            modelBuilder.Entity<Дет1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дет1");

                entity.Property(e => e.Det1)
                    .HasColumnName("DET1")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Next1).HasColumnName("next1");

                entity.Property(e => e.Perv)
                    .HasColumnName("perv")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Дет).HasMaxLength(351);
            });

            modelBuilder.Entity<Дет2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дет2");

                entity.Property(e => e.Det2)
                    .HasColumnName("DET2")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Next2).HasColumnName("next2");

                entity.Property(e => e.Vtor)
                    .HasColumnName("vtor")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Дет).HasMaxLength(351);
            });

            modelBuilder.Entity<Дет3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дет3");

                entity.Property(e => e.Det3)
                    .HasColumnName("DET3")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Next3).HasColumnName("next3");

                entity.Property(e => e.Tret)
                    .HasColumnName("tret")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Дет).HasMaxLength(351);
            });

            modelBuilder.Entity<Дет4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дет4");

                entity.Property(e => e.Czter)
                    .HasColumnName("czter")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Det4)
                    .HasColumnName("DET4")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Next4).HasColumnName("next4");

                entity.Property(e => e.Дет).HasMaxLength(351);
            });

            modelBuilder.Entity<Дет5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дет5");

                entity.Property(e => e.Det5)
                    .HasColumnName("DET5")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Next5).HasColumnName("next5");

                entity.Property(e => e.Piec)
                    .HasColumnName("piec")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Дет).HasMaxLength(351);
            });

            modelBuilder.Entity<Дет6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дет6");

                entity.Property(e => e.Det6)
                    .HasColumnName("DET6")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Next6).HasColumnName("next6");

                entity.Property(e => e.Szesc)
                    .HasColumnName("szesc")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Дет).HasMaxLength(351);
            });

            modelBuilder.Entity<Дет7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дет7");

                entity.Property(e => e.Det7)
                    .HasColumnName("DET7")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Next7).HasColumnName("next7");

                entity.Property(e => e.Siedem)
                    .HasColumnName("siedem")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Дет).HasMaxLength(351);
            });

            modelBuilder.Entity<Детали>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Детали");

                entity.Property(e => e.Det7)
                    .HasColumnName("DET7")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ДилерЗДоступы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дилер_з_доступы");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.Rec).HasColumnName("rec");

                entity.Property(e => e.МткХозяин).HasColumnName("МТК_Хозяин");
            });

            modelBuilder.Entity<ДилерМфУзл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дилер_МФ_Узл");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdvoУзл).HasColumnName("IDVO_Узл");

                entity.Property(e => e.IdУзл).HasColumnName("ID_Узл");
            });

            modelBuilder.Entity<ДилерыДляОтчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дилеры для отчета");

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.IdДилераЦо).HasColumnName("ID дилера ЦО");

                entity.Property(e => e.KolMes).HasColumnName("kol_mes");

                entity.Property(e => e.MaxДата)
                    .HasColumnName("Max_Дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Password).HasMaxLength(20);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.UseridUlOb).HasColumnName("Userid_ul_ob");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.ДилерЮлОбъем)
                    .HasColumnName("Дилер_юл_объем")
                    .HasMaxLength(50);

                entity.Property(e => e.ЗаМес)
                    .HasColumnName("За мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.Канал).HasMaxLength(7);

                entity.Property(e => e.Катег).HasMaxLength(15);

                entity.Property(e => e.КолМес).HasColumnName("Кол_мес");

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.Кред).HasColumnName("кред");

                entity.Property(e => e.Мтк)
                    .HasColumnName("МТК")
                    .HasMaxLength(50);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.ОбГол).HasColumnName("Об_гол");

                entity.Property(e => e.ОбъемПродажЮрлица)
                    .HasColumnName("Объем продаж юрлица")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Оплата12)
                    .HasColumnName("Оплата_12")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Оплата3)
                    .HasColumnName("Оплата_3")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОтгрузкаЗаПериод)
                    .HasColumnName("Отгрузка за период")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтсрочкаКарточка)
                    .HasColumnName("Отсрочка_карточка")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.СредОплЗа3Мес)
                    .HasColumnName("Сред_опл за 3 мес")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СредОплЗа3МесЮл)
                    .HasColumnName("Сред_опл за 3 мес_юл")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ДилерыДляОтчетаГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дилеры для отчета_групп");

                entity.Property(e => e.IdДилераЦо).HasColumnName("ID дилера ЦО");

                entity.Property(e => e.KolMes).HasColumnName("kol_mes");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.Канал).HasMaxLength(7);

                entity.Property(e => e.Катег).HasMaxLength(15);

                entity.Property(e => e.Кред).HasColumnName("кред");

                entity.Property(e => e.Мтк)
                    .HasColumnName("МТК")
                    .HasMaxLength(50);

                entity.Property(e => e.Оплата12)
                    .HasColumnName("Оплата_12")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Оплата3)
                    .HasColumnName("Оплата_3")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Отдел).HasMaxLength(20);

                entity.Property(e => e.ОтсрочкаКарточка)
                    .HasColumnName("Отсрочка_карточка")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ДилерыДляОтчетаЦоМф>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дилеры для отчета ЦО_МФ");

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdДилераЦо).HasColumnName("ID дилера ЦО");

                entity.Property(e => e.MaxДата)
                    .HasColumnName("Max_Дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Password).HasMaxLength(20);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.UseridUlOb).HasColumnName("Userid_ul_ob");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.ДилерЮлОбъем)
                    .HasColumnName("Дилер_юл_объем")
                    .HasMaxLength(50);

                entity.Property(e => e.ЗаМес)
                    .HasColumnName("За мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.КолМес).HasColumnName("Кол_мес");

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.Мтк)
                    .HasColumnName("МТК")
                    .HasMaxLength(50);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.ОбъемПродажЮрлица)
                    .HasColumnName("Объем продаж юрлица")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтгрузкаЗаПериод)
                    .HasColumnName("Отгрузка за период")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтсрочкаКарточка)
                    .HasColumnName("Отсрочка_карточка")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.СредОплЗа3Мес)
                    .HasColumnName("Сред_опл за 3 мес")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СредОплЗа3МесЮл)
                    .HasColumnName("Сред_опл за 3 мес_юл")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ДилерыМосквы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Дилеры Москвы");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.Кратко).HasMaxLength(7);

                entity.Property(e => e.МаксимальныйКредитR).HasColumnName("Максимальный кредит R");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ДляLb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для_LB");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Кол).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ДляВебПогрузочного>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для веб_погрузочного");

                entity.Property(e => e.Art)
                    .HasColumnName("art")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol)
                    .HasColumnName("kol")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Mod)
                    .HasColumnName("mod")
                    .HasMaxLength(20);

                entity.Property(e => e.Ob).HasColumnName("ob");

                entity.Property(e => e.PrimPogr)
                    .HasColumnName("prim_pogr")
                    .HasMaxLength(100);

                entity.Property(e => e.Priorit)
                    .HasColumnName("priorit")
                    .HasMaxLength(20);

                entity.Property(e => e.Rec).HasColumnName("rec");

                entity.Property(e => e.Tov)
                    .HasColumnName("tov")
                    .HasMaxLength(255);

                entity.Property(e => e.Ves).HasColumnName("ves");

                entity.Property(e => e.Zak).HasColumnName("zak");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ДляВебПогрузочногоDb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для веб_погрузочного_db");

                entity.Property(e => e.Art)
                    .HasColumnName("art")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol)
                    .HasColumnName("kol")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Mod)
                    .HasColumnName("mod")
                    .HasMaxLength(20);

                entity.Property(e => e.Ob).HasColumnName("ob");

                entity.Property(e => e.PrimPogr)
                    .HasColumnName("prim_pogr")
                    .HasMaxLength(100);

                entity.Property(e => e.Priorit)
                    .HasColumnName("priorit")
                    .HasMaxLength(20);

                entity.Property(e => e.Rec).HasColumnName("rec");

                entity.Property(e => e.Tov)
                    .HasColumnName("tov")
                    .HasMaxLength(255);

                entity.Property(e => e.Ves).HasColumnName("ves");

                entity.Property(e => e.Zak).HasColumnName("zak");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ДляЗаказаКазанлык>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для заказа Казанлык");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ДляЛепестковойТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Для лепестковой тмп");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Для лепестковой тмп")
                    .IsUnique();

                entity.Property(e => e.Значение).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Критерий).HasMaxLength(150);
            });

            modelBuilder.Entity<ДляОтчетаAbcРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Для отчета_ABC регион");

                entity.HasIndex(e => new { e.Артикул, e.Userid })
                    .HasName("IX_Для отчета_ABC регион")
                    .IsUnique();

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC_")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Артикул)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Кол).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Модель)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.Сс)
                    .HasColumnName("СС")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ДляОтчетаАвсРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для отчета АВС регион");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC_")
                    .HasMaxLength(5);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Кол).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Сс)
                    .HasColumnName("СС")
                    .HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<ДляОтчетаИздержки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Для отчета Издержки");

                entity.HasIndex(e => e.НомерГрафыБаланса)
                    .HasName("IX_Для отчета Издержки")
                    .IsUnique();

                entity.Property(e => e.Издержки).HasMaxLength(150);

                entity.Property(e => e.НомерГрафыБаланса)
                    .HasColumnName("Номер графы баланса")
                    .HasMaxLength(10);

                entity.Property(e => e.Сортировка).HasColumnType("decimal(8, 3)");
            });

            modelBuilder.Entity<ДляОтчетаРеестрПлатежейОбщийДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для отчета - реестр платежей общий двери");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Usd).HasColumnName("USD");

                entity.Property(e => e.Валюта).HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование BLG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Подр).HasMaxLength(50);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Статус).HasMaxLength(50);

                entity.Property(e => e.Статья)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Структура).HasMaxLength(50);

                entity.Property(e => e.Субсчет).HasMaxLength(50);

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ДляОтчетаРеестрПлатежейОбщих>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для отчета - реестр платежей общих");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Usd).HasColumnName("USD");

                entity.Property(e => e.Валюта).HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование BLG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Подр).HasMaxLength(50);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Статус).HasMaxLength(50);

                entity.Property(e => e.Статья)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Структура).HasMaxLength(50);

                entity.Property(e => e.Субсчет).HasMaxLength(50);

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ДляПерекачки>(entity =>
            {
                entity.HasKey(e => e.Артикул);

                entity.ToTable("Для_Перекачки", "DATASA");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Заявка).HasColumnName("ЗАявка");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<ДляПрайсЛистаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для Прайс_Листа регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ДляПроверкиОстатков>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для проверки остатков");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.КоличествоДляОтгрузки).HasColumnName("Количество для отгрузки");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ДляПросмотраЗаявок>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для просмотра заявок_");

                entity.Property(e => e.Expr1).HasMaxLength(10);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерФилиала).HasColumnName("Номер_филиала");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ДляПросмотраЗаявокNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для просмотра заявок new");

                entity.Property(e => e.Expr1).HasMaxLength(10);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерФилиала).HasColumnName("Номер_филиала");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.РегионФил)
                    .HasColumnName("Регион_Фил")
                    .HasMaxLength(70);

                entity.Property(e => e.Стадия)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ДляПросмотраЗаявокВыполненныхСервисом>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для просмотра заявок выполненных сервисом");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdСтадии).HasColumnName("ID стадии");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Затраты).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Название).HasMaxLength(15);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ДляПросмотраЗаявокСервисом>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для просмотра заявок сервисом");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdСтадии).HasColumnName("ID стадии");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Затраты).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Название).HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(100);
            });

            modelBuilder.Entity<ДляПросмотраСчетовВыполненныхСервисом>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для просмотра счетов выполненных сервисом");

                entity.Property(e => e.IdСтадии).HasColumnName("ID стадии");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Затраты).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ДляПросмотраСчетовСервисом>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для просмотра счетов сервисом");

                entity.Property(e => e.IdСтадии).HasColumnName("ID стадии");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Затраты).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ДляРасходDib>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для расход_dib");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ФактМест).HasColumnName("Факт мест");
            });

            modelBuilder.Entity<ДляРасхода>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Для расхода");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.РегионЗабронировал).HasColumnName("Регион_забронировал");

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ФактМест).HasColumnName("Факт мест");
            });

            modelBuilder.Entity<Дни>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.НомерДня, e.НоммерНедели })
                    .HasName("IX_Дни")
                    .IsUnique();

                entity.Property(e => e.НомерДня).HasColumnName("Номер дня");

                entity.Property(e => e.НоммерНедели).HasColumnName("Номмер недели");
            });

            modelBuilder.Entity<ДокументыEcbs>(entity =>
            {
                entity.ToTable("Документы_ECBS");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.BinaryData).HasColumnType("image");

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.FileExtention).HasMaxLength(10);
            });

            modelBuilder.Entity<ДокументыПретензии>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Документы_претензии");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Документы_претензии")
                    .IsUnique();

                entity.Property(e => e.IdПретензии).HasColumnName("ID претензии");

                entity.Property(e => e.IdТипа).HasColumnName("ID типа");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КолДверей)
                    .HasColumnName("Кол_дверей")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Кому).HasMaxLength(255);

                entity.Property(e => e.Контрагент).HasMaxLength(255);

                entity.Property(e => e.Номер).HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Фото).HasColumnType("image");
            });

            modelBuilder.Entity<ДолгПоЗаявкеТмпРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Долг по заявке_тмп регион");

                entity.HasIndex(e => e.RecD)
                    .HasName("IX_Долг по заявке_тмп регион_4")
                    .IsUnique();

                entity.HasIndex(e => e.Userid)
                    .HasName("IX_Долг по заявке_тмп регион_3");

                entity.HasIndex(e => new { e.НомерЗ, e.Регион, e.Userid })
                    .HasName("IX_Долг по заявке_тмп регион_2");

                entity.Property(e => e.RecD)
                    .HasColumnName("Rec_d")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Валюта).HasMaxLength(4);

                entity.Property(e => e.Двери).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Долг).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДолгПоОтгр)
                    .HasColumnName("Долг по отгр")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДолгПоОтгрВал)
                    .HasColumnName("Долг по отгр вал")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДолгПоСчетуВал)
                    .HasColumnName("Долг по счету вал")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Мебель).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерЗ).HasColumnName("Номер_з");

                entity.Property(e => e.Сейфы).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаДоСкидки)
                    .HasColumnName("Сумма_до_скидки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаСчета)
                    .HasColumnName("Сумма_счета")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаСчетаВал)
                    .HasColumnName("Сумма_счета_вал")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ДолгПоЗаявкеТмпРегион1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Долг по заявке_тмп регион1111");

                entity.HasIndex(e => e.Userid)
                    .HasName("IX_Долг по заявке_тмп регион_1");

                entity.HasIndex(e => new { e.НомерЗ, e.Регион, e.Userid })
                    .HasName("IX_Долг по заявке_тмп регион");

                entity.Property(e => e.Валюта).HasMaxLength(4);

                entity.Property(e => e.Двери).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Долг).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДолгПоОтгр)
                    .HasColumnName("Долг по отгр")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДолгПоОтгрВал)
                    .HasColumnName("Долг по отгр вал")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДолгПоСчетуВал)
                    .HasColumnName("Долг по счету вал")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Мебель).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерЗ).HasColumnName("Номер_з");

                entity.Property(e => e.Сейфы).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаДоСкидки)
                    .HasColumnName("Сумма_до_скидки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаСчета)
                    .HasColumnName("Сумма_счета")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаСчетаВал)
                    .HasColumnName("Сумма_счета_вал")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ДопскидкаИстория>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Допскидка история");

                entity.HasIndex(e => e.IdЗаписи)
                    .HasName("IX_Допскидка история")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЗаписи)
                    .HasColumnName("ID записи")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdПричины)
                    .HasColumnName("ID причины")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("USER ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина).HasMaxLength(50);

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Тип).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ДопскидкаИсторияГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Допскидка история_групп");

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");
            });

            modelBuilder.Entity<ДопскидкаИсторияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Допскидка история регион");

                entity.HasIndex(e => e.IdЗаписи)
                    .HasName("IX_Допскидка история регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЗаписи)
                    .HasColumnName("ID записи")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdПричины)
                    .HasColumnName("ID причины")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("USER ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина).HasMaxLength(50);

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Тип).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ДопскидкаИсторияРегионГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Допскидка история регион_групп");

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");
            });

            modelBuilder.Entity<ДоступККлиентам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Доступ к клиентам");

                entity.HasIndex(e => new { e.RecKl, e.Dostup })
                    .HasName("IX_Доступ к клиентам")
                    .IsUnique();

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");
            });

            modelBuilder.Entity<ДоходПоКлиентамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Доход по клиентам регион");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Выручка).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВыручкаWeb)
                    .HasColumnName("выручка_web")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВыручкаБезНдс)
                    .HasColumnName("Выручка_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВыручкаР)
                    .HasColumnName("Выручка_р")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доход).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДоходБезНдс)
                    .HasColumnName("Доход_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДоходР)
                    .HasColumnName("Доход_р")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Сс)
                    .HasColumnName("СС")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ДоходПоКлиентамРегионКолсч>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Доход по клиентам регион колсч");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолWeb).HasColumnName("кол_web");

                entity.Property(e => e.КолВсе).HasColumnName("кол_все");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ДоходПоКлиентамРегионПиление>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Доход по клиентам регион пиление");

                entity.Property(e => e.Выручка).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВыручкаWeb)
                    .HasColumnName("выручка_web")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВыручкаБезНдс)
                    .HasColumnName("Выручка_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВыручкаР)
                    .HasColumnName("Выручка_р")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доход).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДоходБезНдс)
                    .HasColumnName("Доход_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДоходР)
                    .HasColumnName("Доход_р")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДоходСколько)
                    .HasColumnName("Доход_сколько")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Кому)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ОтКого)
                    .IsRequired()
                    .HasColumnName("От кого")
                    .HasMaxLength(70);

                entity.Property(e => e.Сс)
                    .HasColumnName("СС")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<Духовный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Духовный");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.LastФамилия)
                    .HasColumnName("Last-Фамилия")
                    .HasMaxLength(30);

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum-Сумма оплаты $")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum-Сумма оплаты R")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Название).HasMaxLength(30);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<ЕдиныеДилеры>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Единые дилеры");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Password).HasMaxLength(15);

                entity.Property(e => e.RecDl).HasColumnName("Rec_dl");

                entity.Property(e => e.ЗаОтсрочку).HasColumnName("За_отсрочку");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СкидкаИзКарточки).HasColumnName("Скидка_из_карточки");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 3)");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 3)");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ЖурналИнноваций>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Журнал инноваций");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Журнал инноваций")
                    .IsUnique();

                entity.Property(e => e.IdИнноватора)
                    .HasColumnName("ID инноватора")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКтоПровелАудит)
                    .HasColumnName("ID Кто провел аудит")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdОтветственногоЗаВнедрение)
                    .HasColumnName("ID ответственного за внедрение")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтруктуры)
                    .HasColumnName("ID структуры")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ГдеВнедрено)
                    .HasColumnName("Где внедрено")
                    .HasMaxLength(250);

                entity.Property(e => e.ДатаРегистрации)
                    .HasColumnName("Дата регистрации")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Инноватор).HasMaxLength(50);

                entity.Property(e => e.КогдаПровелАудит)
                    .HasColumnName("Когда провел аудит")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КраткоеОписаниеИнновации)
                    .HasColumnName("Краткое описание инновации")
                    .HasMaxLength(250);

                entity.Property(e => e.КтоВнес)
                    .HasColumnName("Кто внес")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КтоПровелАудит)
                    .HasColumnName("Кто провел аудит")
                    .HasMaxLength(50);

                entity.Property(e => e.Номер).HasMaxLength(20);

                entity.Property(e => e.ОтветственныйЗаВнедрение)
                    .HasColumnName("Ответственный за внедрение")
                    .HasMaxLength(50);

                entity.Property(e => e.ПричинаНеВнедрения)
                    .HasColumnName("Причина не внедрения")
                    .HasMaxLength(250);

                entity.Property(e => e.Протокол).HasColumnType("image");

                entity.Property(e => e.Регион).HasDefaultValueSql("((0))");

                entity.Property(e => e.РезультатыКонтроля)
                    .HasColumnName("Результаты контроля")
                    .HasMaxLength(255);

                entity.Property(e => e.РешениеКомитетаПоИнновациям)
                    .HasColumnName("Решение комитета по инновациям")
                    .HasMaxLength(255);

                entity.Property(e => e.Содержание).HasColumnType("image");

                entity.Property(e => e.Структура).HasMaxLength(50);
            });

            modelBuilder.Entity<ЖурналПроектовСертификации>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Журнал проектов сертификации");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Журнал проектов сертификации")
                    .IsUnique();

                entity.HasIndex(e => e.НомерСертификата)
                    .HasName("IX_Журнал проектов сертификации_1");

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdТипаПроекта)
                    .HasColumnName("ID типа проекта")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ВКакойЛабИспытания)
                    .HasColumnName("В какой лаб испытания")
                    .HasMaxLength(150);

                entity.Property(e => e.ВалютаОплаты)
                    .HasColumnName("Валюта оплаты")
                    .HasMaxLength(3);

                entity.Property(e => e.ДатаИнициации)
                    .HasColumnName("Дата инициации")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИспытаний)
                    .HasColumnName("Дата испытаний")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтправкиОбразца)
                    .HasColumnName("Дата отправки образца")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтправкиЧертежейДляСерт)
                    .HasColumnName("Дата отправки чертежей для серт")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПереговоровСЛабИСертОрганом)
                    .HasColumnName("Дата переговоров с лаб и серт органом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПолученияРепортаОбИспытаниях)
                    .HasColumnName("Дата получения репорта об испытаниях")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПриемкиОбразца)
                    .HasColumnName("Дата приемки образца")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРазработкиКдДляИспытаний)
                    .HasColumnName("Дата разработки КД для испытаний")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРазработкиКдДляСерт)
                    .HasColumnName("Дата разработки КД для серт")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРегистрации)
                    .HasColumnName("Дата регистрации")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСертификата)
                    .HasColumnName("Дата сертификата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДокументаИнициации)
                    .HasColumnName("Документа инициации")
                    .HasMaxLength(150);

                entity.Property(e => e.ИнвойсОплатыИспытаний)
                    .HasColumnName("Инвойс оплаты испытаний")
                    .HasMaxLength(20);

                entity.Property(e => e.КтоВнес).HasColumnName("Кто внес");

                entity.Property(e => e.КтоОтправилОбразец)
                    .HasColumnName("Кто отправил образец")
                    .HasMaxLength(150);

                entity.Property(e => e.КтоПринялОбразец)
                    .HasColumnName("Кто принял образец")
                    .HasMaxLength(150);

                entity.Property(e => e.НазваниеПроекта)
                    .HasColumnName("Название проекта")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерСертификата)
                    .HasColumnName("Номер сертификата")
                    .HasMaxLength(50);

                entity.Property(e => e.ОбразцыНаИспытания)
                    .HasColumnName("Образцы на испытания")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтветственныйЗаРазработкуКдДляИспытаний)
                    .HasColumnName("Ответственный за разработку КД для испытаний")
                    .HasMaxLength(150);

                entity.Property(e => e.ОтветственныйЗаРазработкуКдДляСерт)
                    .HasColumnName("Ответственный за разработку КД для серт")
                    .HasMaxLength(150);

                entity.Property(e => e.ПланПереговоровСЛабИСертОрганом)
                    .HasColumnName("План переговоров с лаб и серт органом")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриложенныеФайлыИспытаний)
                    .HasColumnName("Приложенные файлы испытаний")
                    .HasColumnType("image");

                entity.Property(e => e.ПриложенныеФайлыЧертежей)
                    .HasColumnName("Приложенные файлы чертежей")
                    .HasColumnType("image");

                entity.Property(e => e.РезультатИспытаний)
                    .HasColumnName("Результат испытаний")
                    .HasMaxLength(255);

                entity.Property(e => e.РезультатПриемкиОбразца)
                    .IsRequired()
                    .HasColumnName("Результат приемки образца")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыИспытаний)
                    .HasColumnName("Сумма оплаты испытаний")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ТребуютсяИспытания).HasColumnName("Требуются испытания");

                entity.Property(e => e.ТребуютсяКорректировкаДокументации).HasColumnName("Требуются корректировка документации");

                entity.Property(e => e.ТребуютсяПовторныеИспытания).HasColumnName("Требуются повторные испытания");
            });

            modelBuilder.Entity<ЗЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_зависимости");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_З_зависимости")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Tip).HasColumnName("tip");

                entity.Property(e => e.VDo)
                    .HasColumnName("V_do")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.VOd)
                    .HasColumnName("V_od")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Vб).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Vбdib).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Vбрф).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Кб).HasColumnType("decimal(12, 6)");

                entity.Property(e => e.Прб).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прбdib).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прбрф).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ЗЗадачи>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_задачи");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_З_задачи")
                    .IsUnique();

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Задача).IsRequired();

                entity.Property(e => e.ЛичныйНомер).HasColumnName("Личный номер");

                entity.Property(e => e.СрокИсполнения)
                    .HasColumnName("Срок исполнения")
                    .HasColumnType("datetime");

                entity.Property(e => e.ТрудоемкостьНераб).HasColumnName("Трудоемкость_нераб");

                entity.Property(e => e.ТрудоемкостьРаб).HasColumnName("Трудоемкость_раб");
            });

            modelBuilder.Entity<ЗИт>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Ит");

                entity.HasIndex(e => new { e.Hid, e.Год, e.Месяц })
                    .HasName("IX_З_Ит")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.Nmc)
                    .HasColumnName("NMC")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Ит).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КИнд1)
                    .HasColumnName("К_Инд1")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд2)
                    .HasColumnName("К_Инд2")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КМво)
                    .HasColumnName("К_МВО")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Оклад).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия1).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия2).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.УтвержденоРуководителем)
                    .HasColumnName("Утверждено руководителем")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ЗИтОценки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Ит_Оценки");

                entity.HasIndex(e => new { e.Hid, e.Год, e.Месяц, e.RecOценка })
                    .HasName("IX_З_Ит_Оценки")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.RecOценка)
                    .HasColumnName("Rec_Oценка")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Вес1).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес2).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес3).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес4).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес5).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес6).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес7).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.КМво1)
                    .HasColumnName("К_МВО1")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво2)
                    .HasColumnName("К_МВО2")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво3)
                    .HasColumnName("К_МВО3")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво4)
                    .HasColumnName("К_МВО4")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво5)
                    .HasColumnName("К_МВО5")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво6)
                    .HasColumnName("К_МВО6")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво7)
                    .HasColumnName("К_МВО7")
                    .HasMaxLength(2);

                entity.Property(e => e.Комментарий).HasMaxLength(255);

                entity.Property(e => e.Ответственный).HasMaxLength(150);

                entity.Property(e => e.Оценка1).HasMaxLength(255);

                entity.Property(e => e.Оценка2).HasMaxLength(255);

                entity.Property(e => e.Оценка3).HasMaxLength(255);

                entity.Property(e => e.Оценка4).HasMaxLength(255);

                entity.Property(e => e.Оценка5).HasMaxLength(255);

                entity.Property(e => e.Оценка6).HasMaxLength(255);

                entity.Property(e => e.Оценка7).HasMaxLength(255);

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ЗКритерииДолж>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Критерии_долж");

                entity.HasIndex(e => e.Iddol)
                    .HasName("IX_З_Критерии_долж")
                    .IsUnique();

                entity.Property(e => e.Iddol).HasColumnName("IDdol");

                entity.Property(e => e.Вес1).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес2).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес3).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес4).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес5).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес6).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Оценка1).HasMaxLength(255);

                entity.Property(e => e.Оценка2).HasMaxLength(255);

                entity.Property(e => e.Оценка3).HasMaxLength(255);

                entity.Property(e => e.Оценка4).HasMaxLength(255);

                entity.Property(e => e.Оценка5).HasMaxLength(255);

                entity.Property(e => e.Оценка6).HasMaxLength(255);

                entity.Property(e => e.Оценка7).HasMaxLength(255);
            });

            modelBuilder.Entity<ЗКритерииСотр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Критерии_сотр");

                entity.HasIndex(e => e.Hid)
                    .HasName("IX_З_Критерии_сотр")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.Вес1).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес2).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес3).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес4).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес5).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Вес6).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Оценка1).HasMaxLength(255);

                entity.Property(e => e.Оценка2).HasMaxLength(255);

                entity.Property(e => e.Оценка3).HasMaxLength(255);

                entity.Property(e => e.Оценка4).HasMaxLength(255);

                entity.Property(e => e.Оценка5).HasMaxLength(255);

                entity.Property(e => e.Оценка6).HasMaxLength(255);

                entity.Property(e => e.Оценка7).HasMaxLength(255);
            });

            modelBuilder.Entity<ЗОценки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_оценки");

                entity.HasIndex(e => new { e.Hid, e.Год })
                    .HasName("IX_З_оценки")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.NmcПроц01)
                    .HasColumnName("NMC_проц_01")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц02)
                    .HasColumnName("NMC_проц_02")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц03)
                    .HasColumnName("NMC_проц_03")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц04)
                    .HasColumnName("NMC_проц_04")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц05)
                    .HasColumnName("NMC_проц_05")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц06)
                    .HasColumnName("NMC_проц_06")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц07)
                    .HasColumnName("NMC_проц_07")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц08)
                    .HasColumnName("NMC_проц_08")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц09)
                    .HasColumnName("NMC_проц_09")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц10)
                    .HasColumnName("NMC_проц_10")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц11)
                    .HasColumnName("NMC_проц_11")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроц12)
                    .HasColumnName("NMC_проц_12")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.NmcПроцДв01)
                    .HasColumnName("NMC_проц_дв_01")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв02)
                    .HasColumnName("NMC_проц_дв_02")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв03)
                    .HasColumnName("NMC_проц_дв_03")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв04)
                    .HasColumnName("NMC_проц_дв_04")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв05)
                    .HasColumnName("NMC_проц_дв_05")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв06)
                    .HasColumnName("NMC_проц_дв_06")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв07)
                    .HasColumnName("NMC_проц_дв_07")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв08)
                    .HasColumnName("NMC_проц_дв_08")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв09)
                    .HasColumnName("NMC_проц_дв_09")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв10)
                    .HasColumnName("NMC_проц_дв_10")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв11)
                    .HasColumnName("NMC_проц_дв_11")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.NmcПроцДв12)
                    .HasColumnName("NMC_проц_дв_12")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Бонус01)
                    .HasColumnName("Бонус_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус02)
                    .HasColumnName("Бонус_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус03)
                    .HasColumnName("Бонус_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус04)
                    .HasColumnName("Бонус_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус05)
                    .HasColumnName("Бонус_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус06)
                    .HasColumnName("Бонус_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус07)
                    .HasColumnName("Бонус_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус08)
                    .HasColumnName("Бонус_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус09)
                    .HasColumnName("Бонус_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус10)
                    .HasColumnName("Бонус_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус11)
                    .HasColumnName("Бонус_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Бонус12)
                    .HasColumnName("Бонус_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга01)
                    .HasColumnName("Выслуга_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга02)
                    .HasColumnName("Выслуга_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга03)
                    .HasColumnName("Выслуга_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга04)
                    .HasColumnName("Выслуга_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга05)
                    .HasColumnName("Выслуга_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга06)
                    .HasColumnName("Выслуга_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга07)
                    .HasColumnName("Выслуга_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга08)
                    .HasColumnName("Выслуга_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга09)
                    .HasColumnName("Выслуга_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга10)
                    .HasColumnName("Выслуга_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга11)
                    .HasColumnName("Выслуга_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Выслуга12)
                    .HasColumnName("Выслуга_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ДнПл01)
                    .HasColumnName("Дн_пл01")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл02)
                    .HasColumnName("Дн_пл02")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл03)
                    .HasColumnName("Дн_пл03")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл04)
                    .HasColumnName("Дн_пл04")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл05)
                    .HasColumnName("Дн_пл05")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл06)
                    .HasColumnName("Дн_пл06")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл07)
                    .HasColumnName("Дн_пл07")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл08)
                    .HasColumnName("Дн_пл08")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл09)
                    .HasColumnName("Дн_пл09")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл10)
                    .HasColumnName("Дн_пл10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл11)
                    .HasColumnName("Дн_пл11")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнПл12)
                    .HasColumnName("Дн_пл12")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк01)
                    .HasColumnName("Дн_фк01")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк02)
                    .HasColumnName("Дн_фк02")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк03)
                    .HasColumnName("Дн_фк03")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк04)
                    .HasColumnName("Дн_фк04")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк05)
                    .HasColumnName("Дн_фк05")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк06)
                    .HasColumnName("Дн_фк06")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк07)
                    .HasColumnName("Дн_фк07")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк08)
                    .HasColumnName("Дн_фк08")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк09)
                    .HasColumnName("Дн_фк09")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк10)
                    .HasColumnName("Дн_фк10")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк11)
                    .HasColumnName("Дн_фк11")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДнФк12)
                    .HasColumnName("Дн_фк12")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Доплаты01)
                    .HasColumnName("Доплаты_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты02)
                    .HasColumnName("Доплаты_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты03)
                    .HasColumnName("Доплаты_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты04)
                    .HasColumnName("Доплаты_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты05)
                    .HasColumnName("Доплаты_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты06)
                    .HasColumnName("Доплаты_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты07)
                    .HasColumnName("Доплаты_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты08)
                    .HasColumnName("Доплаты_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты09)
                    .HasColumnName("Доплаты_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты10)
                    .HasColumnName("Доплаты_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты11)
                    .HasColumnName("Доплаты_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Доплаты12)
                    .HasColumnName("Доплаты_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.КИнд101)
                    .HasColumnName("К_Инд1_01")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд102)
                    .HasColumnName("К_Инд1_02")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд103)
                    .HasColumnName("К_Инд1_03")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд104)
                    .HasColumnName("К_Инд1_04")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд105)
                    .HasColumnName("К_Инд1_05")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд106)
                    .HasColumnName("К_Инд1_06")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд107)
                    .HasColumnName("К_Инд1_07")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд108)
                    .HasColumnName("К_Инд1_08")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд109)
                    .HasColumnName("К_Инд1_09")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд110)
                    .HasColumnName("К_Инд1_10")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд111)
                    .HasColumnName("К_Инд1_11")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд112)
                    .HasColumnName("К_Инд1_12")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд201)
                    .HasColumnName("К_Инд2_01")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд202)
                    .HasColumnName("К_Инд2_02")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд203)
                    .HasColumnName("К_Инд2_03")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд204)
                    .HasColumnName("К_Инд2_04")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд205)
                    .HasColumnName("К_Инд2_05")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд206)
                    .HasColumnName("К_Инд2_06")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд207)
                    .HasColumnName("К_Инд2_07")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд208)
                    .HasColumnName("К_Инд2_08")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд209)
                    .HasColumnName("К_Инд2_09")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд210)
                    .HasColumnName("К_Инд2_10")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд211)
                    .HasColumnName("К_Инд2_11")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд212)
                    .HasColumnName("К_Инд2_12")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КМво01)
                    .HasColumnName("К_МВО_01")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво02)
                    .HasColumnName("К_МВО_02")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво03)
                    .HasColumnName("К_МВО_03")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво04)
                    .HasColumnName("К_МВО_04")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво05)
                    .HasColumnName("К_МВО_05")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво06)
                    .HasColumnName("К_МВО_06")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво07)
                    .HasColumnName("К_МВО_07")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво08)
                    .HasColumnName("К_МВО_08")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво09)
                    .HasColumnName("К_МВО_09")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво10)
                    .HasColumnName("К_МВО_10")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво11)
                    .HasColumnName("К_МВО_11")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КМво12)
                    .HasColumnName("К_МВО_12")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Оклад01)
                    .HasColumnName("Оклад_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад02)
                    .HasColumnName("Оклад_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад03)
                    .HasColumnName("Оклад_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад04)
                    .HasColumnName("Оклад_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад05)
                    .HasColumnName("Оклад_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад06)
                    .HasColumnName("Оклад_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад07)
                    .HasColumnName("Оклад_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад08)
                    .HasColumnName("Оклад_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад09)
                    .HasColumnName("Оклад_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад10)
                    .HasColumnName("Оклад_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад11)
                    .HasColumnName("Оклад_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Оклад12)
                    .HasColumnName("Оклад_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания01)
                    .HasColumnName("Опоздания_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания01Мин).HasColumnName("Опоздания_01_мин");

                entity.Property(e => e.Опоздания02)
                    .HasColumnName("Опоздания_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания02Мин).HasColumnName("Опоздания_02_мин");

                entity.Property(e => e.Опоздания03)
                    .HasColumnName("Опоздания_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания03Мин).HasColumnName("Опоздания_03_мин");

                entity.Property(e => e.Опоздания04)
                    .HasColumnName("Опоздания_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания04Мин).HasColumnName("Опоздания_04_мин");

                entity.Property(e => e.Опоздания05)
                    .HasColumnName("Опоздания_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания05Мин).HasColumnName("Опоздания_05_мин");

                entity.Property(e => e.Опоздания06)
                    .HasColumnName("Опоздания_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания06Мин).HasColumnName("Опоздания_06_мин");

                entity.Property(e => e.Опоздания07)
                    .HasColumnName("Опоздания_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания07Мин).HasColumnName("Опоздания_07_мин");

                entity.Property(e => e.Опоздания08)
                    .HasColumnName("Опоздания_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания08Мин).HasColumnName("Опоздания_08_мин");

                entity.Property(e => e.Опоздания09)
                    .HasColumnName("Опоздания_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания09Мин).HasColumnName("Опоздания_09_мин");

                entity.Property(e => e.Опоздания10)
                    .HasColumnName("Опоздания_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания10Мин).HasColumnName("Опоздания_10_мин");

                entity.Property(e => e.Опоздания11)
                    .HasColumnName("Опоздания_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания11Мин).HasColumnName("Опоздания_11_мин");

                entity.Property(e => e.Опоздания12)
                    .HasColumnName("Опоздания_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Опоздания12Мин).HasColumnName("Опоздания_12_мин");

                entity.Property(e => e.Премия101)
                    .HasColumnName("Премия1_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия102)
                    .HasColumnName("Премия1_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия103)
                    .HasColumnName("Премия1_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия104)
                    .HasColumnName("Премия1_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия105)
                    .HasColumnName("Премия1_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия106)
                    .HasColumnName("Премия1_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия107)
                    .HasColumnName("Премия1_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия108)
                    .HasColumnName("Премия1_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия109)
                    .HasColumnName("Премия1_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия110)
                    .HasColumnName("Премия1_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия111)
                    .HasColumnName("Премия1_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия112)
                    .HasColumnName("Премия1_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия201)
                    .HasColumnName("Премия2_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия202)
                    .HasColumnName("Премия2_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия203)
                    .HasColumnName("Премия2_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия204)
                    .HasColumnName("Премия2_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия205)
                    .HasColumnName("Премия2_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия206)
                    .HasColumnName("Премия2_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия207)
                    .HasColumnName("Премия2_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия208)
                    .HasColumnName("Премия2_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия209)
                    .HasColumnName("Премия2_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия210)
                    .HasColumnName("Премия2_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия211)
                    .HasColumnName("Премия2_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Премия212)
                    .HasColumnName("Премия2_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж01)
                    .HasColumnName("Стаж_01")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж02)
                    .HasColumnName("Стаж_02")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж03)
                    .HasColumnName("Стаж_03")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж04)
                    .HasColumnName("Стаж_04")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж05)
                    .HasColumnName("Стаж_05")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж06)
                    .HasColumnName("Стаж_06")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж07)
                    .HasColumnName("Стаж_07")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж08)
                    .HasColumnName("Стаж_08")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж09)
                    .HasColumnName("Стаж_09")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж10)
                    .HasColumnName("Стаж_10")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж11)
                    .HasColumnName("Стаж_11")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Стаж12)
                    .HasColumnName("Стаж_12")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Утв01).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв02).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв03).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв04).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв05).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв06).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв07).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв08).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв09).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв10).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв11).HasDefaultValueSql("((0))");

                entity.Property(e => e.Утв12).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ЗОценкиДолж>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Оценки_долж");

                entity.HasIndex(e => new { e.Iddol, e.RecOценка })
                    .HasName("IX_З_Оценки_долж")
                    .IsUnique();

                entity.Property(e => e.Iddol).HasColumnName("IDdol");

                entity.Property(e => e.RecOценка)
                    .HasColumnName("Rec_Oценка")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КМво1)
                    .HasColumnName("К_МВО1")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво2)
                    .HasColumnName("К_МВО2")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво3)
                    .HasColumnName("К_МВО3")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво4)
                    .HasColumnName("К_МВО4")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво5)
                    .HasColumnName("К_МВО5")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво6)
                    .HasColumnName("К_МВО6")
                    .HasMaxLength(2);

                entity.Property(e => e.Ответственный).HasMaxLength(150);

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ЗОценкиСотр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Оценки_сотр");

                entity.HasIndex(e => new { e.Hid, e.RecOценка })
                    .HasName("IX_З_Оценки_сотр")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.RecOценка)
                    .HasColumnName("Rec_Oценка")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КМво1)
                    .HasColumnName("К_МВО1")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво2)
                    .HasColumnName("К_МВО2")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво3)
                    .HasColumnName("К_МВО3")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво4)
                    .HasColumnName("К_МВО4")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво5)
                    .HasColumnName("К_МВО5")
                    .HasMaxLength(2);

                entity.Property(e => e.КМво6)
                    .HasColumnName("К_МВО6")
                    .HasMaxLength(2);

                entity.Property(e => e.Ответственный).HasMaxLength(150);

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ЗПоказатели>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_показатели");

                entity.HasIndex(e => new { e.Год, e.Месяц })
                    .HasName("IX_З_показатели")
                    .IsUnique();

                entity.Property(e => e.ВыпускБолгария)
                    .HasColumnName("Выпуск Болгария")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ВыпускСосенка)
                    .HasColumnName("Выпуск Сосенка")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ВыпускУзмк)
                    .HasColumnName("Выпуск УЗМК")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Доход).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходDib)
                    .HasColumnName("Доход DIB")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходDibМебель)
                    .HasColumnName("Доход DIB мебель")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходБолгария)
                    .HasColumnName("Доход Болгария")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходДвери)
                    .HasColumnName("Доход Двери")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходМебель)
                    .HasColumnName("Доход Мебель")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходСейфы)
                    .HasColumnName("Доход Сейфы")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходСосенка)
                    .HasColumnName("Доход Сосенка")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ДоходУзмк)
                    .HasColumnName("Доход УЗМК")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Продажи).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.РасчетЗакончен).HasColumnName("Расчет закончен");
            });

            modelBuilder.Entity<ЗПоказателиБренд>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_показатели_бренд");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.Регион })
                    .HasName("IX_З_показатели_бренд")
                    .IsUnique();

                entity.Property(e => e.ДоходДвери)
                    .HasColumnName("Доход_двери")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ИздержкиДвери)
                    .HasColumnName("Издержки_двери")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КорректировкаИздержекФилиала)
                    .HasColumnName("Корректировка издержек филиала")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОплатыДвери)
                    .HasColumnName("Оплаты_двери")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПланДвери)
                    .HasColumnName("План_двери")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ФактДвери)
                    .HasColumnName("Факт_двери")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ЗПоложение>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Положение");

                entity.HasIndex(e => e.Hid)
                    .HasName("IX_З_Положение")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.БонуснаяЧасть)
                    .HasColumnName("Бонусная часть")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ДатаДействияС)
                    .HasColumnName("Дата действия с")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КИнд1)
                    .HasColumnName("К_Инд1")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.КИнд2)
                    .HasColumnName("К_Инд2")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.Оклад).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<ЗПоложениеЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Положение_зависимости");

                entity.HasIndex(e => new { e.Hid, e.ВыпускДо, e.ВыпускОт })
                    .HasName("IX_З_Положение_зависимости")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.БонуснаяЧасть)
                    .HasColumnName("Бонусная часть")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ВыпускДо)
                    .HasColumnName("Выпуск_до")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВыпускОт)
                    .HasColumnName("Выпуск_от")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Оклад).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<ЗПоложениеОценки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("З_Положение_Оценки");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_З_Положение_Оценки_1")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Вес).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Ответственный)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ЗаготовкаОтчетФин>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заготовка_отчет_фин");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Источник).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ПерваяДата)
                    .HasColumnName("Первая дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.ФилиалОтч).HasColumnName("Филиал_отч");
            });

            modelBuilder.Entity<ЗаказыПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Заказы поставки");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Заказы поставки")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Аннулирована)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаРеализации)
                    .HasColumnName("Дата реализации")
                    .HasColumnType("datetime");

                entity.Property(e => e.Ед1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед10)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед4)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед5)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед6)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед7)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед8)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед9)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Значение1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий10)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий4)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий5)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий6)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий7)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий8)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий9)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.Отправка).HasDefaultValueSql("(0)");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Срок).HasColumnType("datetime");
            });

            modelBuilder.Entity<ЗаказыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Заказы регион");

                entity.HasIndex(e => e.NSub)
                    .HasName("IX_Заказы регион_2");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Заказы регион_1");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Заказы регион")
                    .IsUnique();

                entity.Property(e => e.AddedBy).HasMaxLength(256);

                entity.Property(e => e.CustomerEmail).HasMaxLength(256);

                entity.Property(e => e.CustomerFax).HasMaxLength(50);

                entity.Property(e => e.CustomerPhone).HasMaxLength(50);

                entity.Property(e => e.Ext).HasMaxLength(20);

                entity.Property(e => e.ExtТз)
                    .HasColumnName("Ext_ТЗ")
                    .HasMaxLength(20);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdМашины)
                    .HasColumnName("ID машины")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФилиала)
                    .HasColumnName("ID филиала")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NSub)
                    .HasColumnName("N_SUB")
                    .HasMaxLength(50);

                entity.Property(e => e.ShippedDate).HasColumnType("datetime");

                entity.Property(e => e.Shipping).HasColumnType("money");

                entity.Property(e => e.ShippingCity).HasMaxLength(256);

                entity.Property(e => e.ShippingCountry).HasMaxLength(256);

                entity.Property(e => e.ShippingFirstName).HasMaxLength(256);

                entity.Property(e => e.ShippingLastName).HasMaxLength(256);

                entity.Property(e => e.ShippingMethod).HasMaxLength(256);

                entity.Property(e => e.ShippingPostalCode).HasMaxLength(50);

                entity.Property(e => e.ShippingState).HasMaxLength(256);

                entity.Property(e => e.ShippingStreet).HasMaxLength(256);

                entity.Property(e => e.StatusId)
                    .HasColumnName("StatusID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusIdKat)
                    .HasColumnName("StatusID_kat")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.StatusIdKatB)
                    .HasColumnName("StatusID_kat_B")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SubTotal).HasColumnType("money");

                entity.Property(e => e.TrackingId)
                    .HasColumnName("TrackingID")
                    .HasMaxLength(256);

                entity.Property(e => e.TransactionId)
                    .HasColumnName("TransactionID")
                    .HasMaxLength(256);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.UserIdБренд).HasColumnName("User ID_бренд");

                entity.Property(e => e.UserIdПроизв).HasColumnName("User ID_произв");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаГруппировки)
                    .HasColumnName("Дата группировки")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаЖелаемая)
                    .HasColumnName("Дата желаемая")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаКогдаПроставилоПроизводство)
                    .HasColumnName("Дата когда проставило производство")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаКонтсруктора)
                    .HasColumnName("Дата контсруктора")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаОжидаемая)
                    .HasColumnName("Дата ожидаемая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРеализации)
                    .HasColumnName("Дата реализации")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КтоОтПроизводства)
                    .HasColumnName("Кто от производства")
                    .HasMaxLength(150);

                entity.Property(e => e.Маркировка).HasMaxLength(150);

                entity.Property(e => e.Ответственный).HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.ПринятоВПроизводство)
                    .HasColumnName("Принято в производство")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Срок).HasColumnType("datetime");

                entity.Property(e => e.Техзадание).HasColumnType("image");

                entity.Property(e => e.ТипКонструкции)
                    .HasColumnName("Тип_конструкции")
                    .HasMaxLength(50);

                entity.Property(e => e.Файл).HasColumnType("image");

                entity.Property(e => e.Филиал).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ЗаказыТовар>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заказы товар");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Примечание).HasMaxLength(150);
            });

            modelBuilder.Entity<ЗапросПоНоменклатуре>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Запрос по номенклатуре");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.Art)
                    .HasColumnName("ART")
                    .HasMaxLength(50);

                entity.Property(e => e.DopKod)
                    .HasColumnName("Dop_kod")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(13);

                entity.Property(e => e.GroupN)
                    .HasColumnName("GROUP_n")
                    .HasMaxLength(50);

                entity.Property(e => e.IdGr).HasColumnName("ID_GR");

                entity.Property(e => e.IdIzd)
                    .HasColumnName("Id_Izd")
                    .HasMaxLength(50);

                entity.Property(e => e.IdIzdU).HasColumnName("Id_Izd_u");

                entity.Property(e => e.IdPlantType39).HasColumnName("ID_PLANT_TYPE_39");

                entity.Property(e => e.IdPlantType42).HasColumnName("ID_PLANT_TYPE_42");

                entity.Property(e => e.IdPlantType44).HasColumnName("ID_PLANT_TYPE_44");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Lb).HasColumnName("LB");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.OrangeSos).HasColumnName("Orange_SOS");

                entity.Property(e => e.PrType)
                    .HasColumnName("PR_TYPE")
                    .HasMaxLength(1);

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.QuantityProducedDay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QuantityProducedDay39)
                    .HasColumnName("QuantityProducedDay_39")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QuantityProducedDay44)
                    .HasColumnName("QuantityProducedDay_44")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RedSos).HasColumnName("Red_SOS");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.StopSos).HasColumnName("Stop_SOS");

                entity.Property(e => e.TmpIdent).HasColumnName("TMP_IDENT");

                entity.Property(e => e.YellowSos).HasColumnName("Yellow_SOS");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БуферBg).HasColumnName("Буфер_BG");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.ВремяПогрузки)
                    .HasColumnName("Время погрузки")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ВысотаМм).HasColumnName("Высота мм");

                entity.Property(e => e.ГлубинаМм).HasColumnName("Глубина мм");

                entity.Property(e => e.ГрупповойРасчет).HasColumnName("Групповой расчет");

                entity.Property(e => e.ДатаЗапуска)
                    .HasColumnName("Дата запуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаМодернизации)
                    .HasColumnName("Дата модернизации")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаНовогоОборудования)
                    .HasColumnName("Дата нового оборудования")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаПервогоПрихода)
                    .HasColumnName("Дата первого прихода")
                    .HasColumnType("date");

                entity.Property(e => e.Замок).HasMaxLength(50);

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодBg)
                    .HasColumnName("Код BG")
                    .HasMaxLength(20);

                entity.Property(e => e.КодОкраски)
                    .HasColumnName("Код окраски")
                    .HasMaxLength(2);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КоличествоУпаковокВШт).HasColumnName("Количество упаковок в шт");

                entity.Property(e => e.КратностьСосенки)
                    .HasColumnName("Кратность_Сосенки")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КратностьУзмкОбязательная)
                    .HasColumnName("Кратность_УЗМК_обязательная")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Мжз).HasColumnName("МЖЗ");

                entity.Property(e => e.МинПартия).HasColumnName("Мин_партия");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.МощностьSos).HasColumnName("Мощность_SOS");

                entity.Property(e => e.МощностьUzmk).HasColumnName("Мощность_UZMK");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBg)
                    .HasColumnName("Наименование BG")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.НаименованиеУкраинское)
                    .HasColumnName("Наименование украинское")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.ПорогБольшихОтгрузок).HasColumnName("Порог_больших_отгрузок");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Статус2010)
                    .HasColumnName("Статус_2010")
                    .HasMaxLength(2);

                entity.Property(e => e.СтатусДоходности).HasColumnName("Статус_доходности");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");

                entity.Property(e => e.УтвержденоКонстр).HasColumnName("Утверждено_констр");

                entity.Property(e => e.ШиринаМм).HasColumnName("Ширина мм");

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ЗаявкиБезДолга>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки без долга");
            });

            modelBuilder.Entity<ЗаявкиБезДолгаДол>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки без долга дол");
            });

            modelBuilder.Entity<ЗаявкиБезОплатыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки без оплаты регион");
            });

            modelBuilder.Entity<ЗаявкиНаПогрузкуНаНеделю>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки на погрузку на неделю");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Название).HasMaxLength(70);

                entity.Property(e => e.НомерВОплате).HasColumnName("Номер в оплате");

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ЗаявкиНаУдаление>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки на удаление");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ЗаявкиНаУдалениеЗавтра>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки на удаление завтра");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.ИмяРегистрации)
                    .HasColumnName("Имя регистрации")
                    .HasMaxLength(50);

                entity.Property(e => e.Название).HasMaxLength(70);

                entity.Property(e => e.НомерВОплате).HasColumnName("Номер в оплате");

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ЗаявкиНаУдалениеОмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки на удаление ОМП");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ЗаявкиНаУдалениеРегионы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки на удаление регионы");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<ЗаявкиНаУдалениеУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки на удаление УЗМК");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<ЗаявкиНеоплаченныеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки неоплаченные регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");
            });

            modelBuilder.Entity<ЗаявкиОплаченныеДляРаспискиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки оплаченные для расписки регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ЗаявкиОтДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Заявки от дилеров");

                entity.HasIndex(e => e.IdАдреса)
                    .HasName("IX_Заявки от дилеров_4");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_Заявки от дилеров_1");

                entity.HasIndex(e => e.IdСтадии)
                    .HasName("IX_Заявки от дилеров_6");

                entity.HasIndex(e => e.IdЮрлица)
                    .HasName("IX_Заявки от дилеров_5");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Заявки от дилеров_2");

                entity.HasIndex(e => e.Накладная)
                    .HasName("IX_Заявки от дилеров_3");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Заявки от дилеров")
                    .IsUnique();

                entity.Property(e => e.IdАдреса)
                    .HasColumnName("ID адреса")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВодителя)
                    .HasColumnName("ID водителя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЗаказчикаТранспорта)
                    .HasColumnName("ID заказчика транспорта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПункта)
                    .HasColumnName("ID пункта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтадии)
                    .HasColumnName("ID стадии")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdУсловийПоставки)
                    .HasColumnName("ID условий поставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordРекламация)
                    .HasColumnName("Record_рекламация")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UsdRu)
                    .HasColumnName("USD_RU")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Вес).HasDefaultValueSql("((0))");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ВыписанаСчетФактура).HasColumnName("Выписана счет-фактура");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЖелаемая)
                    .HasColumnName("Дата желаемая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДляКого).HasColumnName("Для кого");

                entity.Property(e => e.Доставка).HasDefaultValueSql("((0))");

                entity.Property(e => e.Закрыта).HasDefaultValueSql("((0))");

                entity.Property(e => e.Затраты)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КолПаллеты)
                    .HasColumnName("Кол_паллеты")
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.КтоДопСкидку)
                    .HasColumnName("Кто_доп_скидку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КурсEur)
                    .HasColumnName("Курс EUR")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.КурсВалюты)
                    .HasColumnName("Курс валюты")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasDefaultValueSql("((0))");

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерФилиала).HasColumnName("Номер_филиала");

                entity.Property(e => e.Объем)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Отсрочка).HasDefaultValueSql("((0))");

                entity.Property(e => e.ОтсрочкаПродленная).HasColumnName("Отсрочка_продленная");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПримечаниеНеДляПечати)
                    .HasColumnName("Примечание не для печати")
                    .HasMaxLength(255);

                entity.Property(e => e.ПричинаОтсрочки)
                    .HasColumnName("Причина отсрочки")
                    .HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаДоп)
                    .HasColumnName("Скидка_доп")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаЗаНал)
                    .HasColumnName("Скидка_за_нал")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаНал)
                    .HasColumnName("Скидка_нал")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаОбъем)
                    .HasColumnName("Скидка_объем")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаОтсрочка)
                    .HasColumnName("Скидка_отсрочка")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПросрочка)
                    .HasColumnName("Скидка_просрочка")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаСез)
                    .HasColumnName("Скидка_сез")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаСезонность)
                    .HasColumnName("Скидка_сезонность")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Склад).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Срок).HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<ЗаявкиОтДилеров1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки от дилеров_");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdВодителя).HasColumnName("ID водителя");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЗаказчикаТранспорта).HasColumnName("ID заказчика транспорта");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdПункта).HasColumnName("ID пункта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdСтадии).HasColumnName("ID стадии");

                entity.Property(e => e.IdУсловийПоставки).HasColumnName("ID условий поставки");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ВыписанаСчетФактура).HasColumnName("Выписана счет-фактура");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЖелаемая)
                    .HasColumnName("Дата желаемая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Затраты).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КолПаллеты)
                    .HasColumnName("Кол_паллеты")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.КтоДопСкидку).HasColumnName("Кто_доп_скидку");

                entity.Property(e => e.КурсВалюты)
                    .HasColumnName("Курс валюты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерФилиала).HasColumnName("Номер_филиала");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СкидкаДоп)
                    .HasColumnName("Скидка_доп")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПросрочка).HasColumnName("Скидка_просрочка");

                entity.Property(e => e.Срок).HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<ЗаявкиОтДилеровПоставки>(entity =>
            {
                entity.HasKey(e => e.Номер);

                entity.ToTable("Заявки от дилеров поставки");

                entity.HasIndex(e => e.FactoryId)
                    .HasName("IX_Заявки от дилеров поставки");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_Заявки от дилеров поставки_1");

                entity.HasIndex(e => new { e.Номер, e.ФирмаПлательщик })
                    .HasName("IX_Заявки от дилеров поставки_Firma");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.CurrentEditUserId).HasColumnName("CurrentEditUserID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВалюты).HasColumnName("ID Валюты");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОперации).HasColumnName("ID операции");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((11))");

                entity.Property(e => e.IdЮрЛица).HasColumnName("ID ЮрЛица");

                entity.Property(e => e.InsideNbr).HasMaxLength(50);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Вес).HasDefaultValueSql("((0))");

                entity.Property(e => e.ВидОплаты)
                    .HasColumnName("Вид оплаты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаПодтверждения)
                    .HasColumnName("Дата подтверждения")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПечатный)
                    .HasColumnName("Номер_печатный")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерСф)
                    .HasColumnName("Номер СФ")
                    .HasMaxLength(50);

                entity.Property(e => e.Объем)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ответственные).HasMaxLength(100);

                entity.Property(e => e.Отсрочка).HasDefaultValueSql("((0))");

                entity.Property(e => e.СтатусЗаказа).HasColumnName("Статус заказа");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ФирмаПлательщик).HasColumnName("Фирма_Плательщик");
            });

            modelBuilder.Entity<ЗаявкиОтДилеровПоставкиOld>(entity =>
            {
                entity.HasKey(e => e.Номер);

                entity.ToTable("Заявки от дилеров поставки_OLD");

                entity.Property(e => e.Номер).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.CurrentEditUserId).HasColumnName("CurrentEditUserID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdВалюты).HasColumnName("ID Валюты");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОперации).HasColumnName("ID операции");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрЛица).HasColumnName("ID ЮрЛица");

                entity.Property(e => e.InsideNbr).HasMaxLength(50);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПодтверждения)
                    .HasColumnName("Дата подтверждения")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПечатный)
                    .HasColumnName("Номер_печатный")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерСф)
                    .HasColumnName("Номер СФ")
                    .HasMaxLength(50);

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ответственные).HasMaxLength(100);

                entity.Property(e => e.СтатусЗаказа).HasColumnName("Статус заказа");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ФирмаПлательщик).HasColumnName("Фирма_Плательщик");
            });

            modelBuilder.Entity<ЗаявкиОтДилеровПоставкиДо2018>(entity =>
            {
                entity.HasKey(e => e.Номер);

                entity.ToTable("Заявки от дилеров поставки до 2018");

                entity.Property(e => e.Номер).ValueGeneratedNever();

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.CurrentEditUserId).HasColumnName("CurrentEditUserID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВалюты).HasColumnName("ID Валюты");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОперации).HasColumnName("ID операции");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((11))");

                entity.Property(e => e.IdЮрЛица).HasColumnName("ID ЮрЛица");

                entity.Property(e => e.InsideNbr).HasMaxLength(50);

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Total)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Вес).HasDefaultValueSql("((0))");

                entity.Property(e => e.ВидОплаты)
                    .HasColumnName("Вид оплаты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаПодтверждения)
                    .HasColumnName("Дата подтверждения")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПечатный)
                    .HasColumnName("Номер_печатный")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерСф)
                    .HasColumnName("Номер СФ")
                    .HasMaxLength(50);

                entity.Property(e => e.Объем)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ответственные).HasMaxLength(100);

                entity.Property(e => e.Отсрочка).HasDefaultValueSql("((0))");

                entity.Property(e => e.СтатусЗаказа).HasColumnName("Статус заказа");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ФирмаПлательщик).HasColumnName("Фирма_Плательщик");
            });

            modelBuilder.Entity<ЗаявкиОтДилеровРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Заявки от дилеров регион");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Заявки от дилеров регион_3");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Заявки от дилеров регион_2");

                entity.HasIndex(e => e.ДатаПлановая)
                    .HasName("IX_Заявки от дилеров регион_4");

                entity.HasIndex(e => new { e.IdДилера, e.KlientReg })
                    .HasName("IX_Заявки от дилеров регион_1");

                entity.HasIndex(e => new { e.KlientSvoj, e.KlientRegSvoj })
                    .HasName("IX_Заявки от дилеров регион_5");

                entity.HasIndex(e => new { e.Номер, e.Регион })
                    .HasName("IX_Заявки от дилеров регион")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => new { e.Номер, e.IdДилера, e.Регион, e.Дата, e.Закрыта })
                    .HasName("INDEX_IX_Дата_Закрыта_DESC");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdВодителя).HasColumnName("ID водителя");

                entity.Property(e => e.IdГородаРазгрузки).HasColumnName("ID города разгрузки");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЗаказчикаТранспорта)
                    .HasColumnName("ID заказчика транспорта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПункта).HasColumnName("ID пункта");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Klient).HasDefaultValueSql("((0))");

                entity.Property(e => e.KlientReg).HasDefaultValueSql("((0))");

                entity.Property(e => e.KlientRegSvoj).HasDefaultValueSql("((0))");

                entity.Property(e => e.KlientSvoj).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.RecordРекламация)
                    .HasColumnName("Record_рекламация")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UsdRu)
                    .HasColumnName("USD_RU")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВыписанаСчетФактура).HasColumnName("Выписана счет-фактура");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПодтверждения)
                    .HasColumnName("Дата подтверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДляКого).HasColumnName("Для кого");

                entity.Property(e => e.ДляКогоФикт).HasColumnName("Для кого_фикт");

                entity.Property(e => e.ДляКогоЮл).HasColumnName("Для кого_юл");

                entity.Property(e => e.Доставка).HasDefaultValueSql("((0))");

                entity.Property(e => e.ДоходКому).HasColumnName("Доход_кому");

                entity.Property(e => e.ДоходСколько)
                    .HasColumnName("Доход_сколько")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Закрыта).HasDefaultValueSql("((0))");

                entity.Property(e => e.ИспользоватьКратность)
                    .HasColumnName("Использовать кратность")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Кому).HasMaxLength(50);

                entity.Property(e => e.КтоДопСкидку)
                    .HasColumnName("Кто_доп_скидку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.КурсEur)
                    .HasColumnName("Курс EUR")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.ОснованиеУпд)
                    .HasColumnName("Основание УПД")
                    .HasMaxLength(255);

                entity.Property(e => e.Основная).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ответственные).HasMaxLength(100);

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.ОтсрочкаПродленная)
                    .HasColumnName("Отсрочка_продленная")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Премия)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПримечаниеНеДляПечати)
                    .HasColumnName("Примечание не для печати")
                    .HasMaxLength(255);

                entity.Property(e => e.ПричинаОтсрочки)
                    .HasColumnName("Причина отсрочки")
                    .HasMaxLength(255);

                entity.Property(e => e.Реклама).HasDefaultValueSql("((0))");

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.СамовывозИзМосквы)
                    .HasColumnName("Самовывоз из Москвы")
                    .HasDefaultValueSql("((6))");

                entity.Property(e => e.Секретно).HasDefaultValueSql("((0))");

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаДоп)
                    .HasColumnName("Скидка_доп")
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаНал)
                    .HasColumnName("Скидка_нал")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаОбъем)
                    .HasColumnName("Скидка_объем")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаОтсрочка)
                    .HasColumnName("Скидка_отсрочка")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПросрочка)
                    .HasColumnName("Скидка_просрочка")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаСез)
                    .HasColumnName("Скидка_сез")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Склад).HasDefaultValueSql("((-1))");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Срок)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СрокОплаты)
                    .HasColumnName("Срок оплаты")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<ЗаявкиОтпущенныеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки отпущенные регион");
            });

            modelBuilder.Entity<ЗаявкиПеремещенияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки перемещения регион");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ЗаявкиСВыписанСчет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки с выписан счет");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ЗаявкиСДолгомНоОплачены>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки с долгом но оплачены");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ЗаявкиСОплатойРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки с оплатой регион");
            });

            modelBuilder.Entity<ЗаявкиСУслугами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Заявки с услугами");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаДоставки)
                    .HasColumnName("Сумма доставки")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ИзмененияАртикулаСкладскойПрограммы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Изменения артикула складской программы");

                entity.HasIndex(e => e.IdКонструкции)
                    .HasName("IX_Изменения артикула складской программы_1")
                    .IsUnique();

                entity.Property(e => e.IdЗамка)
                    .HasColumnName("ID замка")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdИсполнения)
                    .HasColumnName("ID исполнения")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdПанелиВн)
                    .HasColumnName("ID панели_вн")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdПанелиВнут)
                    .HasColumnName("ID панели_внут")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdУпаковки)
                    .HasColumnName("ID упаковки")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.КодВн)
                    .HasColumnName("Код_вн")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.КодВнут)
                    .HasColumnName("Код_внут")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.КодОкраска)
                    .HasColumnName("Код окраска")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(8)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Информер>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Информер")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОтгрузки)
                    .HasColumnName("Вид отгрузки")
                    .HasMaxLength(150);

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаРед)
                    .HasColumnName("Дата ред")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДеньНедели)
                    .HasColumnName("День недели")
                    .HasMaxLength(50);

                entity.Property(e => e.Итого).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КСл)
                    .HasColumnName("К сл")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Менеджер).HasMaxLength(50);

                entity.Property(e => e.Направление)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Статус).HasMaxLength(20);
            });

            modelBuilder.Entity<ИсключениеИзСкидки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Исключение из скидки");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Исключение из скидки")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ИсторияАвс>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("История АВС");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_История АВС")
                    .IsUnique();

                entity.Property(e => e.А).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Аz)
                    .HasColumnName("АZ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.В).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Вz)
                    .HasColumnName("ВZ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();

                entity.Property(e => e.С).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сz)
                    .HasColumnName("СZ")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Тип).HasMaxLength(5);
            });

            modelBuilder.Entity<ИсторияГтд>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("История ГТД");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ИсторияЛогистики>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("История логистики");

                entity.HasIndex(e => new { e.ДатаДо, e.ДатаОд, e.IdСклада })
                    .HasName("IX_История логистики")
                    .IsUnique();

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаДо)
                    .HasColumnName("Дата_до")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОд)
                    .HasColumnName("Дата_од")
                    .HasColumnType("datetime");

                entity.Property(e => e.Увеличение).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ИсторияОплатыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("История оплаты регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Год)
                    .HasColumnName("Год_")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер_порядковый");

                entity.Property(e => e.Резерв)
                    .HasColumnName("Резерв $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.РезервR)
                    .HasColumnName("Резерв R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ИсторияЦен>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("История цен");

                entity.HasIndex(e => new { e.IdТовара, e.ДатаДо, e.ДатаОд })
                    .HasName("IX_История цен")
                    .IsUnique();

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.ДатаДо)
                    .HasColumnName("Дата_до")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОд)
                    .HasColumnName("Дата_од")
                    .HasColumnType("datetime");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ИсходныеДанные>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Исходные данные");

                entity.HasIndex(e => new { e.ЗаМесяцИндекс, e.Год })
                    .HasName("IX_Исходные данные")
                    .IsUnique();

                entity.Property(e => e.БлокировкаВвода)
                    .HasColumnName("Блокировка ввода")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЗаМесяцИндекс).HasColumnName("За месяц(индекс)");

                entity.Property(e => e.Комиссия).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КтоВвел)
                    .HasColumnName("Кто ввел")
                    .HasMaxLength(50);

                entity.Property(e => e.Курс).HasColumnType("decimal(12, 4)");

                entity.Property(e => e.КурсНаПоследнийДеньМесяца)
                    .HasColumnName("Курс на последний день месяца")
                    .HasColumnType("decimal(12, 4)");

                entity.Property(e => e.ОбщиеПродажиПоИпорту)
                    .HasColumnName("Общие продажи по ипорту")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбщиеТранспортныеРасходы)
                    .HasColumnName("Общие транспортные расходы")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПроизводствоМебель)
                    .HasColumnName("Производство мебель")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПроизводствоСейфы)
                    .HasColumnName("Производство сейфы")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<Календарь>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Календарь")
                    .IsUnique();

                entity.Property(e => e.Сотировка)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Калькулятор>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Изменение, e.Категория })
                    .HasName("IX_Калькулятор")
                    .IsUnique();

                entity.Property(e => e.Изменение).HasMaxLength(255);

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.Процент).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<Кампании>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Кампании")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdКампании)
                    .HasColumnName("ID кампании")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("(1)");
            });

            modelBuilder.Entity<КанбанТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Канбан_тмп");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Канбан_тмп")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Red).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Stop).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Vputikl)
                    .HasColumnName("vputikl")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Yellow).HasColumnType("decimal(18, 3)");

                entity.Property(e => e._1Дн1)
                    .HasColumnName("1 дн_")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e._1дн)
                    .HasColumnName("1дн")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e._2Дн)
                    .HasColumnName("2 дн")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e._2Дн1)
                    .HasColumnName("2 дн_")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e._3Дн1)
                    .HasColumnName("3 дн")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e._3дн)
                    .HasColumnName("3дн")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул)
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Модель)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .HasMaxLength(70)
                    .IsFixedLength();

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(11)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<КарточкаАрхивВозвратовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Карточка-архив-возвратов регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаЗаписи)
                    .IsRequired()
                    .HasColumnName("Дата записи")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.Клиент)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.КоличествоОплаченное).HasColumnName("Количество оплаченное");

                entity.Property(e => e.НомерНакл)
                    .IsRequired()
                    .HasColumnName("Номер накл")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.НомерПрядковый).HasColumnName("Номер прядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отпущено).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<КарточкаНачалоВыставкаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Карточка-начало-выставка регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаЗаписи)
                    .HasColumnName("Дата записи")
                    .HasColumnType("datetime");

                entity.Property(e => e.Клиент)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.КоличествоОплаченное).HasColumnName("Количество оплаченное");

                entity.Property(e => e.НомерНакл)
                    .IsRequired()
                    .HasColumnName("Номер накл")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.НомерПрядковый).HasColumnName("Номер прядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отпущено).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<КарточкаНачалоРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Карточка-начало регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordРекламации).HasColumnName("Record_рекламации");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаЗаписи)
                    .IsRequired()
                    .HasColumnName("Дата записи")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Накладной)
                    .IsRequired()
                    .HasColumnName("№ накладной")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.Поступило).HasColumnType("decimal(12, 3)");
            });

            modelBuilder.Entity<КарточкаПриходРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Карточка-приход регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаписи)
                    .HasColumnName("Дата записи")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование).HasMaxLength(307);

                entity.Property(e => e.Накладной)
                    .HasColumnName("№ Накладной")
                    .HasMaxLength(50);

                entity.Property(e => e.Поставщик).HasMaxLength(20);

                entity.Property(e => e.Поступило).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<КарточкаРасходВыставкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Карточка-расход-выставки регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаписи)
                    .HasColumnName("Дата записи")
                    .HasColumnType("datetime");

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Недогружено).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(48);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отпущено).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Склад).HasMaxLength(150);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<КарточкаРасходРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Карточка-расход регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаписи)
                    .HasColumnName("Дата записи")
                    .HasColumnType("datetime");

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Недогружено).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(35);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отпущено).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Подтверждено).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Склад).HasMaxLength(510);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<КаталогДляСайта>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Каталог для сайта");

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(13);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Взломостойкость).HasMaxLength(20);

                entity.Property(e => e.ВнутреннийОбъем).HasColumnName("Внутренний объем");

                entity.Property(e => e.ВысотаВн).HasColumnName("Высота вн");

                entity.Property(e => e.ВысотаМм).HasColumnName("Высота мм");

                entity.Property(e => e.ГарантийныйСрок).HasColumnName("Гарантийный срок");

                entity.Property(e => e.ГлубинаВн).HasColumnName("Глубина вн");

                entity.Property(e => e.ГлубинаМм).HasColumnName("Глубина мм");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.КассовоеОтделение).HasColumnName("Кассовое отделение");

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КолВоПолок).HasColumnName("Кол-во полок");

                entity.Property(e => e.КоличествоБатареек).HasColumnName("Количество батареек");

                entity.Property(e => e.КоличествоБатареекАа).HasColumnName("Количество батареек АА");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КоличествоУпаковокВШт).HasColumnName("Количество упаковок в шт");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерСертификата)
                    .HasColumnName("Номер сертификата")
                    .HasMaxLength(50);

                entity.Property(e => e.Описание).HasMaxLength(150);

                entity.Property(e => e.ОписаниеКодаТнвд)
                    .HasColumnName("Описание кода ТНВД")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Сертификат).HasMaxLength(20);

                entity.Property(e => e.СменяКода).HasColumnName("Сменя кода");

                entity.Property(e => e.СрокСлужбы).HasColumnName("Срок службы");

                entity.Property(e => e.Стандарт).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы)
                    .HasColumnName("Тип группы")
                    .HasMaxLength(50);

                entity.Property(e => e.ШиринаВн).HasColumnName("Ширина вн");

                entity.Property(e => e.ШиринаМм).HasColumnName("Ширина мм");

                entity.Property(e => e.Штрихкод).HasMaxLength(30);

                entity.Property(e => e.ЭлектронныйЗамок).HasColumnName("Электронный замок");
            });

            modelBuilder.Entity<КаталогИмпорт>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Каталог ИМПОРТ");

                entity.Property(e => e.IdДубль1)
                    .HasColumnName("ID дубль1")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.IdДубль2)
                    .HasColumnName("ID дубль2")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sign1)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.Sign2)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.Sign3)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.Артикул)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.Менеджер).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.НаименованиеДубль1)
                    .HasColumnName("Наименование дубль1")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.НаименованиеДубль2)
                    .HasColumnName("Наименование дубль2")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.СтАртикулДубль1)
                    .HasColumnName("Ст артикул дубль1")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.СтАртикулДубль2)
                    .HasColumnName("Ст артикул дубль2")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.СтароеНаименование)
                    .HasColumnName("Старое наименование")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.СтарыйАртикул)
                    .HasColumnName("Старый артикул")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.ТоварнаяГруппа)
                    .HasColumnName("Товарная группа")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.ТоварнаяКатегория)
                    .HasColumnName("Товарная категория")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.ТоварнаяПодгруппа)
                    .HasColumnName("Товарная подгруппа")
                    .HasMaxLength(200)
                    .IsFixedLength();
            });

            modelBuilder.Entity<КатегорииТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Категории товара");

                entity.HasIndex(e => e.Кат)
                    .HasName("IX_Категории товара")
                    .IsUnique();

                entity.Property(e => e.Катег)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<КлиентЗДоступы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Клиент_з_доступы");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");
            });

            modelBuilder.Entity<КлиентМенеджер>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Клиент-Менеджер");

                entity.Property(e => e.Имя)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<КлиентМенеждер>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Клиент - менеждер_");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.LastOfЧейКлиент).HasColumnName("LastOfЧей клиент");
            });

            modelBuilder.Entity<КлиентыСвежие>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Клиенты свежие");

                entity.Property(e => e.IdКонтрагента).HasColumnName("ID контрагента");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<КодГородаСкладаВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Код города склада_все");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Название).HasMaxLength(50);
            });

            modelBuilder.Entity<КодГородаСкладаВсеBlg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Код города склада_все BLG");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Название).HasMaxLength(30);
            });

            modelBuilder.Entity<КодыЗаказов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Коды заказов");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<КодыЗаказовДляИстории>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Коды заказов для истории");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<КодыЗаказовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Коды заказов регион");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<КоличествоВСчетахИзЗаказов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Количество в счетах из заказов");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолВСчетах)
                    .HasColumnName("Кол в счетах")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<КоличествоВСчетахИзЗаказовBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Количество в счетах из заказов BG");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order No")
                    .HasMaxLength(20);

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолВСчетах)
                    .HasColumnName("Кол в счетах")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<КоличествоВСчетахИзЗаказовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Количество в счетах из заказов регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.КолВСчетах)
                    .HasColumnName("Кол в счетах")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<КоличествоВСчетахИзЗаказовСДатами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Количество в счетах из заказов с датами");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолВСчетах)
                    .HasColumnName("Кол в счетах")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<КоличествоВСчетахИзЗаказовЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Количество в счетах из заказов ЦО");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.КолВСчетах)
                    .HasColumnName("Кол в счетах")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<Комплектация>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdOrder)
                    .HasName("IX_Комплектация");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("ID_Комплектация1")
                    .IsUnique();

                entity.Property(e => e.IdOrder)
                    .HasColumnName("ID order")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdПоставщика)
                    .HasColumnName("ID поставщика")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.ВариантКомплектации)
                    .HasColumnName("Вариант комплектации")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЕдиницаИзмерения)
                    .HasColumnName("Единица измерения")
                    .HasMaxLength(10);

                entity.Property(e => e.ИзменеияВнес)
                    .HasColumnName("Изменеия внес")
                    .HasMaxLength(50);

                entity.Property(e => e.КоличествоЗаявленное)
                    .HasColumnName("Количество заявленное")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.КоличествоМест)
                    .HasColumnName("Количество  мест")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Модель).HasMaxLength(50);

                entity.Property(e => e.Модификация).HasMaxLength(20);

                entity.Property(e => e.Назначение).HasMaxLength(100);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерЗаказа)
                    .HasColumnName("Номер заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерКонтейнера)
                    .HasColumnName("Номер контейнера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ТехническиеХарактеристики)
                    .HasColumnName("Технические характеристики")
                    .HasMaxLength(255);

                entity.Property(e => e.ТребованиеКПоставке)
                    .HasColumnName("Требование к поставке")
                    .HasMaxLength(255);

                entity.Property(e => e.Цвет).HasMaxLength(50);

                entity.Property(e => e.Цена)
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаВНакладной)
                    .HasColumnName("Цена в накладной")
                    .HasColumnType("money")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<КонстантыДляСебестоимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Константы для себестоимости");

                entity.HasIndex(e => new { e.Номер, e.Площадка })
                    .HasName("IX_Константы для себестоимости")
                    .IsUnique();

                entity.Property(e => e.ЗначениеДвери).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗначениеМебель).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗначениеМедМебель).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗначениеПромМебель).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗначениеСейфы).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗначениеСтеллажи).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗначениеСтул).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Константа).HasMaxLength(50);

                entity.Property(e => e.Согласовал1).HasMaxLength(50);

                entity.Property(e => e.Согласовал2).HasMaxLength(50);

                entity.Property(e => e.Согласовал3).HasMaxLength(50);

                entity.Property(e => e.Согласовал4).HasMaxLength(50);

                entity.Property(e => e.Согласовал5).HasMaxLength(50);

                entity.Property(e => e.Согласовал6).HasMaxLength(50);

                entity.Property(e => e.Согласовал7).HasMaxLength(50);
            });

            modelBuilder.Entity<КонтактыПоставщиков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Контакты поставщиков");

                entity.HasIndex(e => e.IdКонтакта)
                    .HasName("IX_Список котактов поставищиков")
                    .IsUnique();

                entity.Property(e => e.IdКонтакта)
                    .HasColumnName("ID контакта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.Должность)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Значение)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Контакт)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КонтактноеЛицо)
                    .HasColumnName("Контактное лицо")
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Примечание)
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Контейнера>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdOrder)
                    .HasName("IX_Контейнера_1");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Контейнера")
                    .IsUnique();

                entity.Property(e => e.IdOrder).HasColumnName("ID order");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДатаВнесенияИзменений)
                    .HasColumnName("Дата внесения изменений")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрибытиеВМоскву)
                    .HasColumnName("Дата прибытие в Москву")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрибытияВПорт)
                    .HasColumnName("Дата прибытия в порт")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КтоВнес)
                    .HasColumnName("Кто внес")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерЗаказа)
                    .HasColumnName("Номер заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерКонтейнера)
                    .HasColumnName("Номер контейнера")
                    .HasMaxLength(50);

                entity.Property(e => e.ПолученИлиНет).HasColumnName("Получен или нет");

                entity.Property(e => e.Прим).HasMaxLength(50);

                entity.Property(e => e.ПростойВПортуСуток).HasColumnName("Простой в порту,суток");

                entity.Property(e => e.УбыткиЗаПростой)
                    .HasColumnName("Убытки за простой")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<КонтрольКлиентов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Контроль клиентов");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Контроль клиентов")
                    .IsUnique();

                entity.Property(e => e.IdКлиента)
                    .HasColumnName("ID клиента")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdМенеджера)
                    .HasColumnName("ID менеджера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доход)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.КоличествоСчетов)
                    .HasColumnName("Количество счетов")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.КоличествоСчетовЗаПериод)
                    .HasColumnName("Количество счетов за период")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Комментарий).HasColumnType("ntext");

                entity.Property(e => e.СуммаАвансов)
                    .HasColumnName("Сумма авансов")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаОплатЗаПериод)
                    .HasColumnName("Сумма оплат за период")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ТорговаяНаценка)
                    .HasColumnName("Торговая наценка")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<КонтрольМенеджеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Контроль менеджеров");

                entity.HasIndex(e => e.IdМенеджера)
                    .HasName("IX_Контроль менеджеров_1");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Контроль менеджеров")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdМенеджера)
                    .HasColumnName("ID менеджера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Выставка).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОткрытия)
                    .HasColumnName("Дата открытия")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПоследнейОплаты)
                    .HasColumnName("Дата последней оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.Директорская).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Долг)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДолгПродл)
                    .HasColumnName("Долг_продл")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗаВыставку)
                    .HasColumnName("За_выставку")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗаОбъем)
                    .HasColumnName("За_объем")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗаОтсрочку)
                    .HasColumnName("За_отсрочку")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗаРейтинг)
                    .HasColumnName("За_рейтинг")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗаСклад)
                    .HasColumnName("За_склад")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗаЭксклюзив)
                    .HasColumnName("За_эксклюзив")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Задолженность)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Комментарий)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Коэффициент)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Кредит)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МаксимальныйКредит)
                    .HasColumnName("Максимальный кредит")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МесячнаяПродажа)
                    .HasColumnName("Месячная продажа")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Мтк).HasColumnName("МТК");

                entity.Property(e => e.ОбъемПродажЮрлица)
                    .HasColumnName("Объем продаж юрлица")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОтгрузкиЗаПериод)
                    .HasColumnName("Отгрузки за период")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Отдел).HasMaxLength(50);

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ОтсрочкаКарточка)
                    .HasColumnName("Отсрочка_карточка")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ОтсрочкаПродл)
                    .HasColumnName("Отсрочка_продл")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Посредник)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Скидка).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СкидкаПланmin)
                    .HasColumnName("Скидка_планmin")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СмпрЮл)
                    .HasColumnName("СМПР_юл")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТипДолга)
                    .HasColumnName("Тип долга")
                    .HasMaxLength(10);

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<КонтрольМенеджеровРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Контроль менеджеров регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Контроль менеджеров регион")
                    .IsUnique();

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Контроль менеджеров регион_1");

                entity.Property(e => e.Idvo)
                    .HasColumnName("IDVO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdМенеджера)
                    .HasColumnName("ID менеджера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Выставка).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОткрытия)
                    .HasColumnName("Дата открытия")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПоследнейОплаты)
                    .HasColumnName("Дата последней оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Дилер)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Директорская).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Долг)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДолгПродл)
                    .HasColumnName("Долг_продл")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗаВыставку)
                    .HasColumnName("За_выставку")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗаОбъем)
                    .HasColumnName("За_объем")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗаОтсрочку)
                    .HasColumnName("За_отсрочку")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗаРейтинг)
                    .HasColumnName("За_рейтинг")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗаСклад)
                    .HasColumnName("За_склад")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ЗаЭксклюзив)
                    .HasColumnName("За_эксклюзив")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Задолженность)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.Комментарий)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Коэффициент)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Кредит)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МаксимальныйКредит)
                    .HasColumnName("Максимальный кредит")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Менеджер).HasMaxLength(50);

                entity.Property(e => e.МесячнаяПродажа)
                    .HasColumnName("Месячная продажа")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Мтк).HasColumnName("МТК");

                entity.Property(e => e.ОбъемПродажЮрлица)
                    .HasColumnName("Объем продаж юрлица")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ОтгрузкиЗаПериод)
                    .HasColumnName("Отгрузки за период")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Отдел).HasMaxLength(50);

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ОтсрочкаКарточка)
                    .HasColumnName("Отсрочка_карточка")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ОтсрочкаПродл)
                    .HasColumnName("Отсрочка_продл")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Посредник)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.СкидкаПланmin)
                    .HasColumnName("Скидка_планmin")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СмпрЮл)
                    .HasColumnName("СМПР_юл")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СрОтгрОбъед)
                    .HasColumnName("Ср_отгр_объед")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТипДолга)
                    .HasColumnName("Тип долга")
                    .HasMaxLength(10);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<КредТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Кред_тмп");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Кред_тмп");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеДол)
                    .HasColumnName("Задолженность по отгрузке дол")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеРуб)
                    .HasColumnName("Задолженность по отгрузке руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеРубБезНдс)
                    .HasColumnName("Задолженность по отгрузке руб_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.ОтгрузкаПоЦенеПродажи)
                    .HasColumnName("Отгрузка по цене продажи")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<КредиторкаТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Кредиторка_тмп");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Кредиторка_тмп")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("(null)");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(null)");

                entity.Property(e => e.IdКанала)
                    .HasColumnName("ID канала")
                    .HasDefaultValueSql("(null)");

                entity.Property(e => e.IdПодгруппы)
                    .HasColumnName("ID подгруппы")
                    .HasDefaultValueSql("(null)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(null)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаДоОтчетГруппы)
                    .HasColumnName("Дата_до_отчет группы")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОдОтчетГруппы)
                    .HasColumnName("Дата_од_отчет группы")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Отдел)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<КредиторскаяЗадолженностьКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Кредиторская задолженность кл");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.СуммаДоллары)
                    .HasColumnName("Сумма_доллары")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<КредиторскаяЗадолженностьКлОб>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Кредиторская задолженность кл об");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.СуммаДоллары)
                    .HasColumnName("Сумма_доллары")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<КредиторскаяЗадолженностьНеучт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Кредиторская задолженность неучт");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаОплРуб)
                    .HasColumnName("Сумма опл руб")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<КредиторскаяЗадолженностьНеучтКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Кредиторская задолженность неучт кл");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastUserId).HasColumnName("Last_User ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<КредиторскаяЗадолженностьОб>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Кредиторская задолженность об");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU_");

                entity.Property(e => e.СуммаДоллары)
                    .HasColumnName("Сумма_доллары")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаРубли)
                    .HasColumnName("Сумма_рубли")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<КредиторскаяЗадолженностьПоКлиентам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Кредиторская задолженность по клиентам");

                entity.Property(e => e.SumСуммаДоллары)
                    .HasColumnName("Sum_Сумма_доллары")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<КредиторскаяЗадолженностьПоКлиентамПодр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Кредиторская задолженность по клиентам подр");

                entity.Property(e => e.Bux)
                    .HasColumnName("bux")
                    .HasMaxLength(12);

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.SumСуммаДоллары)
                    .HasColumnName("Sum_Сумма_доллары")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ИннЮрлица)
                    .HasColumnName("ИНН юрлица")
                    .HasMaxLength(12);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<КурсAed>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс AED");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс AED")
                    .IsUnique();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<КурсBgn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс BGN");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс BGN")
                    .IsUnique();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<КурсДляРасчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Курс для расчета");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Коэффициент).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсEuro)
                    .HasColumnName("Курс EURO")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсКф)
                    .HasColumnName("Курс_кф")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<КурсДоллара>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс доллара");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс доллара")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Коэффициент)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсEuro)
                    .HasColumnName("Курс EURO")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<КурсЕвро>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс евро");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс евро")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Коэффициент)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<КурсЕвроРеестр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс евро реестр");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс евро реестр")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсEuro)
                    .HasColumnName("Курс EURO")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсоваяРазница)
                    .HasColumnName("Курсовая разница")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<КурсИен>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс ИЕН");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс ИЕН")
                    .IsUnique();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<КурсЛев>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс ЛЕВ");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс ЛЕВ")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Коэффициент)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.КурсEuro)
                    .HasColumnName("Курс EURO")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<КурсФранка>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс франка");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс франка")
                    .IsUnique();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсоваяРазница)
                    .HasColumnName("Курсовая разница")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<КурсФунтов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Курс фунтов");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Курс фунтов")
                    .IsUnique();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсоваяРазница)
                    .HasColumnName("Курсовая разница")
                    .HasColumnType("decimal(18, 5)");
            });

            modelBuilder.Entity<ЛюдиГрейд>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Люди_Грейд");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.DateEnd).HasColumnType("datetime");

                entity.Property(e => e.DateStart).HasColumnType("datetime");

                entity.Property(e => e.Dbeg)
                    .HasColumnName("DBeg")
                    .HasMaxLength(10);

                entity.Property(e => e.DolId).HasColumnName("DolID");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.Name).HasMaxLength(536);

                entity.Property(e => e.PrNodeId).HasColumnName("PrNodeID");
            });

            modelBuilder.Entity<ЛюдиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Люди_регион");

                entity.Property(e => e.KtoЛюди).HasColumnName("kto_люди");
            });

            modelBuilder.Entity<МaxПартияТовараОнлайн>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Мax партия товара_онлайн_");

                entity.HasIndex(e => new { e.IdТовара, e.IdСклада })
                    .HasName("IX_Мax партия товара_онлайн_")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MaxПартия).HasColumnName("Max-Партия");
            });

            modelBuilder.Entity<МаксТорг>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("макс торг");

                entity.Property(e => e.MaxN).HasColumnName("Max_n");
            });

            modelBuilder.Entity<МаксТоргПервая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("макс торг первая");

                entity.Property(e => e.Выражение1).HasMaxLength(50);

                entity.Property(e => e.ДатаТорг)
                    .HasColumnName("дата_торг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомЗ).HasColumnName("ном_з");

                entity.Property(e => e.НомТорг)
                    .HasColumnName("ном_торг")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<МаксТоргПервая11111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("макс торг первая11111");

                entity.Property(e => e.Выражение1).HasMaxLength(50);

                entity.Property(e => e.ДатаТорг)
                    .HasColumnName("дата_торг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомЗ).HasColumnName("ном_з");

                entity.Property(e => e.НомТорг)
                    .HasColumnName("ном_торг")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<МаксимальнаяМощностьУчастка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальная мощность участка");

                entity.Property(e => e.Uid).HasColumnName("UID");
            });

            modelBuilder.Entity<МаксимальнаяМощностьУчасткаПоДням>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальная мощность участка по дням");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Uid).HasColumnName("UID");
            });

            modelBuilder.Entity<МаксимальныйНомер>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный номер");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<МаксимальныйНомерBlgРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный номер_blg регион");

                entity.Property(e => e.Год).HasMaxLength(2);
            });

            modelBuilder.Entity<МаксимальныйНомерОплаты>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный номер оплаты");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<МаксимальныйНомерОплатыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный номер оплаты регион");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<МаксимальныйНомерРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный номер регион");

                entity.Property(e => e.Год).HasMaxLength(2);
            });

            modelBuilder.Entity<МаксимальныйНомерСпец>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный номер Спец");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.Номер).HasColumnName("номер");
            });

            modelBuilder.Entity<МаксимальныйНомерТехноимпорт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный номер техноимпорт");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.Номер).HasColumnName("номер");
            });

            modelBuilder.Entity<МаксимальныйСчет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Максимальный счет");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");
            });

            modelBuilder.Entity<МатериалыLifo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Материалы_LIFO");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.АртикулНовый)
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(25);

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<МахПартияДляПриходовСос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Мах партия для приходов СОС");

                entity.Property(e => e.IdSkl).HasColumnName("ID_skl");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MxPart).HasColumnName("MX_part");
            });

            modelBuilder.Entity<МахПартияДляПриходовУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Мах партия для приходов УЗМК");

                entity.Property(e => e.IdSkl).HasColumnName("ID_skl");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MxPart).HasColumnName("MX_part");
            });

            modelBuilder.Entity<МенеджерДляКлиента>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Менеджер для клиента");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.LastФамилия)
                    .HasColumnName("Last_Фамилия")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Менеджеры>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Менеджеры");

                entity.Property(e => e.Expr1).HasMaxLength(35);

                entity.Property(e => e.Id1).HasColumnName("ID1");

                entity.Property(e => e.ВедущийМенеджер).HasColumnName("Ведущий менеджер");

                entity.Property(e => e.Отдел)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<МенеджерыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Менеджеры регион");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Expr1).HasMaxLength(33);

                entity.Property(e => e.Id1).HasColumnName("ID1");

                entity.Property(e => e.IdЦо).HasColumnName("ID_ЦО");

                entity.Property(e => e.Password).HasMaxLength(15);

                entity.Property(e => e.ИмяРегистрации)
                    .IsRequired()
                    .HasColumnName("Имя регистрации")
                    .HasMaxLength(50);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Месяцы>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.НомерМесяца)
                    .HasName("IX_Месяцы")
                    .IsUnique();

                entity.Property(e => e.Колдн).HasDefaultValueSql("((0))");

                entity.Property(e => e.НазваниеМесяца)
                    .IsRequired()
                    .HasColumnName("Название месяца")
                    .HasMaxLength(8);

                entity.Property(e => e.НомерМесяца).HasColumnName("Номер месяца");

                entity.Property(e => e.СезонныйКоэффициент)
                    .HasColumnName("Сезонный коэффициент")
                    .HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<МзНедели>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("МЗ_недели");

                entity.HasIndex(e => new { e.ПериодОд, e.ПериодДо, e.IdТовара })
                    .HasName("IX_МЗ_недели")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ВыпускDib)
                    .HasColumnName("Выпуск_DIB")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВыпускБолгария)
                    .HasColumnName("Выпуск_Болгария")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВыпускГл)
                    .HasColumnName("Выпуск_гл")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВыпускУзмк)
                    .HasColumnName("Выпуск_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.МзDibНп)
                    .HasColumnName("МЗ_DIB_нп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.МзГлНп)
                    .HasColumnName("МЗ_гл_нп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.МзТтНп)
                    .HasColumnName("МЗ_ТТ_нп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.МзУзмкНп)
                    .HasColumnName("МЗ_УЗМК_нп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.МзФилНп)
                    .HasColumnName("МЗ_фил_нп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПериодДо)
                    .HasColumnName("Период_до")
                    .HasColumnType("datetime");

                entity.Property(e => e.ПериодОд)
                    .HasColumnName("Период_од")
                    .HasColumnType("datetime");

                entity.Property(e => e.Подгруппа)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПродажиDib)
                    .HasColumnName("Продажи_DIB")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПродажиЗаГод)
                    .HasColumnName("Продажи_за_год")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПродажиРф)
                    .HasColumnName("Продажи_РФ")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СписаноВОф)
                    .HasColumnName("Списано в ОФ")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<МоделиДляПрогнозаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Модели для прогноза регион");

                entity.HasIndex(e => new { e.IdТовара, e.Регион })
                    .HasName("IX_Модели для прогноза регион")
                    .IsUnique();

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.Прогнозировать).HasDefaultValueSql("((0))");

                entity.Property(e => e.Регион).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<НазванияПоПартиямПоставки>(entity =>
            {
                entity.ToTable("Названия по Партиям поставки");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Названия по Партиям поставки");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<НакладПереводСВыставкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наклад_перевод_с_выставки регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<НакладнаяДляТтТорг12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("накладная для тт торг12");

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .IsRequired()
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БанкРек)
                    .HasColumnName("Банк_рек")
                    .HasMaxLength(322);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоотпр)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(10);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("numeric(3, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерДоговора)
                    .HasColumnName("Номер договора")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ПриказСф)
                    .HasColumnName("Приказ СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(150);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(22, 7)");
            });

            modelBuilder.Entity<НакладнаяДляТтТранспортная>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("накладная для тт транспортная");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресСклада)
                    .HasColumnName("Адрес склада")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.БанкРек)
                    .HasColumnName("Банк_рек")
                    .HasMaxLength(322);

                entity.Property(e => e.Вместимость).HasMaxLength(50);

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ВсегоКол)
                    .HasColumnName("всего_кол")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ВсегоПоТоварам).HasColumnName("всего по товарам");

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Госномер)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Грузоотпр)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоподъемность).HasMaxLength(50);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.ИтогоОбъем).HasColumnName("итого_объем");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(10);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.МассаВсего).HasColumnName("масса_всего");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Организация).HasMaxLength(255);

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Тип).HasMaxLength(50);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<НаличиеНаСкладах>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наличие на складах");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наличие).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<НаличиеНаСкладахВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наличие на складах все");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наличие).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<НаличиеНаСкладахЗап>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наличие на складах ЗАП");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наличие).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НаличиеДоп).HasColumnName("Наличие_доп");
            });

            modelBuilder.Entity<НаличиеНаСкладе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наличие на складе");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наличие).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<НаличиеНаСкладеГлавном>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наличие на складе главном");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Бронь).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Нал).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наличие).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<НаличиеСУчетомБронейРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наличие с учетом броней регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Expr2).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наличие).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<НаличиеСУчетомБронейРегион1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Наличие с учетом броней регион1111");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Expr2).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наличие).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<НалоговыеПоОплатеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Налоговые по оплате регион");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Год)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");
            });

            modelBuilder.Entity<НастройкаСменыФирм>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Настройка_Смены_фирм", "DATASA");

                entity.Property(e => e.BiometricalFileName)
                    .HasColumnName("Biometrical_FileName")
                    .HasMaxLength(50);

                entity.Property(e => e.BiometricalOut).HasColumnName("Biometrical_Out");

                entity.Property(e => e.BiometricalPath)
                    .HasColumnName("Biometrical_Path")
                    .HasMaxLength(50);

                entity.Property(e => e.DatePrih)
                    .HasColumnName("Date_Prih")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.DateVyvoz)
                    .HasColumnName("Date_Vyvoz")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdCurrent).HasColumnName("ID_Current");

                entity.Property(e => e.IdOld).HasColumnName("ID_OLD");

                entity.Property(e => e.KoefCurrent)
                    .HasColumnName("Koef_Current")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.KoefOld)
                    .HasColumnName("Koef_OLD")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НдсOld).HasColumnName("НДС_OLD");
            });

            modelBuilder.Entity<НачалоДвижениеТмцРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Начало_ДвижениеТМЦ регион");

                entity.HasIndex(e => new { e.Артикул, e.Регион })
                    .HasName("IX_Начало_ДвижениеТМЦ регион")
                    .IsUnique();

                entity.Property(e => e.Артикул)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Выст).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Фил).HasColumnType("decimal(12, 3)");
            });

            modelBuilder.Entity<НачалоДвижениеФил>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Начало_движение_фил");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Выст).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Фил).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<НачалоРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Начало регион");

                entity.HasIndex(e => new { e.Артикул, e.Склад })
                    .HasName("IX_Начало регион")
                    .IsUnique();

                entity.Property(e => e.Артикул)
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.Выставка).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВыставкаДол)
                    .HasColumnName("Выставка дол")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВыставкаРуб)
                    .HasColumnName("Выставка руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Филиал).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ФилиалДол)
                    .HasColumnName("Филиал дол")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ФилиалРуб)
                    .HasColumnName("Филиал руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<НачальныйОстатокПоставки>(entity =>
            {
                entity.HasKey(e => new { e.Idpost, e.Idul, e.PlatId, e.Date })
                    .HasName("PK_Начальный остаток поставки_1");

                entity.ToTable("Начальный остаток поставки");

                entity.Property(e => e.Idpost).HasColumnName("IDPost");

                entity.Property(e => e.Idul).HasColumnName("IDUL");

                entity.Property(e => e.PlatId)
                    .HasColumnName("PlatID")
                    .HasDefaultValueSql("((38))");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Summa).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<НедогрузыДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Недогрузы дилеров");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("numeric(10, 2)");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.UserIdZ).HasColumnName("User ID_z");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("numeric(23, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<НедогрузыДилеровСос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Недогрузы дилеров_сос");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<НедогрузыКлиентовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Недогрузы клиентов регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("numeric(12, 2)");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("numeric(24, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<НедогрузыКлиентовФактРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Недогрузы клиентов факт регион");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<НезавершенныеЗаказыBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Незавершенные заказы_BG");

                entity.Property(e => e.IdPlantType42).HasColumnName("ID_PLANT_TYPE_42");

                entity.Property(e => e.Inv).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SumКоличество).HasColumnName("Sum-Количество");

                entity.Property(e => e.SumКоличествоЕвро).HasColumnName("Sum-Количество_евро");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доходность).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.КоличествоЖелаемое).HasColumnName("Количество_желаемое");

                entity.Property(e => e.КоличествоСдано)
                    .HasColumnName("Количество сдано")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Статус).HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.ЦпОстаток).HasColumnName("ЦП_остаток");
            });

            modelBuilder.Entity<НезавершенныеЗаказыТоварBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Незавершенные заказы_товар_BG");

                entity.Property(e => e.IdPlantType42).HasColumnName("ID_PLANT_TYPE_42");

                entity.Property(e => e.Inv).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.OrderNo)
                    .IsRequired()
                    .HasColumnName("Order No")
                    .HasMaxLength(50);

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.StatTov)
                    .HasColumnName("Stat_tov")
                    .HasMaxLength(14)
                    .IsUnicode(false);

                entity.Property(e => e.SumКоличество).HasColumnName("Sum-Количество");

                entity.Property(e => e.SumКоличествоЕвро).HasColumnName("Sum-Количество_евро");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доходность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоЖелаемое).HasColumnName("Количество_желаемое");

                entity.Property(e => e.КоличествоСдано)
                    .HasColumnName("Количество сдано")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Статус).HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasColumnName("товар")
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Цена).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЦпОстаток).HasColumnName("ЦП_остаток");
            });

            modelBuilder.Entity<НельзяПравитьКомплект>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Нельзя править комплект");

                entity.HasIndex(e => e.Idtov)
                    .HasName("IX_Нельзя править комплект")
                    .IsUnique();

                entity.Property(e => e.Idtov).HasColumnName("IDtov");
            });

            modelBuilder.Entity<НеперенесенныеОплатыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Неперенесенные оплаты регион");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<НовичкиТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Новички_тмп");

                entity.HasIndex(e => new { e.UserId, e.Группа, e.ОбъемПродаж1ГодРубБезНдс, e.ОбъемПродаж3ГодаРубБезНдс, e.ОбъемПродажОбщийРубБезНдс, e.Тип })
                    .HasName("IX_Новички_тмп")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ОбъемПродаж1ГодРубБезНдс).HasColumnName("Объем продаж 1 год_руб_без_НДС");

                entity.Property(e => e.ОбъемПродаж1ГодШт).HasColumnName("Объем продаж 1 год_шт");

                entity.Property(e => e.ОбъемПродаж3ГодаРубБезНдс).HasColumnName("Объем продаж 3 года_руб_без_НДС");

                entity.Property(e => e.ОбъемПродаж3ГодаШт).HasColumnName("Объем продаж 3 года_шт");

                entity.Property(e => e.ОбъемПродажОбщийРубБезНдс).HasColumnName("Объем продаж общий_руб_без_НДС");

                entity.Property(e => e.Тип)
                    .HasColumnName("тип")
                    .HasMaxLength(5);
            });

            modelBuilder.Entity<Ном>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ном");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Штрих).HasMaxLength(30);
            });

            modelBuilder.Entity<НомПогТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ном_пог_тмп");

                entity.HasIndex(e => new { e.НомерПрефикс, e.Регион, e.UserId })
                    .HasName("IX_Ном_пог_тмп")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.НомерПрефикс)
                    .HasColumnName("Номер-префикс")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<НоменклатураЗмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура ЗМК");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Номенклатура ЗМК")
                    .IsUnique();

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Номенклатура ЗМК_1");

                entity.Property(e => e.IdИзготовителя).HasColumnName("ID изготовителя");

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdМодели).HasColumnName("ID модели");

                entity.Property(e => e.IdМодификации).HasColumnName("ID модификации");

                entity.Property(e => e.IdОкраски).HasColumnName("ID окраски");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdТипа).HasColumnName("ID типа");

                entity.Property(e => e.IdТипаСклада).HasColumnName("ID типа склада");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdУсловияХранения).HasColumnName("ID условия хранения");

                entity.Property(e => e.Артикул).HasMaxLength(12);

                entity.Property(e => e.Гост).HasMaxLength(50);

                entity.Property(e => e.ЕдиницаИзмерения)
                    .HasColumnName("Единица измерения")
                    .HasMaxLength(6);

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.МинимальныйОстатокНаСкладе).HasColumnName("Минимальный остаток на складе");

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.СрокХраненияКонтролировать).HasColumnName("Срок хранения контролировать");

                entity.Property(e => e.ТехническиеХарактеристики)
                    .HasColumnName("Технические характеристики")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<НоменклатураКомпектующихПоставка>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура компектующих поставка");

                entity.HasIndex(e => new { e.IdТовара, e.IdЧасти })
                    .HasName("IX_Номенклатура компектующих поставка")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЧасти).HasColumnName("ID части");
            });

            modelBuilder.Entity<НоменклатураКомплектующих>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура комплектующих");

                entity.HasIndex(e => new { e.IdТовара, e.IdЧасти })
                    .HasName("IX_Номенклатура комплектующих")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЧасти).HasColumnName("ID части");

                entity.Property(e => e.Количество).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<НоменклатураСИсключить>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Номенклатура с исключить");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");
            });

            modelBuilder.Entity<НоменклатураТоваров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура товаров");

                entity.HasIndex(e => e.GroupOfGoods)
                    .HasName("IX_Номенклатура товаров_2");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Номенклатура товаров")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Артикул)
                    .HasName("IX_Номенклатура товаров_3")
                    .IsUnique();

                entity.HasIndex(e => e.КодТовара)
                    .HasName("IX_Номенклатура товаров_4");

                entity.HasIndex(e => e.Модель)
                    .HasName("IX_Номенклатура товаров_5");

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Номенклатура товаров_1");

                entity.HasIndex(e => e.Штрихкод)
                    .HasName("IX_Номенклатура товаров_6");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.Art)
                    .HasColumnName("ART")
                    .HasMaxLength(50);

                entity.Property(e => e.DopKod)
                    .HasColumnName("Dop_kod")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(13);

                entity.Property(e => e.GroupN)
                    .HasColumnName("GROUP_n")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupOfGoods).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdGr).HasColumnName("ID_GR");

                entity.Property(e => e.IdIzd)
                    .HasColumnName("Id_Izd")
                    .HasMaxLength(50);

                entity.Property(e => e.IdIzdU).HasColumnName("Id_Izd_u");

                entity.Property(e => e.IdPlantType39).HasColumnName("ID_PLANT_TYPE_39");

                entity.Property(e => e.IdPlantType42).HasColumnName("ID_PLANT_TYPE_42");

                entity.Property(e => e.IdPlantType44).HasColumnName("ID_PLANT_TYPE_44");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kanban).HasDefaultValueSql("((0))");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lb).HasColumnName("LB");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0.2))");

                entity.Property(e => e.OrangeSos).HasColumnName("Orange_SOS");

                entity.Property(e => e.PrType)
                    .HasColumnName("PR_TYPE")
                    .HasMaxLength(1);

                entity.Property(e => e.QuantityProducedDay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QuantityProducedDay39)
                    .HasColumnName("QuantityProducedDay_39")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QuantityProducedDay44)
                    .HasColumnName("QuantityProducedDay_44")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RedSos).HasColumnName("Red_SOS");

                entity.Property(e => e.StopSos).HasColumnName("Stop_SOS");

                entity.Property(e => e.TmpIdent).HasColumnName("TMP_IDENT");

                entity.Property(e => e.YellowSos).HasColumnName("Yellow_SOS");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БуферBg)
                    .HasColumnName("Буфер_BG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.ГрупповойРасчет)
                    .HasColumnName("Групповой расчет")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ДатаЗапуска)
                    .HasColumnName("Дата запуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаМодернизации)
                    .HasColumnName("Дата модернизации")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаНовогоОборудования)
                    .HasColumnName("Дата нового оборудования")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаПервогоПрихода)
                    .HasColumnName("Дата первого прихода")
                    .HasColumnType("date");

                entity.Property(e => e.Замок).HasMaxLength(50);

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодBg)
                    .HasColumnName("Код BG")
                    .HasMaxLength(20);

                entity.Property(e => e.КодОкраски)
                    .HasColumnName("Код окраски")
                    .HasMaxLength(2)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВЕдинице)
                    .HasColumnName("Количество в единице")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоВУпаковке)
                    .HasColumnName("Количество в упаковке")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КратностьКроватка)
                    .HasColumnName("Кратность_кроватка")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КратностьСосенки)
                    .HasColumnName("Кратность_Сосенки")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КратностьУзмкОбязательная)
                    .HasColumnName("Кратность_УЗМК_обязательная")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Мжз)
                    .HasColumnName("МЖЗ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МинПартия)
                    .HasColumnName("Мин_партия")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Мощность).HasDefaultValueSql("((1))");

                entity.Property(e => e.МощностьSos).HasColumnName("Мощность_SOS");

                entity.Property(e => e.МощностьUzmk).HasColumnName("Мощность_UZMK");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НаименованиеBg)
                    .HasColumnName("Наименование BG")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.НаименованиеУкраинское)
                    .HasColumnName("Наименование украинское")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'a')");

                entity.Property(e => e.ОтрицательноеКолВо)
                    .HasColumnName("Отрицательное кол-во")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПорогБольшихОтгрузок)
                    .HasColumnName("Порог_больших_отгрузок")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Прайс)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Статус2010)
                    .HasColumnName("Статус_2010")
                    .HasMaxLength(2);

                entity.Property(e => e.СтатусДоходности)
                    .HasColumnName("Статус_доходности")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы)
                    .HasColumnName("Тип группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.УтвержденоКонстр).HasColumnName("Утверждено_констр");

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<НоменклатураТоваров2Ка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Номенклатура товаров_2_ка");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Арт).HasMaxLength(15);

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.Выражение2).HasMaxLength(1);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<НоменклатураТоваровАртикул>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Номенклатура товаров артикул");

                entity.Property(e => e.IdМодели)
                    .HasColumnName("ID модели")
                    .HasMaxLength(3);

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<НоменклатураТоваровАрхив>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура товаров_Архив");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Номенклатура товаров_Архив")
                    .IsUnique();

                entity.HasIndex(e => e.Артикул)
                    .HasName("IX_Номенклатура товаров_Архив_1")
                    .IsUnique();

                entity.HasIndex(e => e.КодТовара)
                    .HasName("IX_Номенклатура товаров_Архив_2");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.Art)
                    .HasColumnName("ART")
                    .HasMaxLength(50);

                entity.Property(e => e.DopKod)
                    .HasColumnName("Dop_kod")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(13);

                entity.Property(e => e.GroupN)
                    .HasColumnName("GROUP_n")
                    .HasMaxLength(50);

                entity.Property(e => e.GroupOfGoods).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdGr).HasColumnName("ID_GR");

                entity.Property(e => e.IdIzd)
                    .HasColumnName("Id_Izd")
                    .HasMaxLength(50);

                entity.Property(e => e.IdIzdU).HasColumnName("Id_Izd_u");

                entity.Property(e => e.IdPlantType39).HasColumnName("ID_PLANT_TYPE_39");

                entity.Property(e => e.IdPlantType42).HasColumnName("ID_PLANT_TYPE_42");

                entity.Property(e => e.IdPlantType44).HasColumnName("ID_PLANT_TYPE_44");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kanban).HasDefaultValueSql("((0))");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Lb)
                    .HasColumnName("LB")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0.18))");

                entity.Property(e => e.PrType)
                    .HasColumnName("PR_TYPE")
                    .HasMaxLength(1);

                entity.Property(e => e.QuantityProducedDay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QuantityProducedDay39)
                    .HasColumnName("QuantityProducedDay_39")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.QuantityProducedDay44)
                    .HasColumnName("QuantityProducedDay_44")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.TmpIdent).HasColumnName("TMP_IDENT");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Болгария).HasDefaultValueSql("((0))");

                entity.Property(e => e.БуферBg)
                    .HasColumnName("Буфер_BG")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.Замок).HasMaxLength(50);

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодBg)
                    .HasColumnName("Код BG")
                    .HasMaxLength(20);

                entity.Property(e => e.КодОкраски)
                    .HasColumnName("Код окраски")
                    .HasMaxLength(2)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВЕдинице)
                    .HasColumnName("Количество в единице")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоВУпаковке)
                    .HasColumnName("Количество в упаковке")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КратностьСосенки)
                    .HasColumnName("Кратность_Сосенки")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КратностьУзмк)
                    .HasColumnName("Кратность_УЗМК")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Мжз)
                    .HasColumnName("МЖЗ")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МинПартия)
                    .HasColumnName("Мин_партия")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBg)
                    .HasColumnName("Наименование BG")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.НаименованиеУкраинское)
                    .HasColumnName("Наименование украинское")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'a')");

                entity.Property(e => e.ОтрицательноеКолВо)
                    .HasColumnName("Отрицательное кол-во")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПорогБольшихОтгрузок)
                    .HasColumnName("Порог_больших_отгрузок")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Прайс).HasDefaultValueSql("((1))");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Сосенки).HasDefaultValueSql("((0))");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Статус2010)
                    .HasColumnName("Статус_2010")
                    .HasMaxLength(2);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы)
                    .HasColumnName("Тип группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Тула).HasDefaultValueSql("((0))");

                entity.Property(e => e.УтвержденоКонстр).HasColumnName("Утверждено_констр");

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<НоменклатураТоваровЗагрузкаКазанлык>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Номенклатура товаров_Загрузка_Казанлык");

                entity.Property(e => e.Articul)
                    .HasColumnName("ARTICUL")
                    .HasMaxLength(50);

                entity.Property(e => e.Group)
                    .HasColumnName("GROUP")
                    .HasMaxLength(50);

                entity.Property(e => e.IdGr).HasColumnName("ID_GR");

                entity.Property(e => e.IdPlantType42).HasColumnName("ID_PLANT_TYPE_42");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.PrType)
                    .HasColumnName("PR_TYPE")
                    .HasMaxLength(1);

                entity.Property(e => e.QuantityProducedDay).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<НоменклатураТоваровКа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Номенклатура товаров_ка");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Арт).HasMaxLength(15);

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.Выражение2).HasMaxLength(1);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<НоменклатураТоваровПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура товаров поставки");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Номенклатура товаров поставки")
                    .IsUnique();

                entity.HasIndex(e => e.АртикулНовый)
                    .HasName("IX_Номенклатура товаров поставки_5")
                    .IsUnique();

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Номенклатура товаров поставки_1");

                entity.HasIndex(e => new { e.IdТовара, e.АртикулНовый, e.GroupOfGoods, e.ТипГруппы, e.IdКатегории, e.Abc })
                    .HasName("IX_Номенклатура товаров поставки_2");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.CalcKoef).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.Density).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Ecbs)
                    .HasColumnName("ECBS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupOfGoods).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdCalcЕдИзм)
                    .HasColumnName("ID Calc_Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Obor).HasMaxLength(50);

                entity.Property(e => e.Place).HasMaxLength(50);

                entity.Property(e => e.Thickness).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UseInAsup).HasColumnName("UseInASUP");

                entity.Property(e => e.Zapas).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ZapasUzmk)
                    .HasColumnName("ZapasUZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.АртикулНовый)
                    .IsRequired()
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(25);

                entity.Property(e => e.Буфер).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Вес).HasDefaultValueSql("((0))");

                entity.Property(e => e.Грузоотправитель).HasDefaultValueSql("((9))");

                entity.Property(e => e.Грузополучатель).HasDefaultValueSql("((11))");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодВ1с)
                    .HasColumnName("Код в 1С")
                    .HasMaxLength(25);

                entity.Property(e => e.КодВ1сПоставщика)
                    .HasColumnName("Код в 1С поставщика")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(25);

                entity.Property(e => e.КоличествоВУпаковке)
                    .HasColumnName("Количество в упаковке")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Контроль)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'Склад')");

                entity.Property(e => e.КоэфИсп)
                    .HasColumnName("Коэф_исп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Кф).HasDefaultValueSql("((1))");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование_BLG")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Объем).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ответственный).HasMaxLength(250);

                entity.Property(e => e.ОтрицательноеКолВо)
                    .HasColumnName("Отрицательное кол-во")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Скл).HasDefaultValueSql("((1))");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы)
                    .HasColumnName("Тип группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ШифрАсуп)
                    .HasColumnName("Шифр АСУП")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<НоменклатураТоваровПоставкиOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура товаров поставки_OLD");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.CalcKoef).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.Density).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Ecbs).HasColumnName("ECBS");

                entity.Property(e => e.IdCalcЕдИзм)
                    .HasColumnName("ID Calc_Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Obor).HasMaxLength(50);

                entity.Property(e => e.Place).HasMaxLength(50);

                entity.Property(e => e.Thickness).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UseInAsup).HasColumnName("UseInASUP");

                entity.Property(e => e.Zapas).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ZapasUzmk)
                    .HasColumnName("ZapasUZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.АртикулНовый)
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(25);

                entity.Property(e => e.Буфер).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодВ1с)
                    .HasColumnName("Код в 1С")
                    .HasMaxLength(25);

                entity.Property(e => e.КодВ1сПоставщика)
                    .HasColumnName("Код в 1С поставщика")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(25);

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.Контроль)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.КоэфИсп)
                    .HasColumnName("Коэф_исп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование_BLG")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Ответственный).HasMaxLength(250);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");

                entity.Property(e => e.ШифрАсуп)
                    .HasColumnName("Шифр АСУП")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<НоменклатураТоваровПоставкиАрхив>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура товаров поставки_Архив");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.CalcKoef).HasColumnType("numeric(8, 6)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.Density).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Ecbs)
                    .HasColumnName("ECBS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GroupOfGoods).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdCalcЕдИзм)
                    .HasColumnName("ID Calc_Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Obor).HasMaxLength(50);

                entity.Property(e => e.Place).HasMaxLength(50);

                entity.Property(e => e.Thickness).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Zapas).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ZapasUzmk)
                    .HasColumnName("ZapasUZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.АртикулНовый)
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(25);

                entity.Property(e => e.Буфер).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Вес).HasDefaultValueSql("((0))");

                entity.Property(e => e.Грузоотправитель).HasDefaultValueSql("((9))");

                entity.Property(e => e.Грузополучатель).HasDefaultValueSql("((11))");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодВ1с)
                    .HasColumnName("Код в 1С")
                    .HasMaxLength(25);

                entity.Property(e => e.КодВ1сПоставщика)
                    .HasColumnName("Код в 1С поставщика")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВУпаковке)
                    .HasColumnName("Количество в упаковке")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Контроль)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'Склад')");

                entity.Property(e => e.КоэфИсп)
                    .HasColumnName("Коэф_исп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Кф).HasDefaultValueSql("((1))");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование_BLG")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Объем).HasDefaultValueSql("((0))");

                entity.Property(e => e.ОтрицательноеКолВо)
                    .HasColumnName("Отрицательное кол-во")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Скл).HasDefaultValueSql("((1))");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы)
                    .HasColumnName("Тип группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ШифрАсуп)
                    .HasColumnName("Шифр АСУП")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<НоменклатураТоваровПоставкиАрхив20180815>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номенклатура товаров поставки_Архив_20180815");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.CalcKoef).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreaterId).HasColumnName("CreaterID");

                entity.Property(e => e.Density).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.Ecbs).HasColumnName("ECBS");

                entity.Property(e => e.IdCalcЕдИзм)
                    .HasColumnName("ID Calc_Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditId).HasColumnName("LastEditID");

                entity.Property(e => e.Obor).HasMaxLength(50);

                entity.Property(e => e.Place).HasMaxLength(50);

                entity.Property(e => e.Thickness).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.UseInAsup).HasColumnName("UseInASUP");

                entity.Property(e => e.Zapas).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ZapasUzmk)
                    .HasColumnName("ZapasUZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.АртикулНовый)
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(25);

                entity.Property(e => e.Буфер).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодВ1с)
                    .HasColumnName("Код в 1С")
                    .HasMaxLength(25);

                entity.Property(e => e.КодВ1сПоставщика)
                    .HasColumnName("Код в 1С поставщика")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(25);

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.Контроль)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.КоэфИсп)
                    .HasColumnName("Коэф_исп")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование_BLG")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Ответственный).HasMaxLength(250);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");

                entity.Property(e => e.ШифрАсуп)
                    .HasColumnName("Шифр АСУП")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<НоменклатураТоваровПоставкиОписание>(entity =>
            {
                entity.HasKey(e => e.IdТовара);

                entity.ToTable("Номенклатура товаров поставки Описание");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedNever();

                entity.Property(e => e.Описание).HasMaxLength(1000);
            });

            modelBuilder.Entity<НоменклатураТоваровПрайс>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Номенклатура товаров_прайс");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.DopKod)
                    .HasColumnName("Dop_kod")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdIzd)
                    .HasColumnName("Id_Izd")
                    .HasMaxLength(50);

                entity.Property(e => e.IdIzdU).HasColumnName("Id_Izd_u");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Lb).HasColumnName("LB");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.TmpIdent).HasColumnName("TMP_IDENT");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.БуферBg).HasColumnName("Буфер_BG");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.Замок).HasMaxLength(50);

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодBg)
                    .HasColumnName("Код BG")
                    .HasMaxLength(20);

                entity.Property(e => e.КодОкраски)
                    .HasColumnName("Код окраски")
                    .HasMaxLength(2);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBg)
                    .HasColumnName("Наименование BG")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Статус2010)
                    .HasColumnName("Статус_2010")
                    .HasMaxLength(2);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");

                entity.Property(e => e.Штрихкод).HasMaxLength(15);
            });

            modelBuilder.Entity<НоменклатураТоваровСтатусы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Номенклатура товаров_статусы");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.DopKod)
                    .HasColumnName("Dop_kod")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.IdIzd)
                    .HasColumnName("Id_Izd")
                    .HasMaxLength(50);

                entity.Property(e => e.IdIzdU).HasColumnName("Id_Izd_u");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Lb).HasColumnName("LB");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.TmpIdent).HasColumnName("TMP_IDENT");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БуферBg).HasColumnName("Буфер_BG");

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.Замок).HasMaxLength(50);

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодBg)
                    .HasColumnName("Код BG")
                    .HasMaxLength(20);

                entity.Property(e => e.КодОкраски)
                    .HasColumnName("Код окраски")
                    .HasMaxLength(2);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBg)
                    .HasColumnName("Наименование BG")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Основной)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Статус2010)
                    .HasColumnName("Статус_2010")
                    .HasMaxLength(2);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<НомерПрефиксПереноскаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("номер-префикс переноска регион");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");
            });

            modelBuilder.Entity<НомерПрефиксРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("номер-префикс регион");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");
            });

            modelBuilder.Entity<НомераДляКредиторки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Номера для кредиторки");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<НомераДляКредиторкиКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Номера для кредиторки кл");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<НомераДляЦепочек>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Номера для цепочек");

                entity.HasIndex(e => new { e.НомерПорядковый, e.Год, e.Фирма })
                    .HasName("IX_Номера для цепочек");

                entity.HasIndex(e => new { e.Партия, e.Участок, e.Дата, e.IdТовара, e.IdСклада, e.НомерПорядковый, e.Год })
                    .HasName("IX_Номера для цепочек_1")
                    .IsUnique();

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Год)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Кф).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПорядковый)
                    .HasColumnName("Номер порядковый")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Партия).HasDefaultValueSql("(0)");

                entity.Property(e => e.Участок).HasDefaultValueSql("(0)");

                entity.Property(e => e.Фирма).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ОбеспечениеДз>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Обеспечение ДЗ");

                entity.HasIndex(e => new { e.Дата, e.Группа, e.Регион, e.GroupOfGoods })
                    .HasName("IX_Обеспечение ДЗ")
                    .IsUnique();

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("date");

                entity.Property(e => e.Дз)
                    .HasColumnName("ДЗ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Оплаты12Мес)
                    .HasColumnName("Оплаты_12_мес")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОтгрузкаЗа8Недель)
                    .HasColumnName("Отгрузка_за_8_недель")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Отдел).HasMaxLength(50);
            });

            modelBuilder.Entity<ОбеспечениеСклада>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Обеспечение склада");

                entity.HasIndex(e => new { e.Дата, e.Площадка, e.Статус, e.IdТовара, e.Регион })
                    .HasName("IX_Обеспечение склада")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Дата).HasColumnType("date");

                entity.Property(e => e.ДзРуб)
                    .HasColumnName("ДЗ_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.КолМоделей).HasColumnName("Кол_моделей");

                entity.Property(e => e.КолСвободно).HasColumnName("Кол_свободно");

                entity.Property(e => e.Мз)
                    .HasColumnName("МЗ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.МзДн)
                    .HasColumnName("МЗ_дн")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.МзКол)
                    .HasColumnName("МЗ_кол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОтгрузкаЗа8Недель)
                    .HasColumnName("Отгрузка_за_8_недель")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Площадка)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Процент)
                    .HasColumnName("процент")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Статус)
                    .HasMaxLength(13)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ОбработанныеКн>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Обработанные КН");

                entity.Property(e => e.Expr).HasMaxLength(1);

                entity.Property(e => e.IdКонтрагента)
                    .HasColumnName("ID контрагента")
                    .HasMaxLength(20);

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаВал)
                    .HasColumnName("Дата вал")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпр)
                    .HasColumnName("Дата отпр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПол)
                    .HasColumnName("Дата пол")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12);

                entity.Property(e => e.Назначение).HasMaxLength(255);

                entity.Property(e => e.НомерПп)
                    .HasColumnName("Номер пп")
                    .HasMaxLength(15);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.СуммаПп).HasColumnName("Сумма_пп_");

                entity.Property(e => e.СуммаПп1)
                    .HasColumnName("Сумма_пп")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<ОбщаяОтгрузкаПоМашинам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Общая отгрузка по машинам");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.Вс).HasColumnName("вс");

                entity.Property(e => e.Госномер)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Грузоподъемность).HasMaxLength(50);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Получатель)
                    .HasColumnName("получатель")
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ОбщийДоходПоКлиентамПоТоварам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Общий доход по клиентам по товарам");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Ss)
                    .HasColumnName("ss")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Вс).HasColumnName("вс");

                entity.Property(e => e.Город).HasMaxLength(150);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Кат).HasMaxLength(50);

                entity.Property(e => e.Кол).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаСНдс)
                    .HasColumnName("Сумма с НДС")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ОбъемПродажЗаТриГода>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Объем продаж за три года");

                entity.Property(e => e.Userid).HasMaxLength(50);

                entity.Property(e => e.Год)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДоходностьРуб)
                    .HasColumnName("Доходность руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемОплатРуб)
                    .HasColumnName("Объем оплат руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажРуб)
                    .HasColumnName("Объем продаж руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Оплата>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Оплата_2")
                    .IsUnique();

                entity.HasIndex(e => e.ВидОплаты)
                    .HasName("IX_Оплата");

                entity.HasIndex(e => e.ДатаПр)
                    .HasName("IX_Оплата_4");

                entity.HasIndex(e => e.НомерПлатежки)
                    .HasName("IX_Оплата_3");

                entity.HasIndex(e => e.НомерСчета)
                    .HasName("IX_Оплата_1");

                entity.Property(e => e.IdКлиента)
                    .HasColumnName("ID клиента")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа)
                    .HasColumnName("Вид платежа")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Время).HasColumnType("smalldatetime");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыEuro)
                    .HasColumnName("Сумма оплаты EURO")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаДляКредиторкиВедущийРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата для кредиторки ведущий регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Знак).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(38, 9)");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаОплатыРубБезНдс)
                    .HasColumnName("Сумма оплаты руб_без_НДС")
                    .HasColumnType("decimal(38, 10)");
            });

            modelBuilder.Entity<ОплатаДляКредиторкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата для кредиторки регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Знак).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаОплат).HasColumnName("Сумма оплат");

                entity.Property(e => e.СуммаОплатыРуб).HasColumnName("Сумма оплаты руб");

                entity.Property(e => e.СуммаОплатыРубБезНдс).HasColumnName("Сумма оплаты руб_без_НДС");
            });

            modelBuilder.Entity<ОплатаДляКредиторкиРегионObjed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата для кредиторки регион_objed");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Знак).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаОплат).HasColumnName("Сумма оплат");

                entity.Property(e => e.СуммаОплатыРуб).HasColumnName("Сумма оплаты руб");

                entity.Property(e => e.СуммаОплатыРубБезНдс).HasColumnName("Сумма оплаты руб_без_НДС");
            });

            modelBuilder.Entity<ОплатаДляСверкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата для сверки регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолСпис).HasColumnName("Кол_спис");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СсСпи).HasColumnName("СС_спи");
            });

            modelBuilder.Entity<ОплатаДляСф>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата для сф");

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("money");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("money");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Оплата за период для отчета_1");

                entity.HasIndex(e => new { e.IdДилера, e.UserId, e.ОплатаРуб, e.Dil, e.Дилер })
                    .HasName("IX_Оплата за период для отчета")
                    .IsUnique();

                entity.Property(e => e.Dil).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОбъед).HasColumnName("ID_объед");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаКонОпл)
                    .HasColumnName("Дата_кон_опл")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаНачОпл)
                    .HasColumnName("Дата_нач_опл")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаNnn>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета_nnn");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Оплата за период для отчета_nnn");

                entity.Property(e => e.Dil).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОбъед).HasColumnName("ID_объед");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаКонОпл)
                    .HasColumnName("Дата_кон_опл")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаНачОпл)
                    .HasColumnName("Дата_нач_опл")
                    .HasColumnType("datetime");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата за период для отчета_групп");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("кол_месяцев");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗа12МесяцовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета за 12 месяцов регион");

                entity.HasIndex(e => new { e.IdДилера, e.Регион, e.UserId, e.Id, e.Дилер })
                    .HasName("IX_Оплата за период для отчета за 12 месяцов регион")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолВоМесОпл).HasColumnName("Кол_во мес опл");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗа3МесКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета за 3 мес_кл");

                entity.HasIndex(e => new { e.IdКл, e.UserId, e.ОплатаРуб })
                    .HasName("IX_Оплата за период для отчета за 3 мес_кл")
                    .IsUnique();

                entity.Property(e => e.IdКл).HasColumnName("ID кл");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗа3МесЮл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета за 3 мес_юл");

                entity.HasIndex(e => new { e.IdЮл, e.UserId, e.ОплатаРуб, e.Юрлицо })
                    .HasName("IX_Оплата за период для отчета за 3 мес_юл")
                    .IsUnique();

                entity.Property(e => e.IdЮл).HasColumnName("ID юл");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗа3МесЮлГр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата за период для отчета за 3 мес_юл_гр");

                entity.Property(e => e.IdЮл).HasColumnName("ID юл");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗа3МесЮлРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета за 3 мес_юл регион");

                entity.HasIndex(e => new { e.IdЮл, e.UserId, e.Регион, e.Юрлицо, e.Дилер })
                    .HasName("IX_Оплата за период для отчета за 3 мес_юл регион")
                    .IsUnique();

                entity.Property(e => e.IdЮл).HasColumnName("ID юл");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗа3Месяца>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета за 3 месяца");

                entity.HasIndex(e => new { e.IdДилера, e.UserId, e.Дилер })
                    .HasName("IX_Оплата за период для отчета за 3 месяца")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗа3МесяцаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета за 3 месяца регион");

                entity.HasIndex(e => new { e.IdДилера, e.UserId, e.Регион, e.Дилер })
                    .HasName("IX_Оплата за период для отчета за 3 месяца регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЗаПериод>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета за период");

                entity.HasIndex(e => new { e.IdДилера, e.UserId, e.ОплатаРуб, e.Дилер })
                    .HasName("IX_Оплата за период для отчета за период");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("кол_месяцев");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета регион");

                entity.HasIndex(e => new { e.IdДилера, e.Регион, e.UserId, e.Дилер })
                    .HasName("IX_Оплата за период для отчета регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОбъед).HasColumnName("ID_объед");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("кол_месяцев");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЮлГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата за период для отчета_юл_групп");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ОплатаЗаПериодДляОтчетаЮрлицо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата за период для отчета юрлицо");

                entity.HasIndex(e => new { e.IdЮрлица, e.UserId, e.ОплатаРуб, e.Юрлицо, e.Дилер })
                    .HasName("IX_Оплата за период для отчета юрлицо");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ОплатаКлиентыФилиал>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата - клиенты - филиал");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.ПричинаСкидки)
                    .HasColumnName("Причина_скидки")
                    .HasMaxLength(50);

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ОплатаНоябрь>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата Ноябрь");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum-Сумма оплаты R")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатаНоябрьГр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата Ноябрь_гр");

                entity.Property(e => e.SumСуммаОплатыR).HasColumnName("Sum-Сумма оплаты R");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ОплатаНоябрьЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата Ноябрь ЦО");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum-Сумма оплаты R")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ОплатаПоДилерамДляТк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по дилерам для ТК");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Дол)
                    .HasColumnName("дол")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Руб)
                    .HasColumnName("руб")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ОплатаПоДилерамДляТкИзЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по дилерам для ТК из ЦО");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Дол)
                    .HasColumnName("дол")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Руб)
                    .HasColumnName("руб")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ОплатаПоДилерамДляТкОбИзЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по дилерам для ТК об из ЦО");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Дол)
                    .HasColumnName("дол")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Руб)
                    .HasColumnName("руб")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ОплатаПоДилерамДляТкОбРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по дилерам для ТК об регион");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Дол)
                    .HasColumnName("дол")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Руб)
                    .HasColumnName("руб")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатаПоДилерамДляТкРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по дилерам для ТК регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Дол)
                    .HasColumnName("дол")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Руб)
                    .HasColumnName("руб")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатаПоДилерамДляТкРегионNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по дилерам для ТК регион_new");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Дол)
                    .HasColumnName("дол")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Руб)
                    .HasColumnName("руб")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатаПоЗаявкам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по заявкам");

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("money");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("money");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаПоЗаявкам1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по заявкам_");

                entity.Property(e => e.FirstВидПлатежа).HasColumnName("First_Вид платежа");

                entity.Property(e => e.FirstДатаПр)
                    .HasColumnName("First_Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FirstНомерПлатежки)
                    .HasColumnName("First_Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаПоЗаявкамДляДолга>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по заявкам для долга");

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаПоЗаявкамДляПлатежекРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по заявкам для платежек регион");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаДол).HasColumnName("Сумма_дол");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма_руб");
            });

            modelBuilder.Entity<ОплатаПоЗаявкамПоДням>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по заявкам по дням");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ОплатаПоЗаявкамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по заявкам регион");

                entity.Property(e => e.SumСуммаОплаты).HasColumnName("Sum_Сумма оплаты $");

                entity.Property(e => e.SumСуммаОплатыR).HasColumnName("Sum_Сумма оплаты R");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаПоСчетамГруппа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по счетам - группа");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаПоСчету>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по счету");

                entity.Property(e => e.FirstВидПлатежа).HasColumnName("First_Вид платежа");

                entity.Property(e => e.FirstДатаПр)
                    .HasColumnName("First_Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FirstНомерПлатежки)
                    .HasColumnName("First_Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаПоТоварамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата по товарам регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Оплата по товарам регион")
                    .IsUnique();

                entity.HasIndex(e => e.RecordIdОплата)
                    .HasName("IX_Оплата по товарам регион_1");

                entity.HasIndex(e => e.RecordIdРасход)
                    .HasName("IX_Оплата по товарам регион_2");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Оплата по товарам регион_3");

                entity.HasIndex(e => new { e.RecordIdОплата, e.RecordIdРасход, e.Регион })
                    .HasName("IX_Оплата по товарам регион_4")
                    .IsUnique();

                entity.HasIndex(e => new { e.RecordIdОплата, e.RecordIdРасход, e.КоличествоОплаченное, e.Регион })
                    .HasName("INDEX_IX_Регион");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdОплата)
                    .HasColumnName("Record ID оплата")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordIdОплатаOld)
                    .HasColumnName("Record ID оплата_old")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordIdРасход)
                    .HasColumnName("Record ID расход")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordIdРасходOld)
                    .HasColumnName("Record ID расход_old")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ОплатаПоТоварамСВидамиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата по товарам с видами регион");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<ОплатаПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата поставки");

                entity.HasIndex(e => e.IdOrder)
                    .HasName("IX_Оплата поставки_1");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Оплата поставки")
                    .IsUnique();

                entity.Property(e => e.IdOrder).HasColumnName("ID order");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdReestraPay).HasColumnName("ID reestra Pay");

                entity.Property(e => e.IdВидаУслуги).HasColumnName("ID вида услуги");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерЗаказа)
                    .HasColumnName("Номер заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерКонтейнера)
                    .HasColumnName("Номер контейнера")
                    .HasMaxLength(50);

                entity.Property(e => e.Оплатил)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаДоллары)
                    .HasColumnName("Сумма доллары")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОплатаРаспискиГазОднаПлат>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата расписки ГАЗ одна плат");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("money");

                entity.Property(e => e.Наименование).HasMaxLength(15);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ОплатаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Оплата регион")
                    .IsUnique();

                entity.HasIndex(e => e.НомерСчета)
                    .HasName("IX_Оплата регион_1");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Оплата регион_2");

                entity.HasIndex(e => new { e.НомерСчета, e.Регион })
                    .HasName("IX_Оплата регион_3");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdOld).HasColumnName("Record ID_old");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа)
                    .HasColumnName("Вид платежа")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Время).HasColumnType("datetime");

                entity.Property(e => e.Год)
                    .HasColumnName("Год_")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Назначение)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер_порядковый");

                entity.Property(e => e.НомерПоставки)
                    .HasColumnName("Номер поставки")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОснованиеПп)
                    .HasColumnName("Основание_пп")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ОплатаСНомеромПлатежкиЕщеОдна>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата с номером платежки_еще_одна");

                entity.Property(e => e.LastДатаПр)
                    .HasColumnName("Last_Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.LastНомерПлатежки)
                    .HasColumnName("Last_Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаСНомеромПлатежкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата с номером платежки регион");

                entity.Property(e => e.FirstДатаПр)
                    .HasColumnName("First_Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstНомерПлатежки)
                    .HasColumnName("First_Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаТовараНалоговаяГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата товара налоговая_групп");

                entity.Property(e => e.Год)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");
            });

            modelBuilder.Entity<ОплатаТовараНалоговаяРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата товара налоговая регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Оплата товара налоговая регион")
                    .IsUnique();

                entity.HasIndex(e => e.RecordIdРасход)
                    .HasName("IX_Оплата товара налоговая регион_1");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Оплата товара налоговая регион_2");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdРасход)
                    .HasColumnName("Record ID расход")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Год)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Количество)
                    .HasColumnType("decimal(20, 6)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерПорядковый)
                    .HasColumnName("Номер порядковый")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(20, 6)");
            });

            modelBuilder.Entity<ОплатаТолькоЗаявки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата только заявки");

                entity.Property(e => e.Expr1).HasMaxLength(20);

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа).HasColumnName("Вид платежа");

                entity.Property(e => e.Время).HasColumnType("smalldatetime");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыEuro)
                    .HasColumnName("Сумма оплаты EURO")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ОплатаТолькоСчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплата только счета");

                entity.Property(e => e.Expr1).HasMaxLength(20);

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ОплатаЦоДилераТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплата_ЦО_дилера_тмп");

                entity.HasIndex(e => new { e.IdДилера, e.UserId })
                    .HasName("IX_Оплата_ЦО_дилера_тмп")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ОплатыГрупДляПлатежекРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ОплатыГруп для платежек регион");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа).HasColumnName("Вид платежа");

                entity.Property(e => e.Время).HasColumnType("datetime");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОплатыДляАктаСверкиЦоТолькоУзмкЮл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для акта сверки цо_только_узмк_ЮЛ");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатыДляАктаСверкиЦоУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для акта сверки цо_узмк");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатыДляАктаСверкиЦоУзмкЮл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для акта сверки цо_узмк_ЮЛ");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатыДляПерекачки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для перекачки");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сч).HasColumnName("сч");
            });

            modelBuilder.Entity<ОплатыДляПерекачкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для перекачки регион");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.Рег).HasColumnName("рег");

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сч).HasColumnName("сч");
            });

            modelBuilder.Entity<ОплатыДляПлатежек>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для платежек");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ОплатыДляПлатежекНовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для платежек_нов регион");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОплатыДляПлатежекРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты для платежек регион");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОплатыДляСтруктурыПродаж>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Оплаты для структуры продаж");

                entity.HasIndex(e => e.НомерСчета)
                    .HasName("IX_Оплаты для структуры продаж")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ОплатыЗаПериодТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты за период_тмп");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Сумм)
                    .HasColumnName("сумм")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОплатыПоЗаявкам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты по заявкам");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Платеж)
                    .HasColumnName("платеж")
                    .HasMaxLength(24);
            });

            modelBuilder.Entity<ОплатыПоКлиентамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты по клиентам регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа).HasColumnName("Вид платежа");

                entity.Property(e => e.Время).HasColumnType("datetime");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОплатыРаспискаГаз>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты расписка Газ");

                entity.Property(e => e.IdВладельца).HasColumnName("ID владельца");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатыРаспискаПром>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты расписка Пром");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОплатыРаспискаРайф>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты расписка Райф");

                entity.Property(e => e.IdВладельца).HasColumnName("ID владельца");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("money");

                entity.Property(e => e.Наименование).HasMaxLength(15);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<ОплатыСуд>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплаты_суд");

                entity.Property(e => e.Дил).HasColumnName("дил");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ОплаченоПоЗаявкамРаньшеПлана>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплачено по заявкам раньше плана");

                entity.Property(e => e.УжеОплачено)
                    .HasColumnName("Уже_оплачено")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ОплаченоПоЗаявкамРаньшеПланаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Оплачено по заявкам раньше плана регион");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОпцияСпецЗаказа1>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdОпции)
                    .HasName("IX_ОпцияСпецЗаказа1")
                    .IsUnique();

                entity.Property(e => e.IdОпции)
                    .HasColumnName("ID опции")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MinПартия)
                    .HasColumnName("Min партия")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Опция).HasMaxLength(150);

                entity.Property(e => e.Процент).HasColumnType("decimal(10, 3)");
            });

            modelBuilder.Entity<ОпцияСпецЗаказа2>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdОпции)
                    .HasName("IX_ОпцияСпецЗаказа2")
                    .IsUnique();

                entity.Property(e => e.IdОпции)
                    .HasColumnName("ID опции")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MinПартия)
                    .HasColumnName("Min партия")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Опция).HasMaxLength(150);

                entity.Property(e => e.Процент).HasColumnType("decimal(10, 3)");
            });

            modelBuilder.Entity<ОпцияСпецЗаказа3>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdОпции)
                    .HasName("IX_ОпцияСпецЗаказа3")
                    .IsUnique();

                entity.Property(e => e.IdОпции)
                    .HasColumnName("ID опции")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MinПартия)
                    .HasColumnName("Min партия")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Опция).HasMaxLength(150);

                entity.Property(e => e.Процент).HasColumnType("decimal(10, 3)");
            });

            modelBuilder.Entity<ОпцияСпецЗаказа4>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdОпции)
                    .HasName("IX_ОпцияСпецЗаказа4")
                    .IsUnique();

                entity.Property(e => e.IdНом).HasColumnName("ID ном");

                entity.Property(e => e.IdОпции)
                    .HasColumnName("ID опции")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.MinПартия)
                    .HasColumnName("Min партия")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Опция).HasMaxLength(150);

                entity.Property(e => e.Процент).HasColumnType("decimal(10, 3)");
            });

            modelBuilder.Entity<ОсGroupMenu>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.MenuId });

                entity.ToTable("ОС_GroupMenu");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");
            });

            modelBuilder.Entity<ОсMenu>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.ParentId });

                entity.ToTable("ОС_Menu");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.CommandName).HasMaxLength(50);

                entity.Property(e => e.NameMenu).HasMaxLength(50);

                entity.Property(e => e.NameMenuA).HasMaxLength(50);

                entity.Property(e => e.StyleId).HasColumnName("StyleID");

                entity.Property(e => e.ToolTip).HasMaxLength(50);

                entity.Property(e => e.ToolTipA).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<ОсMoveType>(entity =>
            {
                entity.ToTable("ОС_MoveType");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ОсReportParams>(entity =>
            {
                entity.HasKey(e => new { e.ParamName, e.ReportId })
                    .HasName("PK_ОС_ReportParams_1");

                entity.ToTable("ОС_ReportParams");

                entity.Property(e => e.ParamName).HasMaxLength(50);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ОсReportQueries>(entity =>
            {
                entity.HasKey(e => new { e.QueryId, e.ReportId });

                entity.ToTable("ОС_ReportQueries");

                entity.Property(e => e.QueryId)
                    .HasColumnName("QueryID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.DetailQueryId).HasColumnName("DetailQueryID");

                entity.Property(e => e.ExcelRange).HasMaxLength(50);

                entity.Property(e => e.KeyId)
                    .HasColumnName("KeyID")
                    .HasMaxLength(255);

                entity.Property(e => e.QueryName).HasMaxLength(50);
            });

            modelBuilder.Entity<ОсReports>(entity =>
            {
                entity.HasKey(e => e.ReportId);

                entity.ToTable("ОС_Reports");

                entity.Property(e => e.ReportId).HasColumnName("ReportID");

                entity.Property(e => e.FileName).HasMaxLength(150);

                entity.Property(e => e.ReportName).HasMaxLength(50);

                entity.Property(e => e.ReportPath).HasMaxLength(150);
            });

            modelBuilder.Entity<ОсUserMenu>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.MenuId });

                entity.ToTable("ОС_UserMenu");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");
            });

            modelBuilder.Entity<ОсАмортизация>(entity =>
            {
                entity.ToTable("ОС_Амортизация");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.PeriodId).HasColumnName("PeriodID");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.UserId).HasColumnName("UserID");
            });

            modelBuilder.Entity<ОсАмортизацияСтроки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ОС_Амортизация_Строки");

                entity.Property(e => e.AccountCr)
                    .HasColumnName("AccountCR")
                    .HasMaxLength(50);

                entity.Property(e => e.AccountDb)
                    .HasColumnName("AccountDB")
                    .HasMaxLength(50);

                entity.Property(e => e.AnalitCr)
                    .HasColumnName("AnalitCR")
                    .HasMaxLength(50);

                entity.Property(e => e.AnalitDb)
                    .HasColumnName("AnalitDB")
                    .HasMaxLength(50);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.PeriodId).HasColumnName("PeriodID");

                entity.Property(e => e.Summa).HasColumnType("money");

                entity.Property(e => e.SummaOst).HasColumnType("money");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<ОсГрупповыеСтрокиПрихода>(entity =>
            {
                entity.ToTable("ОС_Групповые_Строки_Прихода");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("CurrencyID")
                    .HasDefaultValueSql("((11))");

                entity.Property(e => e.DateDoc).HasColumnType("datetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.Document).HasMaxLength(50);

                entity.Property(e => e.IdEdIzm)
                    .IsRequired()
                    .HasColumnName("ID_EdIzm")
                    .HasMaxLength(3)
                    .HasDefaultValueSql("((796))");

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PrixodRecordId).HasColumnName("Prixod_RecordID");

                entity.Property(e => e.Summa).HasColumnType("money");
            });

            modelBuilder.Entity<ОсДокументы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ОС_Документы");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUserId).HasColumnName("CreateUserID");

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditUserId).HasColumnName("LastEditUserID");

                entity.Property(e => e.NbrDocument).HasMaxLength(50);

                entity.Property(e => e.SourceId).HasColumnName("SourceID");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");
            });

            modelBuilder.Entity<ОсДокументыСтроки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ОС_Документы_Строки");

                entity.Property(e => e.Account).HasMaxLength(50);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.DocId).HasColumnName("DocID");

                entity.Property(e => e.GrinputId).HasColumnName("GRInputID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.Mol).HasColumnName("MOL");

                entity.Property(e => e.NodeId).HasColumnName("NodeID");

                entity.Property(e => e.Quantity).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.SkladId).HasColumnName("SkladID");

                entity.Property(e => e.Summa).HasColumnType("money");

                entity.Property(e => e.UrFaceId).HasColumnName("UrFaceID");
            });

            modelBuilder.Entity<ОсКаталог>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.ParentId });

                entity.ToTable("ОС_Каталог");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ParentId).HasColumnName("ParentID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.StructId)
                    .HasColumnName("StructID")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<ОсКонсервация>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ОС_Консервация");

                entity.Property(e => e.EndPeriod).HasDefaultValueSql("((999912))");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");
            });

            modelBuilder.Entity<ОсНоменклатура>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ОС_Номенклатура");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.CreateUserId).HasColumnName("CreateUserID");

                entity.Property(e => e.DateDocIn).HasColumnType("datetime");

                entity.Property(e => e.DateIn).HasColumnType("datetime");

                entity.Property(e => e.DateManufactory).HasColumnType("datetime");

                entity.Property(e => e.DateOut).HasColumnType("datetime");

                entity.Property(e => e.DateUse).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(150);

                entity.Property(e => e.FactoryNbr).HasMaxLength(50);

                entity.Property(e => e.GrInputId).HasColumnName("GrInputID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdEdIzm)
                    .HasColumnName("ID_EdIzm")
                    .HasDefaultValueSql("((796))");

                entity.Property(e => e.InvNbr)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNbrOld)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.LastEditDate).HasColumnType("datetime");

                entity.Property(e => e.LastEditUserId).HasColumnName("LastEditUserID");

                entity.Property(e => e.Manufactor).HasMaxLength(50);

                entity.Property(e => e.Mol).HasColumnName("MOL");

                entity.Property(e => e.Name).HasMaxLength(255);

                entity.Property(e => e.NbrDocIn).HasMaxLength(50);

                entity.Property(e => e.NbrOut).HasMaxLength(50);

                entity.Property(e => e.NbrUse).HasMaxLength(50);

                entity.Property(e => e.NodeId)
                    .HasColumnName("NodeID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Pdr)
                    .HasColumnName("PDR")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Place).HasMaxLength(50);

                entity.Property(e => e.Post).HasMaxLength(50);

                entity.Property(e => e.PrixodRecordId)
                    .HasColumnName("Prixod_RecordID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TypeCalc).HasDefaultValueSql("((0))");

                entity.Property(e => e.UrFaceId).HasColumnName("UrFaceID");
            });

            modelBuilder.Entity<ОсПодразделения>(entity =>
            {
                entity.ToTable("ОС_Подразделения");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<ОсСоответствиеСтруктур>(entity =>
            {
                entity.HasKey(e => new { e.StructId, e.PrId, e.Id });

                entity.ToTable("ОС_Соответствие_Структур");

                entity.Property(e => e.StructId)
                    .HasColumnName("StructID")
                    .HasMaxLength(10);

                entity.Property(e => e.PrId).HasColumnName("PrID");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<ОсСписокДолжностей>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("ОС_Список должностей");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.GroupName).HasMaxLength(50);
            });

            modelBuilder.Entity<ОсСписокМол>(entity =>
            {
                entity.ToTable("ОС_Список_МОЛ");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.OrgId)
                    .HasColumnName("OrgID")
                    .HasDefaultValueSql("((9))");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ОсФормированиеСтоимостиТмц>(entity =>
            {
                entity.HasKey(e => e.IdTmc);

                entity.ToTable("ОС_Формирование_Стоимости_ТМЦ");

                entity.Property(e => e.IdTmc)
                    .HasColumnName("ID_TMC")
                    .ValueGeneratedNever();

                entity.Property(e => e.CurNds).HasColumnName("CurNDS");

                entity.Property(e => e.Dost).HasColumnType("money");

                entity.Property(e => e.DostRate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.DostVal).HasColumnType("money");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("money");

                entity.Property(e => e.Ndsrate)
                    .HasColumnName("NDSRate")
                    .HasColumnType("decimal(10, 4)");

                entity.Property(e => e.Ndsval)
                    .HasColumnName("NDSVal")
                    .HasColumnType("money");

                entity.Property(e => e.Poshlina).HasColumnType("money");

                entity.Property(e => e.PoshlinaRate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.PoshlinaVal).HasColumnType("money");

                entity.Property(e => e.Price).HasColumnType("money");

                entity.Property(e => e.PriceRate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.PriceVal).HasColumnType("money");

                entity.Property(e => e.Strax).HasColumnType("money");

                entity.Property(e => e.StraxRate).HasColumnType("decimal(10, 4)");

                entity.Property(e => e.StraxVal).HasColumnType("money");

                entity.Property(e => e.Total).HasColumnType("money");
            });

            modelBuilder.Entity<ОсХарактеристики>(entity =>
            {
                entity.ToTable("ОС_Характеристики");

                entity.HasIndex(e => e.IdTmc)
                    .HasName("IX_ОС_Характеристики");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Value).HasMaxLength(255);
            });

            modelBuilder.Entity<ОсЭнергоресурсы>(entity =>
            {
                entity.HasKey(e => new { e.CellId, e.Date });

                entity.ToTable("ОС_Энергоресурсы");

                entity.Property(e => e.CellId).HasColumnName("CellID");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.Air).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Electric).HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Gas).HasColumnType("decimal(10, 3)");
            });

            modelBuilder.Entity<ОсЭнергоресурсыТарифы>(entity =>
            {
                entity.HasKey(e => new { e.Date, e.Type });

                entity.ToTable("ОС_Энергоресурсы_Тарифы");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.TarifR).HasColumnType("decimal(10, 3)");
            });

            modelBuilder.Entity<Остатки>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Остатки")
                    .IsUnique();

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОстаткиПоЗаявкам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Остатки по заявкам");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Поступление).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ПоступлениеДол)
                    .HasColumnName("Поступление_дол")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Расход).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.РасходДол)
                    .HasColumnName("Расход_дол")
                    .HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<ОстаткиПоЗаявкамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Остатки по заявкам регион");

                entity.Property(e => e.FirstДатаВывоза)
                    .HasColumnName("First_Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstНакладная)
                    .HasColumnName("First_Накладная")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерОфиса).HasColumnName("Номер_офиса");

                entity.Property(e => e.ОстатокДол)
                    .HasColumnName("Остаток_дол")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ОстатокРуб).HasColumnName("Остаток_руб");
            });

            modelBuilder.Entity<ОстаткиПоЗаявкамФактРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Остатки по заявкам факт регион");

                entity.Property(e => e.ОстатокРуб).HasColumnName("Остаток_руб");
            });

            modelBuilder.Entity<ОстаткиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Остатки регион");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Остатки регион")
                    .IsUnique();

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаНал)
                    .HasColumnName("Сумма нал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаРубНал)
                    .HasColumnName("Сумма_руб нал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ОстаткиСотрудников>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Остатки сотрудников");

                entity.HasIndex(e => new { e.IdСотрудника, e.IdФирмы })
                    .HasName("IX_Остатки сотрудников")
                    .IsUnique();

                entity.Property(e => e.IdСотрудника).HasColumnName("ID сотрудника");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((8))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОтгруженныеРасходы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолВып).HasColumnName("кол_вып");

                entity.Property(e => e.КолОтг).HasColumnName("кол_отг");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСФил>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с фил");

                entity.Property(e => e.Ccrub)
                    .HasColumnName("ccrub")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.God).HasColumnName("god");

                entity.Property(e => e.Mes).HasColumnName("mes");

                entity.Property(e => e.OtgrSNds)
                    .HasColumnName("otgr_s_nds")
                    .HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСФилПодгр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с фил подгр");

                entity.Property(e => e.Ccrub)
                    .HasColumnName("ccrub")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.God).HasColumnName("god");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.Mes).HasColumnName("mes");

                entity.Property(e => e.OtgrSNds)
                    .HasColumnName("otgr_s_nds")
                    .HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСФилСкл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с фил скл");

                entity.Property(e => e.Ccrub).HasColumnName("ccrub");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолОтг).HasColumnName("кол_отг");

                entity.Property(e => e.Сс).HasColumnName("сс");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСЦо1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с ЦО1111");

                entity.Property(e => e.Ccrub).HasColumnName("ccrub");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолОтг).HasColumnName("кол_отг");

                entity.Property(e => e.Сс).HasColumnName("сс");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСЦоСкл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с ЦО скл");

                entity.Property(e => e.Ccrub)
                    .HasColumnName("ccrub")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолОтг)
                    .HasColumnName("кол_отг")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСЦоСклДил1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с ЦО скл дил1111");

                entity.Property(e => e.Ccrub)
                    .HasColumnName("ccrub")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолОтг)
                    .HasColumnName("кол_отг")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦенаРеал)
                    .HasColumnName("цена_реал")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦенаРеалДол)
                    .HasColumnName("цена_реал_дол")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСЦоСклДилБезВозвр1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с ЦО скл дил без возвр1111");

                entity.Property(e => e.Ccrub)
                    .HasColumnName("ccrub")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолОтг)
                    .HasColumnName("кол_отг")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦенаРеал)
                    .HasColumnName("цена_реал")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦенаРеалДол)
                    .HasColumnName("цена_реал_дол")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСЦоСклПер>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с ЦО скл пер");

                entity.Property(e => e.Ccrub)
                    .HasColumnName("ccrub")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолОтг)
                    .HasColumnName("кол_отг")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<ОтгруженныеРасходыСЦоСклФил1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгруженные расходы с ЦО скл фил1111");

                entity.Property(e => e.Ccrub)
                    .HasColumnName("ccrub")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолОтг)
                    .HasColumnName("кол_отг")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<Отгружено>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгружено");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ОтгруженоПоЗаказуВУзловой>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгружено по Заказу в Узловой");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПерваяУзловая)
                    .HasColumnName("Дата_первая_Узловая")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<ОтгруженоСУчетомВозвратов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгружено с учетом возвратов");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ОтгрузкаЗаПериодДляОтчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Отгрузка за период для отчета");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Отгрузка за период для отчета111")
                    .IsUnique();

                entity.Property(e => e.Dil).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОбъед).HasColumnName("ID_объед");

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КаналСбыта)
                    .HasColumnName("Канал сбыта")
                    .HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.Объединенный).HasMaxLength(50);

                entity.Property(e => e.ОплатаОплата)
                    .HasColumnName("Оплата_оплата")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОтгрСс)
                    .HasColumnName("Отгр_сс")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОтгрЦр)
                    .HasColumnName("Отгр_цр")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Отгрузка3Мес)
                    .HasColumnName("Отгрузка_3_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.РегионЦо)
                    .HasColumnName("Регион_ЦО")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СредневзвСкидка)
                    .HasColumnName("Средневзв_скидка")
                    .HasColumnType("decimal(18, 4)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ОтгрузкаЗаПериодДляОтчетаГр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка за период для отчета_гр");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОбъед).HasColumnName("ID_объед");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КаналСбыта)
                    .HasColumnName("Канал сбыта")
                    .HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.Объединенный).HasMaxLength(50);

                entity.Property(e => e.Отгр3Мес)
                    .HasColumnName("отгр_3_мес")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтгрСс)
                    .HasColumnName("Отгр_сс")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтгрЦр)
                    .HasColumnName("Отгр_цр")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Отгрузка).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.РегионЦо).HasColumnName("Регион_ЦО");

                entity.Property(e => e.СредневзвСкидка)
                    .HasColumnName("Средневзв_скидка")
                    .HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ОтгрузкаЗаПериодДляОтчетаГрDil>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка за период для отчета_гр_dil");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ОтгрЦр)
                    .HasColumnName("Отгр_цр")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Отгрузка).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ОтгрузкаЗаПериодДляОтчетаГрОфис>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка за период для отчета_гр_офис");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.ОтгрЦр)
                    .HasColumnName("Отгр_цр")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Отгрузка).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.РегионЦо).HasColumnName("Регион_ЦО");
            });

            modelBuilder.Entity<ОтгрузкаЗаПериодДляОтчетаИнн>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка за период для отчета_инн");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КолМесяцев).HasColumnName("Кол_месяцев");

                entity.Property(e => e.Отгр3Мес)
                    .HasColumnName("отгр_3_мес")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтгрСс)
                    .HasColumnName("Отгр_сс")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтгрЦр)
                    .HasColumnName("Отгр_цр")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Отгрузка).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.РегионЦо).HasColumnName("Регион_ЦО");

                entity.Property(e => e.СредневзвСкидка)
                    .HasColumnName("Средневзв_скидка")
                    .HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ОтгрузкаЗаПериодДляОтчетаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Отгрузка за период для отчета регион");

                entity.HasIndex(e => new { e.IdДилера, e.ОплатаРуб, e.Регион, e.UserId, e.ОтгрЦр, e.ОтгрСс, e.IdОбъед })
                    .HasName("IX_Отгрузка за период для отчета регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОбъед).HasColumnName("ID_объед");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КаналСбыта)
                    .HasColumnName("Канал сбыта")
                    .HasMaxLength(255);

                entity.Property(e => e.КолМесяцев).HasColumnName("кол_месяцев");

                entity.Property(e => e.Объединенный).HasMaxLength(255);

                entity.Property(e => e.ОплатаРуб)
                    .HasColumnName("Оплата_руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОтгрСс)
                    .HasColumnName("Отгр_сс")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОтгрЦр)
                    .HasColumnName("Отгр_цр")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Отгрузка3Мес)
                    .HasColumnName("Отгрузка_3_мес")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ОтгрузкаКонтролируемыхПоДилерам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка контролируемых по дилерам");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR_")
                    .HasColumnType("decimal(37, 5)");

                entity.Property(e => e.SumКоличествоДляОтгрузки1)
                    .HasColumnName("Sum-Количество для отгрузки1")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Выражение3).HasMaxLength(255);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.Под).HasMaxLength(50);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(37, 4)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ОтгрузкаМоскваЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка_Москва_ЦО");

                entity.Property(e => e.Expr3).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ОтгрузкаНаСосенкиМинусССоенокОктНояб>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка на сосенки_минус_с_соенок_окт_нояб");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.НаСосенки)
                    .HasColumnName("на сосенки")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ОтгрузкаПоКаналамСбыта>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка по каналам сбыта");

                entity.Property(e => e.ВыручкаБезНдс)
                    .HasColumnName("Выручка_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.КаналСбыта)
                    .HasColumnName("Канал сбыта")
                    .HasMaxLength(150);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ОтгрузкаРегионы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка регионы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb)
                    .HasColumnName("seb")
                    .HasColumnType("decimal(37, 5)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("ssr")
                    .HasColumnType("decimal(37, 5)");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Бц).HasColumnName("бц");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(37, 4)");

                entity.Property(e => e.Товар).HasMaxLength(255);
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемом112015>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом_11_2015");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомВозврат>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом_возврат");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.ЦпСосенки)
                    .HasColumnName("ЦП_сосенки")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомВсеССосенок>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом_все_с_сосенок");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(19, 3)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомНов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом_нов");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Амортизация).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(19, 3)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомРегионLb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом регион_LB");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(19, 3)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомРегионВозврат>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом регион_возврат");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомРегионНов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом регион_нов");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Амортизация).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Кому)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.РеализацияСсБезНдс)
                    .HasColumnName("Реализация_СС_без_НДС")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(19, 3)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомССосенокДляСклада>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом_с_сосенок_для_склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Амортизация).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(19, 3)");
            });

            modelBuilder.Entity<ОтгрузкаСВесомИОбъемомФилиал>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с весом и объемом филиал");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Кому)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(19, 3)");
            });

            modelBuilder.Entity<ОтгрузкаССосенокОктНояб>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка с сосенок_окт_нояб");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrRasБезНдс)
                    .HasColumnName("SSR_ras_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Вес).HasColumnName("вес");

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false);

                entity.Property(e => e.КолР)
                    .HasColumnName("Кол_р")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Кому)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.НаСосенки)
                    .HasColumnName("на сосенки")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Об).HasColumnName("об");

                entity.Property(e => e.Реализация).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦпТула)
                    .HasColumnName("ЦП_Тула")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ОтгрузкаЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Отгрузка цо");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb)
                    .HasColumnName("seb")
                    .HasColumnType("decimal(37, 6)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("ssr")
                    .HasColumnType("decimal(37, 6)");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Бц).HasColumnName("бц");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("Сумма отгр")
                    .HasColumnType("decimal(37, 6)");

                entity.Property(e => e.Товар).HasMaxLength(100);
            });

            modelBuilder.Entity<ОтчетЗапросы>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.QueryId)
                    .HasName("IX_ОтчетЗапросы");

                entity.HasIndex(e => new { e.QueryId, e.ReportId })
                    .HasName("IX_ОтчетЗапросы_1")
                    .IsUnique();

                entity.Property(e => e.DetailQueryId).HasColumnName("DetailQueryID");

                entity.Property(e => e.ExcelRange).HasMaxLength(50);

                entity.Property(e => e.KeyId)
                    .HasColumnName("KeyID")
                    .HasMaxLength(255);

                entity.Property(e => e.QueryId).HasColumnName("QueryID");

                entity.Property(e => e.QueryName).HasMaxLength(50);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<ОтчетПараметры>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.ParamName, e.ReportId })
                    .HasName("IX_ОтчетПараметры")
                    .IsUnique();

                entity.Property(e => e.ParamName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReportId).HasColumnName("ReportID");
            });

            modelBuilder.Entity<Отчеты>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.ReportId)
                    .HasName("IX_Отчеты")
                    .IsUnique();

                entity.Property(e => e.FileName).HasMaxLength(150);

                entity.Property(e => e.ReportId)
                    .HasColumnName("ReportID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ReportName).HasMaxLength(50);

                entity.Property(e => e.ReportPath).HasMaxLength(150);
            });

            modelBuilder.Entity<ОтчетыГруппаПодгруппаМодель>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Отчеты группа-подгруппа-модель");

                entity.Property(e => e.ГодМесяц).HasMaxLength(7);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Руб).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Штук).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОтчетыДилерГруппаПодгруппаМодель>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Отчеты дилер-группа-подгруппа-модель");

                entity.Property(e => e.ГодМесяц).HasMaxLength(7);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Руб).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Штук).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОтчетыКаналГруппаПодгруппаМодель>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Отчеты канал-группа-подгруппа-модель");

                entity.Property(e => e.ГодМесяц).HasMaxLength(7);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Руб).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Штук).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОтчетыМенеджерГруппаПодгруппаМодель>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Отчеты менеджер-группа-подгруппа-модель");

                entity.Property(e => e.ГодМесяц).HasMaxLength(7);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Руб).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Штук).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОтчетыОтгрузки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Отчеты отгрузки");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ГодМесяц).HasMaxLength(7);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Руб).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Штук).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОтчетыОтгрузкиДляГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Отчеты отгрузки для групп");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ГодМесяц).HasMaxLength(7);

                entity.Property(e => e.Руб).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Штук).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОтчетыОтделГруппаПодгруппаМодель>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Отчеты отдел-группа-подгруппа-модель");

                entity.Property(e => e.ГодМесяц).HasMaxLength(7);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Подгруппа).HasMaxLength(50);

                entity.Property(e => e.Руб).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Штук).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ОтчетыПоАвансам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Отчеты по авансам");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Отчеты по авансам")
                    .IsUnique();

                entity.HasIndex(e => e.RecordRashod)
                    .HasName("IX_Отчеты по авансам_1");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordRashod).HasColumnName("Record rashod");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("money");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<Оценки>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Дата, e.IdПоставщика })
                    .HasName("IX_Оценки")
                    .IsUnique();

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ОчередьМоскваNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Очередь_Москва_new");

                entity.Property(e => e.Expr1).HasColumnType("datetime");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Password).HasMaxLength(15);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Приор)
                    .HasColumnName("приор")
                    .HasMaxLength(20);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ОчередьМоскваРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Очередь_Москва_Регион");

                entity.Property(e => e.Expr1).HasColumnType("datetime");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<ОчередьМоскваЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Очередь_Москва_ЦО");

                entity.Property(e => e.Expr1).HasColumnType("datetime");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<Параметры>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Месяц, e.Год })
                    .HasName("IX_Параметры")
                    .IsUnique();
            });

            modelBuilder.Entity<ПерваяДатаОплаты>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата оплаты");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.ПерваяДата)
                    .HasColumnName("Первая дата")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ПерваяДатаОплатыДляВедущегоРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата оплаты для ведущего регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.ПерваяДата)
                    .HasColumnName("Первая дата")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ПерваяДатаОплатыЗаявки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Первая дата оплаты заявки");

                entity.Property(e => e.MinДатаПр)
                    .HasColumnName("Min_Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ПерваяДатаОплатыПоЗаявке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата оплаты по заявке");

                entity.Property(e => e.Expr1).HasColumnType("smalldatetime");

                entity.Property(e => e.Expr2).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ПерваяДатаОплатыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата оплаты регион");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.ПерваяДата)
                    .HasColumnName("Первая дата")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ПерваяДатаОплатыЮрлицо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата оплаты юрлицо");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ПерваяДата)
                    .HasColumnName("Первая дата")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ПерваяДатаОтгрузкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата отгрузки регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.ПерваяДатаОтгрузки)
                    .HasColumnName("Первая дата отгрузки")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ПерваяДатаОтгрузкиТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата отгрузки товара");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ПерваяДатаОтгрузки)
                    .HasColumnName("Первая дата отгрузки")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ПерваяДатаПрихода>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата прихода");

                entity.Property(e => e.Expr1).HasColumnType("datetime");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПерваяДатаПриходаТехуспех1Год>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата прихода Техуспех_1_год");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ПерваяДатаПриходаТехуспех3Года>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Первая дата прихода Техуспех_3_года");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ПереводыВыставкиТмпРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Переводы_выставки_тмп регион");

                entity.HasIndex(e => new { e.IdТовара, e.UserId })
                    .HasName("IX_Переводы_выставки_тмп регион")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПереводыРасходыВыставкиТмпРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Переводы_расходы_выставки_тмп регион");

                entity.HasIndex(e => new { e.IdТовара, e.UserId })
                    .HasName("IX_Переводы_расходы_выставки_тмп регион")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПеревозчикиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Перевозчики регион");

                entity.HasIndex(e => e.IdОрганизации)
                    .HasName("IX_Перевозчики регион")
                    .IsUnique();

                entity.Property(e => e.IdОрганизации)
                    .HasColumnName("ID организации")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Организация)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ПлательщикПерев)
                    .HasColumnName("Плательщик_перев")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ПереданоПоРекламации>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Передано по рекламации");

                entity.HasIndex(e => new { e.НомерЗаказа, e.Артикул, e.НомерРекламации })
                    .HasName("IX_Передано по рекламации")
                    .IsUnique();

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Завод)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Закачено).HasDefaultValueSql("((0))");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерЗаказа)
                    .HasColumnName("Номер заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерРекламации).HasColumnName("Номер рекламации");
            });

            modelBuilder.Entity<ПерекачкаОплатРег>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Перекачка оплат рег");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назн).HasMaxLength(315);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(15);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Счет)
                    .HasColumnName("счет")
                    .HasMaxLength(23);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<ПерекачкаОплатРегАльфа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Перекачка оплат рег АЛЬФА");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСо)
                    .HasColumnName("Дата СО")
                    .HasColumnType("datetime");

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Контрагент).HasMaxLength(50);

                entity.Property(e => e.Назн).HasMaxLength(315);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(15);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.Расч).HasMaxLength(11);

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Счет)
                    .HasColumnName("счет")
                    .HasMaxLength(23);

                entity.Property(e => e.Фирма).HasMaxLength(20);
            });

            modelBuilder.Entity<ПечатьВыдатковой>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать выдатковой");

                entity.Property(e => e.AdrSkl)
                    .HasColumnName("adr_skl")
                    .HasMaxLength(255);

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr2).HasMaxLength(260);

                entity.Property(e => e.Expr3).HasMaxLength(37);

                entity.Property(e => e.Firma)
                    .HasColumnName("firma")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.Nmgr)
                    .HasColumnName("nmgr")
                    .HasMaxLength(150);

                entity.Property(e => e.PrimPogr)
                    .HasColumnName("prim_pogr")
                    .HasMaxLength(100);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Sopr)
                    .HasColumnName("sopr")
                    .HasMaxLength(167);

                entity.Property(e => e.Transp)
                    .HasColumnName("transp")
                    .HasMaxLength(203);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Госномер).HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(511);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(787);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСч)
                    .HasColumnName("Дата сч")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.Итого).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Кл).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10);

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(50);

                entity.Property(e => e.КтоВОфисе)
                    .HasColumnName("Кто_в_офисе")
                    .HasMaxLength(37);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название).HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомГтд)
                    .HasColumnName("Ном_ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомНакл).HasColumnName("ном_накл");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.Перевозчик).HasMaxLength(255);

                entity.Property(e => e.ПлательщикПерев)
                    .HasColumnName("Плательщик_перев")
                    .HasMaxLength(255);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф)
                    .HasColumnName("Приказ СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф1)
                    .HasColumnName("Приказ СФ1")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф2)
                    .HasColumnName("Приказ СФ2")
                    .HasMaxLength(255);

                entity.Property(e => e.ПримЗ)
                    .HasColumnName("прим_з")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(90);

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(664);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.Фил)
                    .HasColumnName("фил")
                    .HasMaxLength(70);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Эд).HasColumnName("ЭД");
            });

            modelBuilder.Entity<ПечатьВыдатковойDb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать выдатковой_db");

                entity.Property(e => e.AdrSkl)
                    .HasColumnName("adr_skl")
                    .HasMaxLength(255);

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr2).HasMaxLength(260);

                entity.Property(e => e.Expr3).HasMaxLength(37);

                entity.Property(e => e.Firma)
                    .HasColumnName("firma")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.Nmgr)
                    .HasColumnName("nmgr")
                    .HasMaxLength(150);

                entity.Property(e => e.PrimPogr)
                    .HasColumnName("prim_pogr")
                    .HasMaxLength(100);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Sopr)
                    .HasColumnName("sopr")
                    .HasMaxLength(88);

                entity.Property(e => e.Transp)
                    .HasColumnName("transp")
                    .HasMaxLength(203);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(23, 7)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Госномер).HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(511);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(787);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаСч)
                    .HasColumnName("Дата сч")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.Итого).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Кл).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.КтоВОфисе)
                    .HasColumnName("Кто_в_офисе")
                    .HasMaxLength(37);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомГтд)
                    .HasColumnName("Ном_ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомНакл).HasColumnName("ном_накл");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(23);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.Перевозчик).HasMaxLength(255);

                entity.Property(e => e.ПлательщикПерев)
                    .HasColumnName("Плательщик_перев")
                    .HasMaxLength(255);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф)
                    .HasColumnName("Приказ СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф1)
                    .HasColumnName("Приказ СФ1")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф2)
                    .HasColumnName("Приказ СФ2")
                    .HasMaxLength(255);

                entity.Property(e => e.ПримЗ)
                    .HasColumnName("прим_з")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(90);

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(664);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Эд).HasColumnName("ЭД");
            });

            modelBuilder.Entity<ПечатьЗаявки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать заявки");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(9);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(9);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоп).HasMaxLength(511);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьЗаявкиDb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать заявки_db");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(9);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(9);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(511);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(50);

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(25);

                entity.Property(e => e.Кто).HasMaxLength(100);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерРасп).HasColumnName("Номер_расп");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьКорректыУвеличенияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать корректы увеличения регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(23, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Госномер).HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(511);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(787);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаКОплате)
                    .HasColumnName("Дата к оплате")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСчета)
                    .HasColumnName("Код счета")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КолКор)
                    .HasColumnName("кол_кор")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(50);

                entity.Property(e => e.КппТорг12)
                    .HasColumnName("КПП_ТОРГ12")
                    .HasMaxLength(12);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название).HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(30);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.ОтпускПроизвел)
                    .HasColumnName("Отпуск произвел")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasColumnType("datetime");

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УсловиеПродажи)
                    .HasColumnName("Условие продажи")
                    .HasMaxLength(150);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ПечатьНалоговойНаОплатуРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать налоговой на оплату регион");

                entity.Property(e => e.FirstДатаПр)
                    .HasColumnName("First_Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.БазоваяЦена).HasColumnName("Базовая цена");

                entity.Property(e => e.БазоваяЦенаR).HasColumnName("Базовая цена R");

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Год)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Итого).HasColumnName("Итого_");

                entity.Property(e => e.Кл)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.КодГорода)
                    .IsRequired()
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название).HasMaxLength(30);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(12);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(200);

                entity.Property(e => e.РаспорСрок).HasColumnType("datetime");

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Срок).HasColumnType("datetime");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Телефоны).HasMaxLength(40);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ПечатьПередаточногоАкта>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать Передаточного Акта");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(23, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Госномер).HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(511);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(787);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаКОплате)
                    .HasColumnName("Дата к оплате")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(510);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(50);

                entity.Property(e => e.КппТорг12)
                    .HasColumnName("КПП_ТОРГ12")
                    .HasMaxLength(12);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название).HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(30);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.ОтпускПроизвел)
                    .HasColumnName("Отпуск произвел")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasColumnType("datetime");

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Телефоны).HasMaxLength(40);

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УсловиеПродажи)
                    .HasColumnName("Условие продажи")
                    .HasMaxLength(150);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фирма).HasMaxLength(255);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ПечатьРасходнойDbРегионNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать расходной_db регион_new");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr2).HasMaxLength(260);

                entity.Property(e => e.Expr3).HasMaxLength(37);

                entity.Property(e => e.Firma)
                    .HasColumnName("firma")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.Nmgr)
                    .HasColumnName("nmgr")
                    .HasMaxLength(150);

                entity.Property(e => e.PrimPogr)
                    .HasColumnName("prim_pogr")
                    .HasMaxLength(100);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Sopr)
                    .HasColumnName("sopr")
                    .HasMaxLength(88);

                entity.Property(e => e.Transp)
                    .HasColumnName("transp")
                    .HasMaxLength(203);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресСклада)
                    .HasColumnName("Адрес склада")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(23, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.Вместимость).HasMaxLength(50);

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Госномер).HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоподъемность).HasMaxLength(50);

                entity.Property(e => e.Грузополучатель).HasMaxLength(511);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(787);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаКОплате)
                    .HasColumnName("Дата к оплате")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Заказчик).HasMaxLength(255);

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(245);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.КппТорг12)
                    .HasColumnName("КПП_ТОРГ12")
                    .HasMaxLength(12);

                entity.Property(e => e.КтоВОфисе)
                    .HasColumnName("Кто_в_офисе")
                    .HasMaxLength(37);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(23);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(30);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Перевозчик).HasMaxLength(255);

                entity.Property(e => e.ПлательщикПерев)
                    .HasColumnName("Плательщик_перев")
                    .HasMaxLength(255);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф)
                    .HasColumnName("Приказ СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф1)
                    .HasColumnName("Приказ СФ1")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф2)
                    .HasColumnName("Приказ СФ2")
                    .HasMaxLength(255);

                entity.Property(e => e.ПримЗ)
                    .HasColumnName("прим_з")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Тип).HasMaxLength(50);

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УсловиеПродажи)
                    .HasColumnName("Условие продажи")
                    .HasMaxLength(150);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ПечатьРасходнойРегионNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать расходной регион_new");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr2).HasMaxLength(260);

                entity.Property(e => e.Expr3).HasMaxLength(37);

                entity.Property(e => e.Firma)
                    .HasColumnName("firma")
                    .HasMaxLength(50);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.PrimPogr)
                    .HasColumnName("prim_pogr")
                    .HasMaxLength(100);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Transp)
                    .HasColumnName("transp")
                    .HasMaxLength(203);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресСклада)
                    .HasColumnName("Адрес склада")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.Вместимость).HasMaxLength(50);

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Госномер).HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоподъемность).HasMaxLength(50);

                entity.Property(e => e.Грузополучатель).HasMaxLength(511);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(787);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаКОплате)
                    .HasColumnName("Дата к оплате")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Заказчик).HasMaxLength(255);

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(522);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСчета)
                    .HasColumnName("Код счета")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(50);

                entity.Property(e => e.КппТорг12)
                    .HasColumnName("КПП_ТОРГ12")
                    .HasMaxLength(12);

                entity.Property(e => e.КтоВОфисе)
                    .HasColumnName("Кто_в_офисе")
                    .HasMaxLength(37);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название).HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НаименованиеГруза)
                    .HasColumnName("Наименование груза")
                    .HasMaxLength(150);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(30);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.ОтпускПроизвел)
                    .HasColumnName("Отпуск произвел")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Перевозчик).HasMaxLength(255);

                entity.Property(e => e.ПлательщикПерев)
                    .HasColumnName("Плательщик_перев")
                    .HasMaxLength(255);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф)
                    .HasColumnName("Приказ СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф1)
                    .HasColumnName("Приказ СФ1")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф2)
                    .HasColumnName("Приказ СФ2")
                    .HasMaxLength(255);

                entity.Property(e => e.ПримЗ)
                    .HasColumnName("прим_з")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasColumnType("datetime");

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Тип).HasMaxLength(50);

                entity.Property(e => e.ТипДокумента)
                    .IsRequired()
                    .HasColumnName("Тип документа")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УсловиеПродажи)
                    .HasColumnName("Условие продажи")
                    .HasMaxLength(150);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фил)
                    .HasColumnName("фил")
                    .HasMaxLength(70);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ПечатьСчетФактурыДилерыДлDb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счет-фактуры дилеры дл_db");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Gln)
                    .HasColumnName("GLN")
                    .HasMaxLength(20);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(255);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(12);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(460);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.АртикулТо)
                    .HasColumnName("Артикул ТО")
                    .HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(511);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(50);

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Кто).HasMaxLength(100);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерРасп).HasColumnName("Номер_расп");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьСчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(407);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Примечание).HasMaxLength(510);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Телефоны).HasMaxLength(40);

                entity.Property(e => e.Товар).HasMaxLength(150);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьСчетаДолРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета_дол регион");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаКОплате)
                    .HasColumnName("Дата к оплате")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодГорода)
                    .IsRequired()
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(12);

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Телефоны).HasMaxLength(40);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.УсловиеПродажи)
                    .HasColumnName("Условие продажи")
                    .HasMaxLength(150);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ПечатьСчетаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета регион");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.Kto)
                    .HasColumnName("kto")
                    .HasMaxLength(37);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Post)
                    .HasColumnName("post")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаКОплате)
                    .HasColumnName("Дата к оплате")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(12);

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ОсобыеУсловияДляСчета)
                    .HasColumnName("Особые условия для счета")
                    .HasMaxLength(255);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(343);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Телефоны).HasMaxLength(40);

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(20);

                entity.Property(e => e.УсловиеПродажи)
                    .HasColumnName("Условие продажи")
                    .HasMaxLength(150);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ПечатьСчетаФактурыАванс>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета-фактуры аванс");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(9);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(9);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(511);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьСчетаФактурыДилера>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета-фактуры дилера");

                entity.Property(e => e.Gln)
                    .HasColumnName("GLN")
                    .HasMaxLength(20);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(9);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(9);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(511);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(50);

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьСчетаФактурыДилераАванс>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета-фактуры дилера аванс");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(9);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(9);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(511);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьСчетаФактурыДилерыДл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета-фактуры дилеры дл");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.ArtikulMgb)
                    .HasColumnName("Artikul MGB")
                    .HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Gln)
                    .HasColumnName("GLN")
                    .HasMaxLength(20);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(255);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(460);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.АртикулТо)
                    .HasColumnName("Артикул ТО")
                    .HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR).HasColumnName("Базовая цена R");

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(512);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Кто).HasMaxLength(100);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерРасп).HasColumnName("Номер_расп");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Перевозчик).HasMaxLength(255);

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьСчетаФактурыДилерыКор>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать счета-фактуры дилеры кор");

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.KppDil)
                    .HasColumnName("kpp_dil")
                    .HasMaxLength(255);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(460);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255);

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КолКор)
                    .HasColumnName("кол_кор")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Кто).HasMaxLength(100);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерРасп).HasColumnName("Номер_расп");

                entity.Property(e => e.Перевозчик).HasMaxLength(255);

                entity.Property(e => e.Пост).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКонтракта).HasColumnName("Тип контракта");

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьЭкспортнойНакладной>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать экспортной накладной");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.АдресГр)
                    .HasColumnName("Адрес гр")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Валюта).HasMaxLength(50);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Грузоп).HasMaxLength(255);

                entity.Property(e => e.Груполучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоУпаковокВШт).HasColumnName("Количество упаковок в шт");

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.ОписаниеКода)
                    .HasColumnName("Описание кода")
                    .HasMaxLength(150);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(50);

                entity.Property(e => e.УсловияПоставкиType).HasMaxLength(50);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("numeric(38, 16)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("numeric(22, 5)");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПечатьЭкспортнойНакладнойРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Печать экспортной накладной регион");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.АдресГр)
                    .HasColumnName("Адрес гр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресСклада)
                    .HasColumnName("Адрес склада")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.Валюта).HasMaxLength(50);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоп).HasMaxLength(255);

                entity.Property(e => e.Груполучатель)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоУпаковокВШт).HasColumnName("Количество упаковок в шт");

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(255);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ОписаниеКода)
                    .HasColumnName("Описание кода")
                    .HasMaxLength(150);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(20);

                entity.Property(e => e.УсловияПоставкиType).HasMaxLength(255);

                entity.Property(e => e.Фирма).HasMaxLength(407);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("numeric(38, 15)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ПланПлатежейЦоЗаготовка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПланПлатежейЦО_заготовка");

                entity.Property(e => e.IdВладельца).HasColumnName("ID владельца");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.ДатаОплатыПоПлану)
                    .HasColumnName("Дата оплаты по плану")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.КаналСбыта)
                    .HasColumnName("Канал сбыта")
                    .HasMaxLength(150);

                entity.Property(e => e.КолДнейДоОплаты)
                    .HasColumnName("Кол дней до оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Рс)
                    .IsRequired()
                    .HasColumnName("РС")
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(101);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ПланПоСтатьям>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("План по статьям");

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_План по статьям");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_План по статьям_2")
                    .IsUnique();

                entity.HasIndex(e => new { e.Месяц, e.Год })
                    .HasName("IX_План по статьям_1");

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвансТек).HasColumnName("Аванс-Тек");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПоставки)
                    .HasColumnName("Дата поставки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЛимитАдмин)
                    .HasColumnName("Лимит АДМИН")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МесяцОказанияУслуги)
                    .HasColumnName("Месяц оказания услуги")
                    .HasMaxLength(5);

                entity.Property(e => e.Примечание)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма3).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПланПоСтатьямNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("План  по статьям_new");

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвансТек).HasColumnName("Аванс-Тек");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПоставки)
                    .HasColumnName("Дата поставки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЛимитАдмин)
                    .HasColumnName("Лимит АДМИН")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.МесяцОказанияУслуги)
                    .HasColumnName("Месяц оказания услуги")
                    .HasMaxLength(5);

                entity.Property(e => e.Примечание)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма3).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПланПоставок>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("План поставок");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_План поставок_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.Год, e.Месяц, e.IdТовара, e.Завод, e.Дата, e.IdСубсчета })
                    .HasName("IX_План поставок")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Завод)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ПланНаДень)
                    .HasColumnName("План на день")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Рц)
                    .HasColumnName("рц")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СпецЗаказ)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.СуммаCc)
                    .HasColumnName("Сумма cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРц)
                    .HasColumnName("Сумма рц")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПланПоставокАрхив>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("План поставок архив");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_План поставок архив")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Завод).HasMaxLength(20);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ПланНаДень)
                    .HasColumnName("План на день")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Рц)
                    .HasColumnName("рц")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СпецЗаказ)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.СуммаCc)
                    .HasColumnName("Сумма cc")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРц)
                    .HasColumnName("Сумма рц")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПланПоставокНаМесяц>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("План поставок на месяц");

                entity.HasIndex(e => new { e.Год, e.Месяц, e.IdТовара, e.IdСубсчета })
                    .HasName("IX_План поставок на месяц")
                    .IsUnique();

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Год).HasDefaultValueSql("(0)");

                entity.Property(e => e.Количество)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Месяц).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ПланПриходаСУзловойНаМоскву>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("План прихода с узловой на москву");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ПланПриходовПоСтатьям>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("План приходов по статьям");

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_План приходов по статьям_1");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_План приходов по статьям")
                    .IsUnique();

                entity.HasIndex(e => new { e.Месяц, e.Год })
                    .HasName("IX_План приходов по статьям_2");

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdКонтрагента).HasColumnName("ID контрагента");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Код).HasMaxLength(6);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.МесяцОказанияУслуги)
                    .HasColumnName("Месяц оказания услуги")
                    .HasMaxLength(5);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Процент).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма1Евро)
                    .HasColumnName("Сумма1 евро")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма2).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма2Евро)
                    .HasColumnName("Сумма2 евро")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма3).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Сумма3Евро)
                    .HasColumnName("Сумма3 евро")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПланПродаж>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("План продаж");

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_План продаж");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_План продаж_2")
                    .IsUnique();

                entity.HasIndex(e => new { e.Месяц, e.Год })
                    .HasName("IX_План продаж_1");

                entity.HasIndex(e => new { e.Месяц, e.Год, e.IdСубсчета, e.IdТовара })
                    .HasName("IX_План продаж_3")
                    .IsUnique();

                entity.Property(e => e.Cc)
                    .HasColumnName("cc")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Год).HasDefaultValueSql("(0)");

                entity.Property(e => e.Количество)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Месяц).HasDefaultValueSql("(0)");

                entity.Property(e => e.Рц)
                    .HasColumnName("рц")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаCc)
                    .HasColumnName("Сумма cc")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаРц)
                    .HasColumnName("Сумма рц")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Утвержден)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<Планерка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Планерка");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В_счете")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДеньНедели)
                    .HasColumnName("День_недели")
                    .HasMaxLength(30);

                entity.Property(e => e.Забронировано).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Клиент).HasMaxLength(70);

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ПланеркаВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Планерка_все");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В_счете")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Забронировано).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ПланеркаВсе1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Планерка_все", "tologin");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Забронировано).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ПланеркаВсеВСчетах>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Планерка_все_в_счетах");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В_счете")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Забронировано).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ПланеркаЗаказов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Планерка_заказов");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете).HasColumnName("В_счете");

                entity.Property(e => e.Группа).HasMaxLength(80);

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДеньНедели)
                    .HasColumnName("День_недели")
                    .HasMaxLength(30);

                entity.Property(e => e.Клиент)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ПланеркаРегионы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Планерка_регионы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В_счете")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Забронировано).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<ПланеркаЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Планерка_ЦО");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kf)
                    .HasColumnName("KF")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В_счете")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДеньНедели)
                    .HasColumnName("День_недели")
                    .HasMaxLength(30);

                entity.Property(e => e.Забронировано).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Клиент).HasMaxLength(50);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Плечо>(entity =>
            {
                entity.ToTable("Плечо", "Dobromyslov");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<ПогрузочныйЛистДилеры>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Погрузочный лист дилеры");

                entity.Property(e => e.Expr1).HasMaxLength(33);

                entity.Property(e => e.Expr2).HasMaxLength(100);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.InnAd)
                    .HasColumnName("inn_ad")
                    .HasMaxLength(32);

                entity.Property(e => e.InnUl)
                    .HasColumnName("inn_ul")
                    .HasMaxLength(32);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Obi)
                    .HasColumnName("OBI")
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.Pragmatic)
                    .HasColumnName("PRAGMATIC")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВремяПогрузки)
                    .HasColumnName("Время погрузки")
                    .HasColumnType("decimal(6, 2)");

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(769);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Имя1)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.КодЗакЗаявка)
                    .HasColumnName("код_зак_заявка")
                    .HasMaxLength(15);

                entity.Property(e => e.КодЗакРасх)
                    .HasColumnName("Код_зак_расх")
                    .HasMaxLength(10);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Леруа).HasMaxLength(50);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Модель)
                    .HasColumnName("модель")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Телефон)
                    .HasColumnName("телефон")
                    .HasMaxLength(50);

                entity.Property(e => e.Телефон1).HasMaxLength(50);

                entity.Property(e => e.Товар).HasMaxLength(100);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(50);

                entity.Property(e => e.УсловияПоставкиType).HasMaxLength(50);

                entity.Property(e => e.ФактМест).HasColumnName("Факт мест");

                entity.Property(e => e.Фамилия).HasMaxLength(100);

                entity.Property(e => e.Фамилия1).HasMaxLength(100);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Юрлицо).HasMaxLength(763);
            });

            modelBuilder.Entity<ПогрузочныйЛистДилерыТтРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Погрузочный лист дилеры ТТ регион");

                entity.Property(e => e.Expr1).HasMaxLength(33);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(522);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.КтоВОфисе)
                    .HasColumnName("Кто_в_офисе")
                    .HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(23);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.Примечание).HasMaxLength(100);

                entity.Property(e => e.РаспорСрок).HasColumnType("datetime");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Срок).HasColumnType("datetime");

                entity.Property(e => e.Товар).HasMaxLength(255);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(20);

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<ПогрузочныйЛистЕдиный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Погрузочный лист единый");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДляКого)
                    .HasColumnName("Для кого")
                    .HasMaxLength(70);

                entity.Property(e => e.Кл).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(510);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ПодгруппыДляLb>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Подгруппы для LB");

                entity.HasIndex(e => e.IdПодгруппы)
                    .HasName("IX_Подгруппы для LB")
                    .IsUnique();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");
            });

            modelBuilder.Entity<ПодписиЗаНал>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Подписи за нал");

                entity.HasIndex(e => new { e.IdСотрудника, e.Год, e.Месяц })
                    .HasName("IX_Подписи за нал")
                    .IsUnique();

                entity.Property(e => e.CardId).HasColumnName("CardID");

                entity.Property(e => e.IdСотрудника).HasColumnName("ID сотрудника");

                entity.Property(e => e.ВычетыНеофиц)
                    .HasColumnName("Вычеты неофиц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВычетыОфиц)
                    .HasColumnName("Вычеты офиц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаПодписи)
                    .HasColumnName("Дата подписи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕстьПодпись)
                    .HasColumnName("Есть подпись")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Имя).HasMaxLength(150);

                entity.Property(e => e.Отч).HasMaxLength(150);

                entity.Property(e => e.Подпись).HasColumnType("image");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОфиц)
                    .HasColumnName("Сумма офиц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПереч)
                    .HasColumnName("Сумма переч")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фам).HasMaxLength(150);
            });

            modelBuilder.Entity<ПодписиЗаНалИтр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Подписи за нал ИТР");

                entity.HasIndex(e => new { e.IdСотрудника, e.Год, e.Месяц })
                    .HasName("IX_Подписи за нал ИТР")
                    .IsUnique();

                entity.Property(e => e.CardId).HasColumnName("CardID");

                entity.Property(e => e.IdСотрудника).HasColumnName("ID сотрудника");

                entity.Property(e => e.ВычетыНеофиц)
                    .HasColumnName("Вычеты неофиц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВычетыОфиц)
                    .HasColumnName("Вычеты офиц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаПодписи)
                    .HasColumnName("Дата подписи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕстьПодпись)
                    .HasColumnName("Есть подпись")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Имя).HasMaxLength(150);

                entity.Property(e => e.Отч).HasMaxLength(150);

                entity.Property(e => e.Подпись).HasColumnType("image");

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОфиц)
                    .HasColumnName("Сумма офиц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПереч)
                    .HasColumnName("Сумма переч")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фам).HasMaxLength(150);
            });

            modelBuilder.Entity<ПодразделенияРеестра>(entity =>
            {
                entity.ToTable("Подразделения реестра", "DATASA");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Code).HasMaxLength(150);

                entity.Property(e => e.Name).HasMaxLength(850);
            });

            modelBuilder.Entity<ПодробноРазрешенияТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ПодробноРазрешения_тмп");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_ПодробноРазрешения_тмп_1")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДатаПоследняяОчереди)
                    .HasColumnName("Дата_последняя_очереди")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерЗаказа)
                    .HasColumnName("Номер заказа")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РазрешениеНеделя).HasColumnName("Разрешение_неделя");

                entity.Property(e => e.РегионЗаказа)
                    .HasColumnName("Регион заказа")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ПодробныйСписокНаСкладе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Подробный список на складе_");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ВПути)
                    .HasColumnName("В пути")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПутиКл)
                    .HasColumnName("В пути кл")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВыписанСчет)
                    .HasColumnName("Выписан счет")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Дилеры).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Клиенты).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ПодДилера)
                    .HasColumnName("Под дилера")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ПодТранзит)
                    .HasColumnName("Под транзит")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Транзиты).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПодробныйСписокНаСкладеВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Подробный список на складе все");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БезРазрешенияЗаявка).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Всего).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Свободно).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СвободноНеделя)
                    .HasColumnName("Свободно_неделя")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СвободноОтгрузка)
                    .HasColumnName("Свободно_отгрузка")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПодробныйСписокНаСкладеГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Подробный список на складе_групп");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БезРазрешенияЗаявка).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Всего).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Свободно).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СвободноНеделя)
                    .HasColumnName("Свободно_неделя")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СвободноОтгрузка)
                    .HasColumnName("Свободно_отгрузка")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПодробныйСписокНаСкладеНов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Подробный список на складе нов");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БезРазрешения).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Накладная).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Разрешение).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПодробныйСписокНаСкладеТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Подробный список на складе тмп");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.UserId })
                    .HasName("IX_Подробный список на складе тмп")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nedogr)
                    .HasColumnName("nedogr")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ВПути)
                    .HasColumnName("В пути")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВПутиКл)
                    .HasColumnName("В пути кл")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВыписанСчет)
                    .HasColumnName("Выписан счет")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Дилеры).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Клиенты).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.ПодДилера)
                    .HasColumnName("Под дилера")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПодТранзит)
                    .HasColumnName("Под транзит")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Транзиты).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПолучениеДенегПоПлану>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Получение денег по плану");

                entity.Property(e => e.ДатаПоПлану)
                    .HasColumnName("Дата по плану")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.УжеОплачено)
                    .HasColumnName("Уже_оплачено")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<ПоследнийМенеджер>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последний менеджер");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.LastUserId).HasColumnName("Last_User ID");
            });

            modelBuilder.Entity<ПоследняяДатаОплатыДилера>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя дата оплаты дилера");

                entity.Property(e => e.MaxДата)
                    .HasColumnName("Max_Дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Название).HasMaxLength(50);
            });

            modelBuilder.Entity<ПоследняяДатаОплатыДляВедущего>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя дата оплаты для ведущего");

                entity.Property(e => e.Idd).HasColumnName("IDD");

                entity.Property(e => e.MaxДата)
                    .HasColumnName("Max_Дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Название).HasMaxLength(15);
            });

            modelBuilder.Entity<ПоследняяДатаОплатыДляВедущегоРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя дата оплаты для ведущего регион");

                entity.Property(e => e.Idd).HasColumnName("IDD");

                entity.Property(e => e.ПослДата)
                    .HasColumnName("посл дата")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ПоследняяДатаОплатыМосква>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя дата оплаты москва");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.ПослДата)
                    .HasColumnName("посл_дата")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<ПоследняяДатаОплатыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя дата оплаты регион");

                entity.Property(e => e.Idd).HasColumnName("IDD");

                entity.Property(e => e.Дилер).HasMaxLength(50);

                entity.Property(e => e.ПослДата)
                    .HasColumnName("посл дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ПоследняяДатаПрихода>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя дата прихода");

                entity.Property(e => e.Expr1).HasColumnType("smalldatetime");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПоследняяДатаПриходаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя дата прихода регион");

                entity.Property(e => e.Expr1).HasColumnType("datetime");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПоследняяОплата>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя оплата");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.MaxДатаПр)
                    .HasColumnName("Max-Дата пр")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ПоследняяОтгрузка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Последняя отгрузка");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.MaxДатаВывоза)
                    .HasColumnName("Max-Дата вывоза")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ПоставкиДляСверкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Поставки для сверки регион");

                entity.Property(e => e.FirstДатаОприходования)
                    .HasColumnName("First_Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .HasMaxLength(30);

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.СуммаПоСчету)
                    .HasColumnName("Сумма по счету")
                    .HasColumnType("decimal(37, 6)");
            });

            modelBuilder.Entity<ПоставкиРасходы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Поставки расходы");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Поставки расходы")
                    .IsUnique();

                entity.HasIndex(e => e.RecordPostavok)
                    .HasName("IX_Поставки расходы_1");

                entity.HasIndex(e => e.RecordRashoda)
                    .HasName("IX_Поставки расходы_2");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordPostavok).HasColumnName("Record postavok");

                entity.Property(e => e.RecordRashoda).HasColumnName("Record rashoda");
            });

            modelBuilder.Entity<ПоставщикиГруппы>(entity =>
            {
                entity.HasKey(e => new { e.IdКлиента, e.IdГруппы, e.FactoryId });

                entity.ToTable("Поставщики-группы");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Поставщики-группы")
                    .IsUnique();

                entity.Property(e => e.IdКлиента)
                    .HasColumnName("ID клиента")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<ПпоследняяДатаОтгрузкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Ппоследняя дата отгрузки регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.ПерваяДатаОтгрузки)
                    .HasColumnName("Первая дата отгрузки")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<ПрДебТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ПрДеб_тмп");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_ПрДеб_тмп_2");

                entity.HasIndex(e => e.Наим)
                    .HasName("IX_ПрДеб_тмп");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_ПрДеб_тмп_1");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВремяОтДатыОтгрузки).HasColumnName("Время от даты отгрузки");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеДол)
                    .HasColumnName("Задолженность по отгрузке дол")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЗадолженностьПоОтгрузкеРуб)
                    .HasColumnName("Задолженность по отгрузке руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наим)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Накл)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Срок).HasMaxLength(50);

                entity.Property(e => e.СуммаОплат)
                    .HasColumnName("Сумма оплат")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаОплатРуб)
                    .HasColumnName("Сумма оплат руб")
                    .HasMaxLength(50);

                entity.Property(e => e.СуммаПоНакладной)
                    .HasColumnName("Сумма по накладной")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаПоНакладнойРуб)
                    .HasColumnName("Сумма по накладной руб")
                    .HasMaxLength(50);

                entity.Property(e => e.СуммаПоСчету)
                    .HasColumnName("Сумма по счету")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<Праздники>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Праздники")
                    .IsUnique();

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Название).HasMaxLength(50);
            });

            modelBuilder.Entity<ПрайсДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Прайс_Двери");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.SsrUzmk)
                    .HasColumnName("SSR_UZMK")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Рц)
                    .HasColumnName("РЦ")
                    .HasColumnType("decimal(30, 9)");

                entity.Property(e => e.Статус).HasMaxLength(2);
            });

            modelBuilder.Entity<ПрайслистПоставщиковПоставки>(entity =>
            {
                entity.HasKey(e => new { e.IdКлиента, e.IdЮрлица, e.IdТовара, e.FactoryId });

                entity.ToTable("Прайслист поставщиков поставки");

                entity.HasIndex(e => new { e.IdЮрлица, e.FactoryId })
                    .HasName("IX_Прайслист поставщиков поставки");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.Скидка).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Цена).HasColumnType("numeric(12, 4)");
            });

            modelBuilder.Entity<ПредложенияОхотников>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Предложения охотников");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Предложения охотников")
                    .IsUnique();

                entity.HasIndex(e => e.НомерЗаявки)
                    .HasName("IX_Предложения охотников_1");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Выбрано)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Ед1)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед10)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед2)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед3)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед4)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед5)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед6)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед7)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед8)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Ед9)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Значение1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение10)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение5)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение6)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение7)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение8)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Значение9)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Комментарий).HasMaxLength(255);

                entity.Property(e => e.Критерий1)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий10)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий2)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий3)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий4)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий5)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий6)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий7)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий8)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Критерий9)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.Поставщик).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ПретензияПоПродукции>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Претензия по продукции");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Претензия по продукции")
                    .IsUnique();

                entity.Property(e => e.IdДефекта)
                    .HasColumnName("ID дефекта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗамка)
                    .HasColumnName("ID замка")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdОрганизации)
                    .HasColumnName("ID организации")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПодкодДефекта)
                    .HasColumnName("ID подкод дефекта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПретензии)
                    .HasColumnName("ID претензии")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdРешения)
                    .HasColumnName("ID решения")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.АктРассмотренияРекламации)
                    .HasColumnName("Акт рассмотрения рекламации")
                    .HasMaxLength(255);

                entity.Property(e => e.ВидСервиса)
                    .HasColumnName("Вид сервиса")
                    .HasMaxLength(50);

                entity.Property(e => e.ВыездМастера).HasColumnName("Выезд мастера");

                entity.Property(e => e.ГодПродажи).HasColumnName("Год продажи");

                entity.Property(e => e.ДатаАкта)
                    .HasColumnName("Дата акта")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаВвода).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗакрытоФилиалом)
                    .HasColumnName("Дата закрыто филиалом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИзделия)
                    .HasColumnName("Дата изделия")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИспЗмк)
                    .HasColumnName("Дата исп ЗМК")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИспСкладом)
                    .HasColumnName("Дата исп складом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИсполнения)
                    .HasColumnName("Дата исполнения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИсполненияПоПлану)
                    .HasColumnName("Дата исполнения по плану")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаНакладной)
                    .HasColumnName("Дата накладной")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПолученоФилиалом)
                    .HasColumnName("Дата получено филиалом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Завод)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ЗатратыНаЗапчасти)
                    .HasColumnName("Затраты на запчасти")
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗатратыРемучастка)
                    .HasColumnName("Затраты ремучастка")
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗатратыСклада)
                    .HasColumnName("Затраты склада")
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗатратыТранспортировки)
                    .HasColumnName("Затраты транспортировки")
                    .HasColumnType("money");

                entity.Property(e => e.ЗатратыФилиала)
                    .HasColumnName("Затраты филиала")
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(20);

                entity.Property(e => e.КлеймоИсполнителя)
                    .HasColumnName("Клеймо исполнителя")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Количество).HasDefaultValueSql("((0))");

                entity.Property(e => e.КомуПередано)
                    .HasColumnName("Кому передано")
                    .HasMaxLength(60);

                entity.Property(e => e.КомуПереданоЗмк)
                    .HasColumnName("Кому передано ЗМК")
                    .HasMaxLength(60);

                entity.Property(e => e.Контакт).HasMaxLength(255);

                entity.Property(e => e.КорректирующиеДействия)
                    .HasColumnName("Корректирующие действия")
                    .HasMaxLength(255);

                entity.Property(e => e.КтоВнес)
                    .HasColumnName("Кто внес")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МестоНахождения)
                    .HasColumnName("Место нахождения")
                    .HasMaxLength(255);

                entity.Property(e => e.МестоРегистрации)
                    .HasColumnName("Место регистрации")
                    .HasMaxLength(255);

                entity.Property(e => e.МестоХранения)
                    .HasColumnName("Место хранения")
                    .HasMaxLength(150);

                entity.Property(e => e.МестоХраненияДоговора)
                    .HasColumnName("Место хранения договора")
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НеУчтеноЗмк)
                    .HasColumnName("Не учтено ЗМК")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НеобходимыеЗЧ)
                    .HasColumnName("Необходимые з/ч")
                    .HasMaxLength(255);

                entity.Property(e => e.НомерАкта)
                    .HasColumnName("Номер акта")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбъединитьСПретензией).HasColumnName("Объединить с Претензией");

                entity.Property(e => e.ОписаниеДефекта)
                    .HasColumnName("Описание дефекта")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтметкаОбИсполнении).HasColumnName("Отметка об исполнении");

                entity.Property(e => e.ОтчетЗмк)
                    .HasColumnName("Отчет ЗМК")
                    .HasMaxLength(60);

                entity.Property(e => e.Оценка).HasMaxLength(255);

                entity.Property(e => e.Паспорт).HasMaxLength(255);

                entity.Property(e => e.ПереданныеЗЧ)
                    .HasColumnName("Переданные з/ч")
                    .HasMaxLength(255);

                entity.Property(e => e.ПлощадкаРемонта)
                    .HasColumnName("Площадка ремонта")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.ПринятоеРешение)
                    .HasColumnName("Принятое решение")
                    .HasMaxLength(255);

                entity.Property(e => e.РекламацияПризнана)
                    .HasColumnName("Рекламация признана")
                    .HasMaxLength(3)
                    .HasDefaultValueSql("(N'Нет')");

                entity.Property(e => e.РешениеФилиала)
                    .HasColumnName("Решение филиала")
                    .HasMaxLength(255);

                entity.Property(e => e.СерийныйНомер)
                    .HasColumnName("Серийный номер")
                    .HasMaxLength(50);

                entity.Property(e => e.СкладОтгрузки)
                    .HasColumnName("Склад отгрузки")
                    .HasMaxLength(50);

                entity.Property(e => e.СостояниеУпаковки)
                    .HasColumnName("Состояние упаковки")
                    .HasMaxLength(50);

                entity.Property(e => e.СрокЭксплуатации)
                    .HasColumnName("Срок эксплуатации")
                    .HasMaxLength(50);

                entity.Property(e => e.Статус)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("(N'Нет')");

                entity.Property(e => e.СтатусЮротдела)
                    .IsRequired()
                    .HasColumnName("Статус_юротдела")
                    .HasMaxLength(3)
                    .HasDefaultValueSql("(N'Нет')");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Телефон)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ТипКлиента)
                    .HasColumnName("Тип клиента")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ФЛЗЧПриняты)
                    .HasColumnName("Ф-л з/ч приняты")
                    .HasMaxLength(150);

                entity.Property(e => e.ФинансовыеПотери)
                    .HasColumnName("Финансовые потери")
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(255);

                entity.Property(e => e.ФиоЗам)
                    .HasColumnName("ФИО_зам")
                    .HasMaxLength(255);

                entity.Property(e => e.ФиоХраненияДоговора)
                    .HasColumnName("ФИО хранения договора")
                    .HasMaxLength(150);

                entity.Property(e => e.Фотокарточки).HasColumnType("image");

                entity.Property(e => e.Фотокарточки1).HasColumnType("image");

                entity.Property(e => e.Фотокарточки2).HasColumnType("image");

                entity.Property(e => e.Фотокарточки3).HasColumnType("image");

                entity.Property(e => e.Фотокарточки4).HasColumnType("image");

                entity.Property(e => e.ШтампОтк)
                    .HasColumnName("Штамп ОТК")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<ПривязкаПриОплате>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Привязка при оплате");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdФирмыТо).HasColumnName("ID фирмы ТО");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_Клиент");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(50);

                entity.Property(e => e.ФирмаПлат)
                    .HasColumnName("Фирма плат")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Признак>(entity =>
            {
                entity.HasKey(e => e.Артикул);

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.Признак1)
                    .HasColumnName("Признак")
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ПрименениеСчетов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Применение счетов");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПрименениеСчетовNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Применение счетов_new");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.ИннОтпр)
                    .HasColumnName("ИНН отпр")
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.КурсЦб)
                    .HasColumnName("Курс ЦБ")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ОснованиеПп)
                    .HasColumnName("Основание_пп")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыRРезерв)
                    .HasColumnName("Сумма оплаты R резерв")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРезерв)
                    .HasColumnName("Сумма оплаты $ резерв")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаПоВыписке)
                    .HasColumnName("Сумма по выписке")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Прих39>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Прих_39");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПрихГруппЗаявка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПрихГрупп_Заявка");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.НомерОфиса).HasColumnName("Номер_офиса");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<ПрихЗаявка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПрихЗаявка");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");
            });

            modelBuilder.Entity<ПрихЗаявкаОнлайн>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПрихЗаявка_онлайн");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");
            });

            modelBuilder.Entity<ПрихНовИзQuickДляПечатиТоргаВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Прих_НОВ из Quick для печати ТОРГА_все");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмыКуда).HasColumnName("ID фирмы куда");

                entity.Property(e => e.IdФирмыОткуда).HasColumnName("ID фирмы откуда");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование_BLG")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Уч)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.ЦенаРуб)
                    .HasColumnName("Цена_руб")
                    .HasColumnType("numeric(22, 5)");
            });

            modelBuilder.Entity<ПрихНовИзQuickДляПечатиТоргаВсеПоСр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Прих_НОВ из Quick для печати ТОРГА_все_по ср");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмыКуда).HasColumnName("ID фирмы куда");

                entity.Property(e => e.IdФирмыОткуда).HasColumnName("ID фирмы откуда");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Уч)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.ЦенаРуб).HasColumnName("Цена_руб");
            });

            modelBuilder.Entity<ПриходВПутиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Приход - в пути регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГруп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГруп965>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп965");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПриходГрупВсеРег>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп_все_рег");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПриходГрупВыставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп_выставки");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупДляМз>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ПриходГруп для МЗ");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.UserId })
                    .HasName("IX_ПриходГруп для МЗ")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<ПриходГрупЗаказВсеРегионы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп_заказ_все_регионы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<ПриходГрупЗаказВсеРегионыDil>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп_заказ_все_регионы_dil");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<ПриходГрупКанбан>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупКанбан");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупКанбанУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупКанбан-Узловая");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупПартияВсеГлРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия всеГл регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SebR).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Выражение1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд1)
                    .HasColumnName("Номер ГТД1")
                    .HasMaxLength(25);

                entity.Property(e => e.Приход).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупПартияВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия все регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SebR).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Выражение1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд1)
                    .HasColumnName("Номер ГТД1")
                    .HasMaxLength(25);

                entity.Property(e => e.Приход).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупПартияДляСфОстаток>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия для СФ-остаток");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Остаток).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ЦенаРуб)
                    .HasColumnName("Цена_руб")
                    .HasColumnType("numeric(22, 5)");
            });

            modelBuilder.Entity<ПриходГрупПартияДляСфПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия для СФ поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ЦенаРуб)
                    .HasColumnName("Цена_руб")
                    .HasColumnType("numeric(26, 7)");
            });

            modelBuilder.Entity<ПриходГрупПартияДляСфПоступило>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия для СФ-поступило");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.СуммаКол)
                    .HasColumnName("Сумма_кол")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ЦенаРуб)
                    .HasColumnName("Цена_руб")
                    .HasColumnType("numeric(22, 5)");
            });

            modelBuilder.Entity<ПриходГрупПартияДляСфСредняя>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия для СФ-средняя");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.СуммаВКол)
                    .HasColumnName("Сумма_в_кол")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СуммаВРуб).HasColumnName("Сумма_в_руб");
            });

            modelBuilder.Entity<ПриходГрупПартияДляСфСредняяПоТов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия для СФ средняя по тов");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПриходГрупПартияДляСфУшло>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия для СФ-ушло");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.СуммаКолРас)
                    .HasColumnName("Сумма_кол_рас")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупПартияПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SebR).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.НомерГтд1)
                    .HasColumnName("Номер ГТД1")
                    .HasMaxLength(30);

                entity.Property(e => e.Приход).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупПартияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупПартия регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SebR).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Выражение1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд1)
                    .HasColumnName("Номер ГТД1")
                    .HasMaxLength(25);

                entity.Property(e => e.Приход).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупПодр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп_подр");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПриходГрупПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупРегионЗаказы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп регион_заказы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<ПриходГрупТип>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп_тип");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГрупТипЗаказ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруп_тип_заказ");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SsrZak)
                    .HasColumnName("ssr_zak")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<ПриходГруппВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупп_все");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГруппВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупп_все_регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГруппДляМзФилиалыДо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ПриходГрупп для МЗ филиалы до");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.Userid })
                    .HasName("IX_ПриходГрупп для МЗ филиалы до")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПриходГруппЗаказ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруппЗаказ");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<ПриходГруппЗап>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупп_ЗАП");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПриходГруппЗапДоп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупп_ЗАП_ДОП");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.PriDop)
                    .HasColumnName("Pri_dop")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГруппЗаявка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруппЗаявка");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");
            });

            modelBuilder.Entity<ПриходГруппЗаявкаNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруппЗаявка_new");
            });

            modelBuilder.Entity<ПриходГруппЗаявкаФил>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГруппЗаявка_фил");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");
            });

            modelBuilder.Entity<ПриходГруппРегионГлавный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупп Регион главный");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В_пути")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходГруппТиппервый>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ПриходГрупп_типпервый");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ПриходДляФилиалаПерекачка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Приход для филиала_перекачка");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Документ).HasMaxLength(30);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПриходРеестр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Приход реестр");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Приход реестр_4");

                entity.HasIndex(e => e.IdПоступления)
                    .HasName("IX_Приход реестр_3");

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_Приход реестр_2");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Приход реестр_1");

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Приход реестр_5");

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОткуда)
                    .HasColumnName("ID откуда")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПлательщика).HasColumnName("ID плательщика");

                entity.Property(e => e.IdПоступления)
                    .HasColumnName("ID поступления")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПроизв)
                    .HasColumnName("ID произв")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdСтруктуры).HasColumnName("ID структуры");

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСчетБалансаДеб)
                    .HasColumnName("ID счет баланса деб")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСчетБалансаКред)
                    .HasColumnName("ID счет баланса кред")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordFinplan)
                    .HasColumnName("Record finplan")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordIdTo)
                    .HasColumnName("Record ID TO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Комментарий).HasMaxLength(150);

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(10, 5)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Поставщик).HasMaxLength(150);

                entity.Property(e => e.ПриходникРаспечатан)
                    .HasColumnName("Приходник распечатан")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ПриходРеестрАрхив>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Приход реестр архив");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Приход реестр архив")
                    .IsUnique();

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОткуда)
                    .HasColumnName("ID откуда")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПлательщика).HasColumnName("ID плательщика");

                entity.Property(e => e.IdПоступления)
                    .HasColumnName("ID поступления")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПроизв)
                    .HasColumnName("ID произв")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdСтруктуры).HasColumnName("ID структуры");

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСчетБалансаДеб)
                    .HasColumnName("ID счет баланса деб")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСчетБалансаКред)
                    .HasColumnName("ID счет баланса кред")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordFinplan)
                    .HasColumnName("Record finplan")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordIdTo)
                    .HasColumnName("Record ID TO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Комментарий).HasMaxLength(150);

                entity.Property(e => e.Поставщик).HasMaxLength(150);

                entity.Property(e => e.ПриходникРаспечатан)
                    .HasColumnName("Приходник распечатан")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ПриходРеестрПодпись>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Приход реестр подпись");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Приход реестр подпись")
                    .IsUnique();

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Usd).HasColumnName("USD");

                entity.Property(e => e.Вал).HasMaxLength(10);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ЕстьПодпись)
                    .HasColumnName("Есть подпись")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.Основание).HasMaxLength(255);

                entity.Property(e => e.Подпись).HasColumnType("image");

                entity.Property(e => e.Сотрудник).HasMaxLength(50);

                entity.Property(e => e.Структурное).HasMaxLength(150);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ПриходТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Приход товара");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Приход товара_2");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Приход товара_4");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Приход товара")
                    .IsUnique();

                entity.HasIndex(e => e.Заявка)
                    .HasName("IX_Приход товара_3");

                entity.HasIndex(e => new { e.IdТовара, e.Количество, e.IdСклада, e.ДатаПрихода })
                    .HasName("IX_Приход товара_5");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordРекламация)
                    .HasColumnName("Record_рекламация")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Документ).HasMaxLength(30);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.НомерРекламации).HasColumnName("Номер рекламации");

                entity.Property(e => e.Ордер).HasMaxLength(30);

                entity.Property(e => e.Оценка1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка7).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка8).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка9).HasDefaultValueSql("((0))");

                entity.Property(e => e.Перекачать).HasDefaultValueSql("((0))");

                entity.Property(e => e.Поставщик)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.Префикс)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");

                entity.Property(e => e.Цп)
                    .HasColumnName("ЦП")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ПриходТовараДляПоставокОтДилера>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Приход товара для поставок от дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Документ).HasMaxLength(30);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ордер).HasMaxLength(30);

                entity.Property(e => e.Префикс).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПриходТовараПоставки>(entity =>
            {
                entity.HasKey(e => new { e.IdСклада, e.IdТовара, e.Партия });

                entity.ToTable("Приход товара поставки");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Приход товара поставки_1");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Приход товара поставки_2");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Приход товара поставки")
                    .IsUnique();

                entity.HasIndex(e => e.АвтоСписаниеId)
                    .HasName("IX_Приход товара поставки_5");

                entity.HasIndex(e => e.Заявка)
                    .HasName("IX_Приход товара поставки_3");

                entity.HasIndex(e => new { e.IdТовара, e.Партия })
                    .HasName("IX_Приход товара поставки_4")
                    .IsUnique();

                entity.HasIndex(e => new { e.Provedeno, e.ДатаОприходования })
                    .HasName("IX_Приход товара поставки_Provedeno");

                entity.HasIndex(e => new { e.Поставщик, e.Документ, e.ДатаОприходования })
                    .HasName("IX_Приход товара поставки_Index1");

                entity.HasIndex(e => new { e.IdТовара, e.Количество, e.IdСклада, e.FactoryId, e.ДатаОприходования })
                    .HasName("IX_Приход товара поставки_ID склада_FactoryID_Дата оприходования");

                entity.HasIndex(e => new { e.RecordId, e.IdТовара, e.Партия, e.Валюта, e.ЦенаБезНдс, e.ЦенаПоДоговору, e.IsImport, e.ДатаОприходования })
                    .HasName("IX_Приход товара Отчеты");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.AnalogId)
                    .HasColumnName("AnalogID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bkid)
                    .HasColumnName("BKID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BkuserId).HasColumnName("BKUserID");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВнутреннейЗаявки).HasColumnName("ID Внутренней Заявки");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId)
                    .HasColumnName("АвтоСписаниеID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ВсегоПоДоговору)
                    .HasColumnName("Всего_по_договору")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Грузоотправитель).HasDefaultValueSql("((0))");

                entity.Property(e => e.Грузополучатель).HasDefaultValueSql("((11))");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(20);

                entity.Property(e => e.Доставка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Итого).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЗаказе)
                    .HasColumnName("Количество в заказе")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерДт)
                    .HasColumnName("Номер ДТ")
                    .HasMaxLength(40);

                entity.Property(e => e.Ордер).HasMaxLength(20);

                entity.Property(e => e.Рекламация).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПоДоговору)
                    .HasColumnName("Цена_по_договору")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Юрлицо).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ПриходТовараПоставкиOld>(entity =>
            {
                entity.HasKey(e => new { e.IdСклада, e.IdТовара, e.Партия });

                entity.ToTable("Приход товара поставки_OLD");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.AnalogId).HasColumnName("AnalogID");

                entity.Property(e => e.Bkid).HasColumnName("BKID");

                entity.Property(e => e.BkuserId).HasColumnName("BKUserID");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdВнутреннейЗаявки).HasColumnName("ID Внутренней Заявки");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId).HasColumnName("АвтоСписаниеID");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ВсегоПоДоговору)
                    .HasColumnName("Всего_по_договору")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(20);

                entity.Property(e => e.Доставка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Итого).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЗаказе)
                    .HasColumnName("Количество в заказе")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерДт)
                    .HasColumnName("Номер ДТ")
                    .HasMaxLength(40);

                entity.Property(e => e.Ордер).HasMaxLength(20);

                entity.Property(e => e.Рекламация).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПоДоговору)
                    .HasColumnName("Цена_по_договору")
                    .HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ПриходТовараПоставкиДо2018>(entity =>
            {
                entity.HasKey(e => new { e.IdСклада, e.IdТовара, e.Партия });

                entity.ToTable("Приход товара поставки до 2018");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.AnalogId)
                    .HasColumnName("AnalogID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Bkid)
                    .HasColumnName("BKID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BkuserId).HasColumnName("BKUserID");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВнутреннейЗаявки).HasColumnName("ID Внутренней Заявки");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdЕдИзм)
                    .HasColumnName("ID Ед_изм")
                    .HasMaxLength(10);

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId)
                    .HasColumnName("АвтоСписаниеID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ВсегоПоДоговору)
                    .HasColumnName("Всего_по_договору")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Грузоотправитель).HasDefaultValueSql("((0))");

                entity.Property(e => e.Грузополучатель).HasDefaultValueSql("((11))");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(20);

                entity.Property(e => e.Доставка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Итого).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЗаказе)
                    .HasColumnName("Количество в заказе")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерДт)
                    .HasColumnName("Номер ДТ")
                    .HasMaxLength(40);

                entity.Property(e => e.Ордер).HasMaxLength(20);

                entity.Property(e => e.Рекламация).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПоДоговору)
                    .HasColumnName("Цена_по_договору")
                    .HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Юрлицо).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<ПриходТовараРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Приход товара регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Приход товара регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdСклада, e.Регион })
                    .HasName("IX_Приход товара регион_1");

                entity.HasIndex(e => new { e.IdТовара, e.Регион })
                    .HasName("IX_Приход товара регион_2");

                entity.HasIndex(e => new { e.ДатаОприходования, e.Регион })
                    .HasName("IX_Приход товара регион_3");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order No")
                    .HasMaxLength(150);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordРекламация)
                    .HasColumnName("Record_рекламация")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Документ1с)
                    .HasColumnName("Документ_1С")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.НомерОфиса)
                    .HasColumnName("Номер_офиса")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерРекламации).HasColumnName("Номер рекламации");

                entity.Property(e => e.Ордер).HasMaxLength(30);

                entity.Property(e => e.Оценка1).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка3).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка4).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка5).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка6).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка7).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка8).HasDefaultValueSql("((0))");

                entity.Property(e => e.Оценка9).HasDefaultValueSql("((0))");

                entity.Property(e => e.Поставщик).HasMaxLength(50);

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");

                entity.Property(e => e.СтранаПроисхожденияПрихода)
                    .HasColumnName("Страна происхождения прихода")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цп)
                    .HasColumnName("ЦП")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ПриходТовараРегионСписание>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Приход товара регион списание");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ПриходТовараСЦенойРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Приход товара с ценой регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Документ1с)
                    .HasColumnName("Документ_1С")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.НомерОфиса).HasColumnName("Номер_офиса");

                entity.Property(e => e.Ордер).HasMaxLength(30);

                entity.Property(e => e.Поставщик).HasMaxLength(20);

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");

                entity.Property(e => e.СтранаПроисхожденияПрихода)
                    .HasColumnName("Страна происхождения прихода")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цп)
                    .HasColumnName("ЦП")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цп2)
                    .HasColumnName("ЦП2")
                    .HasColumnType("decimal(24, 7)");
            });

            modelBuilder.Entity<ПриходыДляАсуп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Приходы для АСУП");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(25);

                entity.Property(e => e.АртикулНовый)
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(25);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодВ1с)
                    .HasColumnName("Код в 1С")
                    .HasMaxLength(25);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ПрогнозГод>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Прогноз_год");

                entity.Property(e => e.Dat)
                    .HasColumnName("dat")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dat1)
                    .HasColumnName("dat1")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dat2)
                    .HasColumnName("dat2")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dat3)
                    .HasColumnName("dat3")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dat4)
                    .HasColumnName("dat4")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dat5)
                    .HasColumnName("dat5")
                    .HasColumnType("datetime");

                entity.Property(e => e.Dat6)
                    .HasColumnName("dat6")
                    .HasColumnType("datetime");

                entity.Property(e => e.Expr2).HasMaxLength(50);

                entity.Property(e => e.Expr3).HasMaxLength(50);

                entity.Property(e => e.Expr4).HasMaxLength(50);

                entity.Property(e => e.Expr5).HasMaxLength(50);

                entity.Property(e => e.Expr6).HasMaxLength(50);

                entity.Property(e => e.Expr7).HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Вып1).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Вып2).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Вып3).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Вып4).HasColumnType("decimal(35, 10)");

                entity.Property(e => e.Вып5).HasColumnType("decimal(35, 10)");

                entity.Property(e => e.Вып6).HasColumnType("decimal(35, 10)");

                entity.Property(e => e.Вып7).HasColumnType("decimal(35, 10)");

                entity.Property(e => e.Гр).HasMaxLength(50);

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.Прод1).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Прод2).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Прод3).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Прод4).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Прод5).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Прод6).HasColumnType("decimal(25, 4)");

                entity.Property(e => e.Прод7).HasColumnType("decimal(25, 4)");
            });

            modelBuilder.Entity<ПрогнозПродаж>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Прогноз продаж");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Прогноз продаж_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.Год, e.Месяц, e.Завод })
                    .HasName("IX_Прогноз продаж")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.Завод, e.Прогноз1МесПрогноз, e.Месяц, e.Год })
                    .HasName("Прогноз_продаж_Прогноз_1_мес_прогноз");

                entity.HasIndex(e => new { e.IdТовара, e.Прогноз1Мес, e.Завод, e.Месяц, e.Год })
                    .HasName("Прогноз_продаж_Прогноз_1_мес_прогноз1");

                entity.Property(e => e.Det).HasMaxLength(20);

                entity.Property(e => e.Flag).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pack).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВозможноеОткл)
                    .HasColumnName("Возможное_откл")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.ОстатокГлСклад)
                    .HasColumnName("Остаток_гл_склад")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОстатокФил)
                    .HasColumnName("Остаток_фил")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз0Мес)
                    .HasColumnName("Прогноз_0_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз1Мес)
                    .HasColumnName("Прогноз_1_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз1МесПрогноз)
                    .HasColumnName("Прогноз_1_мес_прогноз")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз2Мес11)
                    .HasColumnName("Прогноз_2_мес11")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз2МесПрогноз11)
                    .HasColumnName("Прогноз_2_мес_прогноз11")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз3Мес11)
                    .HasColumnName("Прогноз_3_мес11")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз3МесПрогноз11)
                    .HasColumnName("Прогноз_3_мес_прогноз11")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз4Мес11)
                    .HasColumnName("Прогноз_4_мес11")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПрогнозНаНеделю)
                    .HasColumnName("Прогноз_на_неделю")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПрогнозЧерезНеделю)
                    .HasColumnName("Прогноз_через_неделю")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Утвержден).HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦенаПередачи)
                    .HasColumnName("Цена_передачи")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПрогнозПродаж20170407>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Прогноз продаж_20170407");

                entity.Property(e => e.Det).HasMaxLength(20);

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pack).HasMaxLength(20);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВозможноеОткл)
                    .HasColumnName("Возможное_откл")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.ОстатокГлСклад)
                    .HasColumnName("Остаток_гл_склад")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОстатокФил)
                    .HasColumnName("Остаток_фил")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз0Мес)
                    .HasColumnName("Прогноз_0_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз1Мес)
                    .HasColumnName("Прогноз_1_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз2Мес)
                    .HasColumnName("Прогноз_2_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз3Мес)
                    .HasColumnName("Прогноз_3_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз4Мес)
                    .HasColumnName("Прогноз_4_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПрогнозНаНеделю)
                    .HasColumnName("Прогноз_на_неделю")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПрогнозЧерезНеделю)
                    .HasColumnName("Прогноз_через_неделю")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЦенаПередачи)
                    .HasColumnName("Цена_передачи")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПрогнозПродажРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Прогноз продаж регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Прогноз продаж регион_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.Регион, e.Месяц, e.Год })
                    .HasName("IX_Прогноз продаж регион")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.KfРоста)
                    .HasColumnName("KF_роста")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВЗаявку)
                    .HasColumnName("В заявку")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В пути")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Выставка).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.МесОтг1).HasColumnName("Мес_отг1");

                entity.Property(e => e.МесОтг2).HasColumnName("Мес_отг2");

                entity.Property(e => e.МесОтг3).HasColumnName("Мес_отг3");

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.ОстатокФил)
                    .HasColumnName("Остаток_фил")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр1).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр2).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр3).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Подтв)
                    .HasColumnName("подтв")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Прогноз1Мес)
                    .HasColumnName("Прогноз_1_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз1МесПрогноз)
                    .HasColumnName("Прогноз_1_мес_прогноз")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз2Мес)
                    .HasColumnName("Прогноз_2_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз3Мес)
                    .HasColumnName("Прогноз_3_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз4Мес)
                    .HasColumnName("Прогноз_4_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПрогнозНаНеделю)
                    .HasColumnName("Прогноз_на_неделю")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Утвержден).HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦенаПередачи)
                    .HasColumnName("Цена_передачи")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПрогнозПродажРегионДилер>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Прогноз продаж регион дилер");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Прогноз продаж регион дилер_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.IdДилера, e.Регион, e.Год, e.Месяц })
                    .HasName("IX_Прогноз продаж регион дилер")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВЗаявку)
                    .HasColumnName("В заявку")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В пути")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Выставка).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.МесОтг1).HasColumnName("Мес_отг1");

                entity.Property(e => e.МесОтг2).HasColumnName("Мес_отг2");

                entity.Property(e => e.МесОтг3).HasColumnName("Мес_отг3");

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.ОстатокФил)
                    .HasColumnName("Остаток_фил")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр1).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр2).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр3).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз1Мес)
                    .HasColumnName("Прогноз_1_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз2Мес)
                    .HasColumnName("Прогноз_2_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз3Мес)
                    .HasColumnName("Прогноз_3_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Прогноз4Мес)
                    .HasColumnName("Прогноз_4_мес")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПрогнозНаНеделю)
                    .HasColumnName("Прогноз_на_неделю")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Утвержден).HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦенаПередачи)
                    .HasColumnName("Цена_передачи")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ПрогнозПродажТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Прогноз продаж_тмп");

                entity.HasIndex(e => new { e.IdТовара, e.Продажи, e.Регионы, e.UserId, e.ОстатокНаГл, e.ОстатокНаФил })
                    .HasName("IX_Прогноз продаж_тмп")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ОстатокНаГл)
                    .HasColumnName("Остаток на гл")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОстатокНаФил)
                    .HasColumnName("Остаток на фил")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОтгрПоСсСпр)
                    .HasColumnName("Отгр_по_СС_спр")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПереводНаДиб)
                    .HasColumnName("Перевод на диб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Продажи).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Регионы)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ПрогнозПродажТмпРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Прогноз продаж_тмп регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Прогноз продаж_тмп регион111")
                    .IsUnique();

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Прогноз продаж_тмп регион111_1");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В пути")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Выставка).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОстатокНаФил)
                    .HasColumnName("Остаток на фил")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр2).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Отгр3).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОтгрПоСсСпр)
                    .HasColumnName("Отгр_по_СС_спр")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Подтв)
                    .HasColumnName("подтв")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Продажи).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.РеализацияЗаГод)
                    .HasColumnName("Реализация за год")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Регионы)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ПроизводственнаяСтруктура>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Производственная структура");

                entity.HasIndex(e => e.Код)
                    .HasName("Производственная структура_ix1");

                entity.HasIndex(e => new { e.Id, e.ParentId })
                    .HasName("IX_Производственная структура")
                    .IsUnique();

                entity.Property(e => e.HidДиректор).HasColumnName("HID директор");

                entity.Property(e => e.HidРуководитель).HasColumnName("HID руководитель");

                entity.Property(e => e.HidТехнолог).HasColumnName("HID технолог");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdДиректор1).HasColumnName("ID директор1");

                entity.Property(e => e.IdРуководитель1).HasColumnName("ID руководитель1");

                entity.Property(e => e.IdТехнолог1).HasColumnName("ID технолог1");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NodeLevel).HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Код).HasMaxLength(20);

                entity.Property(e => e.ПризнакСлужбы)
                    .IsRequired()
                    .HasColumnName("Признак_службы")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ПроизводственнаяСтруктураCopy>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Производственная структура_copy");

                entity.HasIndex(e => e.Код)
                    .HasName("Производственная структура_copy_ix1");

                entity.HasIndex(e => new { e.Id, e.ParentId })
                    .HasName("IX_Производственная структура_copy")
                    .IsUnique();

                entity.Property(e => e.HidДиректор).HasColumnName("HID директор");

                entity.Property(e => e.HidРуководитель).HasColumnName("HID руководитель");

                entity.Property(e => e.HidТехнолог).HasColumnName("HID технолог");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdДиректор1).HasColumnName("ID директор1");

                entity.Property(e => e.IdРуководитель1).HasColumnName("ID руководитель1");

                entity.Property(e => e.IdТехнолог1).HasColumnName("ID технолог1");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NodeLevel).HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Код).HasMaxLength(20);
            });

            modelBuilder.Entity<ПромУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Пром_УЗМК");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Пром_УЗМК_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.Год, e.Месяц, e.ЛичныйНомер })
                    .HasName("IX_Пром_УЗМК")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Больничные).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БольничныеС)
                    .HasColumnName("Больничные С")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВКассу)
                    .HasColumnName("В_кассу")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ВычетыНеофиц)
                    .HasColumnName("Вычеты неофиц")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВычетыОфиц)
                    .HasColumnName("Вычеты офиц")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДоплатаЗаОтпускДоплатыЗаНочныеСверхурочныеПраздничные)
                    .HasColumnName("Доплата за отпуск, доплаты за ночные, сверхурочные, праздничные")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Доплаты)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Знак).HasMaxLength(1);

                entity.Property(e => e.Имя).HasMaxLength(50);

                entity.Property(e => e.КодВалюты)
                    .HasColumnName("Код валюты")
                    .HasMaxLength(3);

                entity.Property(e => e.Коммен).HasMaxLength(150);

                entity.Property(e => e.ЛичныйНомер).HasColumnName("Личный номер");

                entity.Property(e => e.Ндфл)
                    .HasColumnName("НДФЛ")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НесчСлучаи).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерКарты)
                    .HasColumnName("Номер карты")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПаспорта)
                    .HasColumnName("Номер паспорта")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерСерии)
                    .HasColumnName("Номер серии")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкладНеофиц)
                    .HasColumnName("Оклад неофиц")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОкладОфиц)
                    .HasColumnName("Оклад офиц")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Отпускные).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Отчество).HasMaxLength(50);

                entity.Property(e => e.Перечислять).HasDefaultValueSql("((0))");

                entity.Property(e => e.Пн)
                    .HasColumnName("ПН")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Премия)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Премия1с)
                    .HasColumnName("Премия_1С")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Пфр)
                    .HasColumnName("ПФР")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ставка1с)
                    .HasColumnName("Ставка_1С")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СтарыйНомер)
                    .HasColumnName("Старый номер")
                    .HasMaxLength(20);

                entity.Property(e => e.Сумма)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма дол")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОфиц)
                    .HasColumnName("Сумма офиц")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаПереч)
                    .HasColumnName("Сумма переч")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Фамилия).HasMaxLength(50);

                entity.Property(e => e.Фсс)
                    .HasColumnName("ФСС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ффомс)
                    .HasColumnName("ФФОМС")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ПросмотрПриходовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Просмотр приходов регион");

                entity.Property(e => e.Expr1).HasColumnType("datetime");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(100);

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КолВо)
                    .HasColumnName("Кол-во")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Кто).HasMaxLength(33);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Ном)
                    .HasColumnName("ном")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерРекламации).HasColumnName("Номер рекламации");

                entity.Property(e => e.Ордер).HasMaxLength(30);

                entity.Property(e => e.Поставщик).HasMaxLength(50);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Работнички>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Работнички")
                    .IsUnique();

                entity.HasIndex(e => e.Фамилия)
                    .HasName("IX_Работнички_1");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ВедущийМенеджер).HasColumnName("Ведущий менеджер");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Имя)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ИмяРегистрации)
                    .IsRequired()
                    .HasColumnName("Имя регистрации")
                    .HasMaxLength(20);

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<Работнички1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Работнички_1");

                entity.Property(e => e.ВедущийМенеджер).HasColumnName("Ведущий менеджер");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<РаботничкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Работнички регион");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Работнички регион")
                    .IsUnique();

                entity.HasIndex(e => e.ИмяРегистрации)
                    .HasName("IX_Работнички регион_1")
                    .IsUnique();

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Работнички регион_2");

                entity.Property(e => e.Email).HasMaxLength(255);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdЦо)
                    .HasColumnName("ID_ЦО")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Password).HasMaxLength(15);

                entity.Property(e => e.RecDlDostup).HasColumnName("Rec_dl_dostup");

                entity.Property(e => e.WebPass).HasMaxLength(20);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДолжностьУпд)
                    .HasColumnName("Должность_УПД")
                    .HasMaxLength(150);

                entity.Property(e => e.ДоступРф).HasColumnName("Доступ_рф");

                entity.Property(e => e.Имя)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ИмяРегистрации)
                    .IsRequired()
                    .HasColumnName("Имя регистрации")
                    .HasMaxLength(50);

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.РегионРф).HasColumnName("Регион_рф");

                entity.Property(e => e.СкладПлощадка).HasColumnName("Склад_площадка");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<РаботничкиРеестра>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Работнички реестра");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Работнички реестра")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdСтраны).HasColumnName("ID страны");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Имя)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ИмяРегистрации)
                    .IsRequired()
                    .HasColumnName("Имя регистрации")
                    .HasMaxLength(15);

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<РаботничкиФинплан>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Работнички финплан");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Работнички финплан")
                    .IsUnique();

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdЛюди)
                    .HasColumnName("ID люди")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.PasswordKadry)
                    .HasColumnName("Password_KADRY")
                    .HasMaxLength(20);

                entity.Property(e => e.Должность).HasDefaultValueSql("((10))");

                entity.Property(e => e.ДолжностьЗп).HasColumnName("Должность зп");

                entity.Property(e => e.ДолжностьИнновации)
                    .HasColumnName("Должность_инновации")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДолжностьКадры).HasColumnName("Должность кадры");

                entity.Property(e => e.ДолжностьОс).HasColumnName("Должность ОС");

                entity.Property(e => e.ДолжностьОценкаПерсонала).HasColumnName("Должность_Оценка_Персонала");

                entity.Property(e => e.ДолжностьПоставка).HasColumnName("Должность поставка");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.ИмяEn)
                    .HasColumnName("Имя EN")
                    .HasMaxLength(15);

                entity.Property(e => e.ИмяРегистрации)
                    .HasColumnName("Имя регистрации")
                    .HasMaxLength(20);

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.Регион).HasDefaultValueSql("((39))");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Уволен).HasDefaultValueSql("((0))");

                entity.Property(e => e.Факс).HasMaxLength(30);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.ФамилияEn)
                    .HasColumnName("Фамилия EN")
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<РазрешениеНаСтатью>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Разрешение на статью");

                entity.HasIndex(e => new { e.IdСубсчета, e.IdСтатьи })
                    .HasName("IX_Разрешение на статью")
                    .IsUnique();

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");
            });

            modelBuilder.Entity<РаспДилеры>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расп_дилеры");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерФилиала).HasColumnName("Номер_филиала");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РаспДилерыКомус>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расп_дилеры_КОМУС");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<РаспДилерыКомусИстория>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расп_дилеры_Комус_история");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.Название).HasMaxLength(15);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<РаспДилерыОтгр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расп_дилеры_отгр");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Название).HasMaxLength(15);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РаспКлиентыN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расп_клиенты_n");

                entity.Property(e => e.Expr1).HasMaxLength(160);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РаспКлиентыОтгр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расп_клиенты_отгр");

                entity.Property(e => e.Expr1).HasMaxLength(160);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(60);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РаспФилТт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расп_фил_тт");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РаспорВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распор_все регион");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<РаспорВсеЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распор_все ЦО");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<РаспорСервис>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распор_сервис");

                entity.Property(e => e.IdВодителя).HasColumnName("ID водителя");

                entity.Property(e => e.IdПункта).HasColumnName("ID пункта");

                entity.Property(e => e.IdСтадии).HasColumnName("ID стадии");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Затраты).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<РаспоряжениеКлиентыДляТорг12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжение-клиенты для ТОРГ-12");

                entity.Property(e => e.Adr)
                    .HasColumnName("adr")
                    .HasMaxLength(767);

                entity.Property(e => e.AdrKl)
                    .HasColumnName("adr_kl")
                    .HasMaxLength(311);

                entity.Property(e => e.AdrUl)
                    .HasColumnName("adr_ul")
                    .HasMaxLength(255);

                entity.Property(e => e.Expr1).HasMaxLength(33);

                entity.Property(e => e.Expr2).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.KppKl)
                    .HasColumnName("kpp_kl")
                    .HasMaxLength(9);

                entity.Property(e => e.KppUl)
                    .HasColumnName("kpp_ul")
                    .HasMaxLength(9);

                entity.Property(e => e.NaimUl)
                    .HasColumnName("naim_ul")
                    .HasMaxLength(255);

                entity.Property(e => e.UlUl)
                    .HasColumnName("ul_ul")
                    .HasMaxLength(763);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПроцСкидки).HasColumnType("decimal(5, 3)");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<Распоряжения>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.ДилерКлиент)
                    .HasName("IX_Распоряжения_2");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Распоряжения")
                    .IsUnique();

                entity.HasIndex(e => e.НомерСчета)
                    .HasName("IX_Распоряжения_1");

                entity.HasIndex(e => new { e.НомерСчета, e.ДилерКлиент })
                    .HasName("IX_Распоряжения_3")
                    .IsUnique();

                entity.Property(e => e.Idfirm)
                    .HasColumnName("IDfirm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВидаТранспорта)
                    .HasColumnName("ID вида_транспорта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВодителя)
                    .HasColumnName("ID водителя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПункта)
                    .HasColumnName("ID пункта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтадии)
                    .HasColumnName("ID стадии")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВнешнийНомер)
                    .HasColumnName("Внешний номер")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер-клиент")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.Затраты)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерПорядковый)
                    .HasColumnName("Номер порядковый")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Фирма).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<РаспоряженияДвойные>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Распоряжения двойные");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Распоряжения двойные_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.Номер, e.Префикс })
                    .HasName("IX_Распоряжения двойные")
                    .IsUnique();

                entity.HasIndex(e => new { e.НомерСчета, e.ДилерКлиент, e.Префикс })
                    .HasName("IX_Распоряжения двойные_2")
                    .IsUnique();

                entity.Property(e => e.Idfirm)
                    .HasColumnName("IDfirm")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.IdВидаТранспорта)
                    .HasColumnName("ID вида_транспорта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВодителя)
                    .HasColumnName("ID водителя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПункта)
                    .HasColumnName("ID пункта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтадии)
                    .HasColumnName("ID стадии")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПоПлану)
                    .HasColumnName("Дата по плану")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.Затраты)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<РаспоряженияДвойныеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Распоряжения двойные регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Распоряжения двойные регион_2")
                    .IsUnique();

                entity.HasIndex(e => e.НомерСчета)
                    .HasName("IX_Распоряжения двойные регион_1");

                entity.HasIndex(e => new { e.Номер, e.Префикс, e.Регион })
                    .HasName("IX_Распоряжения двойные регион")
                    .IsUnique();

                entity.Property(e => e.Idfirm)
                    .HasColumnName("IDfirm")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdВидаТранспорта)
                    .HasColumnName("ID вида_транспорта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВодителяРасп)
                    .HasColumnName("ID водителя_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп)
                    .HasColumnName("ID заказчика транспорта_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПеревозчикаРасп)
                    .HasColumnName("ID перевозчика_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПричины)
                    .HasColumnName("ID причины")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПунктаРасп)
                    .HasColumnName("ID пункта_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтадииРасп)
                    .HasColumnName("ID стадии_расп")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ВнешнийНомер)
                    .HasColumnName("Внешний номер")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Год)
                    .HasColumnName("Год_")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПоПлану)
                    .HasColumnName("Дата по плану")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер-клиент")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.НаименованиеГруза)
                    .HasColumnName("Наименование груза")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПорядковый)
                    .HasColumnName("Номер_порядковый")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Перенесена).HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенести).HasDefaultValueSql("(0)");

                entity.Property(e => e.Префикс).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<РаспоряженияДилДляТтнДляСетей>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения дил для ТТН для сетей");

                entity.Property(e => e.Expr1).HasMaxLength(33);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОрганизации).HasColumnName("ID организации");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Госномер)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(512);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Заказчик).HasMaxLength(255);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомТорг)
                    .HasColumnName("ном_торг")
                    .HasMaxLength(20);

                entity.Property(e => e.Организация).HasMaxLength(255);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Юрлицо)
                    .HasColumnName("Юрлицо_")
                    .HasMaxLength(511);

                entity.Property(e => e.Юрлицо1)
                    .HasColumnName("Юрлицо")
                    .HasMaxLength(768);
            });

            modelBuilder.Entity<РаспоряженияДилДляТтнДляСетей111111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения дил для ТТН для сетей111111");

                entity.Property(e => e.Expr1).HasMaxLength(33);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОрганизации).HasColumnName("ID организации");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(250);

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Госномер)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(512);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.Заказчик).HasMaxLength(255);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.НомТорг)
                    .HasColumnName("ном_торг")
                    .HasMaxLength(20);

                entity.Property(e => e.Организация).HasMaxLength(255);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Юрлицо)
                    .HasColumnName("Юрлицо_")
                    .HasMaxLength(511);

                entity.Property(e => e.Юрлицо1)
                    .HasColumnName("Юрлицо")
                    .HasMaxLength(763);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12");

                entity.Property(e => e.Expr1).HasMaxLength(100);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.InnAd)
                    .HasColumnName("inn_ad")
                    .HasMaxLength(35);

                entity.Property(e => e.InnUl)
                    .HasColumnName("inn_ul")
                    .HasMaxLength(35);

                entity.Property(e => e.Obi)
                    .HasColumnName("OBI")
                    .HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.Pragmatic)
                    .HasColumnName("PRAGMATIC")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR).HasColumnName("Базовая цена R");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(787);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Комус)
                    .HasColumnName("КОМУС")
                    .HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Леруа).HasMaxLength(50);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(50);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.След)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Товар).HasMaxLength(150);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Юрлицо).HasMaxLength(993);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12Db>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12_db");

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.InnAd)
                    .HasColumnName("inn_ad")
                    .HasMaxLength(32);

                entity.Property(e => e.InnUl)
                    .HasColumnName("inn_ul")
                    .HasMaxLength(32);

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(787);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.След)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.Товар).HasMaxLength(150);

                entity.Property(e => e.Юрлицо).HasMaxLength(993);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12DbДляЗельгрос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12_db для Зельгрос");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(769);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Юрлицо).HasMaxLength(763);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12DbДляКасторама>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12_db для Касторама");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(769);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Юрлицо).HasMaxLength(763);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12DbМетро>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12_db Метро");

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.АртикулМетро)
                    .HasColumnName("Артикул МЕТРО")
                    .HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(769);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Юрлицо).HasMaxLength(763);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12Ашан>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12 АШАН");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(800);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Юрлицо).HasMaxLength(794);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12Зельгрос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12 Зельгрос");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(800);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Юрлицо).HasMaxLength(794);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12Касторама>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12 Касторама");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(800);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Юрлицо).HasMaxLength(794);
            });

            modelBuilder.Entity<РаспоряженияДилерыДляТорг12Метро>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения-дилеры для ТОРГ-12 Метро");

                entity.Property(e => e.Expr1).HasMaxLength(38);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.АртикулMgb)
                    .HasColumnName("Артикул MGB")
                    .HasMaxLength(50);

                entity.Property(e => e.АртикулМетро)
                    .HasColumnName("Артикул МЕТРО")
                    .HasMaxLength(50);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(769);

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Юрлицо).HasMaxLength(763);
            });

            modelBuilder.Entity<РаспоряженияДл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения_дл");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<РаспоряженияДляОплатыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения для оплаты регион");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<РаспоряженияДляУдаленияВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения для удаления все регион");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<РаспоряженияДляУдаленияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения для удаления регион");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<РаспоряженияКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения_кл");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(15);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.КомуОтпустить)
                    .IsRequired()
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<РаспоряженияПоЗаявкам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения по заявкам");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<РаспоряженияПоСчетам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Распоряжения по счетам");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<РаспоряженияПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Распоряжения поставки");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Распоряжения поставки")
                    .IsUnique();

                entity.Property(e => e.Idfirm)
                    .HasColumnName("IDfirm")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ВнешнийНомер)
                    .HasColumnName("Внешний номер")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПоПлану)
                    .HasColumnName("Дата по плану")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер-клиент")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(10);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерПорядковый)
                    .HasColumnName("Номер порядковый")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Перенесена).HasDefaultValueSql("(0)");

                entity.Property(e => e.Перенести).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<РаспоряженияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Распоряжения регион");

                entity.HasIndex(e => new { e.Номер, e.Регион })
                    .HasName("IX_Распоряжения регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.НомерСчета, e.Регион })
                    .HasName("IX_Распоряжения регион_1")
                    .IsUnique();

                entity.Property(e => e.Idfirm)
                    .HasColumnName("IDfirm")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВидаТранспорта)
                    .HasColumnName("ID вида_транспорта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВодителяРасп)
                    .HasColumnName("ID водителя_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп)
                    .HasColumnName("ID заказчика транспорта_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПеревозчикаРасп)
                    .HasColumnName("ID перевозчика_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПричины)
                    .HasColumnName("ID причины")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПунктаРасп)
                    .HasColumnName("ID пункта_расп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтадииРасп)
                    .HasColumnName("ID стадии_расп")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВнешнийНомер)
                    .HasColumnName("Внешний номер")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПоПлану)
                    .HasColumnName("Дата по плану")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.НаименованиеГруза)
                    .HasColumnName("Наименование груза")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПорядковый)
                    .HasColumnName("Номер порядковый")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Перенесена).HasDefaultValueSql("((0))");

                entity.Property(e => e.Перенести).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Расх39>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расх_39");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходRecordПартияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходRecordПартия регион");

                entity.Property(e => e.RecordRashod).HasColumnName("Record rashod");
            });

            modelBuilder.Entity<РасходRecordРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходRecord регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<РасходБезРазрешенияЗаявка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-БезРазрешения заявка");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БезРазрешенияЗаявка).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НакладнаяЗаявкаБезОтгрузки).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.РазрешениеЗаявка).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.РазрешениеЗаявкаНеделя)
                    .HasColumnName("РазрешениеЗаявка_неделя")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<РасходБезРазрешенияЗаявкаЗаказ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-БезРазрешения заявка_заказ");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БезРазрешенияЗаявка).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НакладнаяЗаявкаБезОтгрузки).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.РазрешениеЗаявка).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<РасходБезРазрешенияЗаявкаОстальное>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-БезРазрешения заявка_остальное");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БезРазрешенияЗаявка).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НакладнаяЗаявкаБезОтгрузки).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.РазрешениеЗаявка).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.РазрешениеЗаявкаНеделя)
                    .HasColumnName("РазрешениеЗаявка_неделя")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходБезРазрешенияСчет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-БезРазрешения счет");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БезРазрешенияСчет).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НакладнаяСчетБезОтгрузки).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.РазрешениеСчет).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходБезРазрешенияСчетЗаказ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-БезРазрешения счет_заказ");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БезРазрешенияСчет).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НакладнаяСчетБезОтгрузки).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.РазрешениеСчет).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<РасходБезРазрешенияСчетОстальное>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-БезРазрешения счет_остальное");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БезРазрешенияСчет).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НакладнаяСчетБезОтгрузки).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.РазрешениеСчет).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходБезУзлуг>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход без узлуг");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходБезУслугДил>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход без услуг_дил");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходВЗаявке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход в заявке");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходВПланеНа1День>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 1 день");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа1ДеньКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 1 день кл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа2Дня>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 2 дня");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа2ДняКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 2 дня кл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РасходВПланеНа3Дня>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 3 дня");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа3ДняКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 3 дня кл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РасходВПланеНа4Дня>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 4 дня");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа4ДняКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 4 дня кл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РасходВПланеНа5Дня>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 5 дня");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа5ДняКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 5 дня кл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РасходВПланеНа6Дня>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 6 дня");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа6ДняКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 6 дня кл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РасходВПланеНа7Дня>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 7 дня");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходВПланеНа7ДняКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в плане на 7 дня кл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<РасходВПути>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в пути");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<РасходВПутиЗаказ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - в пути_заказ");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ВМашине)
                    .HasColumnName("В Машине")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<РасходВозвратДляАктаСверкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-возврат для акта сверки регион");

                entity.Property(e => e.Expr2).HasMaxLength(20);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сумма).HasColumnType("decimal(37, 4)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");
            });

            modelBuilder.Entity<РасходВозвратДляАктаСверкиРегион225>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход-возврат для акта сверки регион_225");

                entity.Property(e => e.Expr2).HasMaxLength(20);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сумма).HasColumnType("decimal(37, 4)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");
            });

            modelBuilder.Entity<РасходВписанныйТемп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход вписанный темп");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Выписано).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<РасходВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход ВСЕ регион");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<РасходВыписанСчет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - выписан счет");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПутиКл)
                    .HasColumnName("В пути кл")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходВыписанный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход выписанный");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходГрСчРас>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_гр_сч_рас");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Расход).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Счет).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходГрСчРасNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_гр_сч_рас_new");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Расход).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Счет).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<РасходГрСчРасРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_гр_сч_рас регион");

                entity.Property(e => e.FirstSsr)
                    .HasColumnName("First_SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FirstUserId).HasColumnName("First_User ID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordРекламация).HasColumnName("Record_рекламация");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Расход).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Счет).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходГрСчРасФактРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_гр_сч_рас_факт регион");

                entity.Property(e => e.FirstSsr)
                    .HasColumnName("First_SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.FirstUserId).HasColumnName("First_User ID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Расход).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Счет).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<РасходГрупБезПартииРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходГрупБезПартии регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");
            });

            modelBuilder.Entity<РасходГрупДляМз>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("РасходГруп для МЗ");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.UserId })
                    .HasName("IX_РасходГруп для МЗ111")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.UserId).HasColumnName("User ID");
            });

            modelBuilder.Entity<РасходГрупПартияВсеПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходГрупПартия все поставки");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходГрупПартияПоСкладуПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходГрупПартия по складу поставки");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Расход).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходГрупПартияПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходГрупПартия поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Расход).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходГрупПартияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходГрупПартия регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходГрупПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("РасходГруп поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Расход).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходГруппДляМзФилиалыДо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("РасходГрупп для МЗ филиалы до");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.Userid })
                    .HasName("IX_РасходГрупп для МЗ филиалы до")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<РасходДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_Двери");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходДляАсуп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для АСУП");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодВ1с)
                    .HasColumnName("Код в 1С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Склад).HasMaxLength(70);
            });

            modelBuilder.Entity<РасходДляДтмцВыставкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ выставки регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<РасходДляДтмцПериодВыставкиБезСписРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ период выставки_без_спис регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходДляДтмцПериодВыставкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ период выставки регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходДляДтмцРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходДляДтмцРегионУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ регион Узловая");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<РасходДляДтмцРегионУзловая111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ регион Узловая111");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<РасходДляДтмцСписаниеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ списание регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<РасходДляДтмцСписаниеРегионУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для ДТМЦ списание регион Узловая");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Kol).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<РасходДляКредиторкиВозвратыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для кредиторки возвраты регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.Возв)
                    .HasColumnName("возв")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ВозвРуб)
                    .HasColumnName("возв_руб")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВозвРубБезНдс)
                    .HasColumnName("возв_руб_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходДляКредиторкиВозвратыРегионObjed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для кредиторки возвраты регион_objed");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.Возв)
                    .HasColumnName("возв")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ВозвРуб)
                    .HasColumnName("возв_руб")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВозвРубБезНдс)
                    .HasColumnName("возв_руб_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходДляКредиторкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для кредиторки регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма руб_без_НДС")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходДляКредиторкиРегионObjed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход для кредиторки регион_objed");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма руб_без_НДС")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходЗаявки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_заявки");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходИтогоРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("РасходИтого регион");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_РасходИтого регион111_1")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Буфер).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Москва).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Накл).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Недогрузы).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Недоплачено).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Оплачено).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Разрешение).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Распоряжение).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Счет).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходИтогоРегион1111111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("РасходИтого регион1111111");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_РасходИтого регион111")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Буфер).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Москва).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Накл).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Недогрузы).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Недоплачено).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Оплачено).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Разрешение).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Распоряжение).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Счет).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходИтогоЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("РасходИтого ЦО");

                entity.HasIndex(e => new { e.IdТовара, e.UserId })
                    .HasName("IX_РасходИтого ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");
            });

            modelBuilder.Entity<РасходКлиентыФилиалыНов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - клиенты - филиалы-нов");

                entity.Property(e => e.ПричинаСкидки)
                    .HasColumnName("Причина_скидки")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<РасходКлиентыФилиалыНовNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - клиенты - филиалы-нов_new");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ПричинаСкидки)
                    .HasColumnName("Причина_скидки")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<РасходКлиентыФилиалыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - клиенты - филиалы регион");

                entity.Property(e => e.ПричинаСкидки)
                    .HasColumnName("Причина_скидки")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<РасходМебель>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_Мебель");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходМед>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_мед");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Сум)
                    .HasColumnName("сум")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходНакл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - накл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗак).HasColumnName("Номер_зак");
            });

            modelBuilder.Entity<РасходНаклРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - накл регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходНачТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход_нач_тмп");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Расход_нач_тмп")
                    .IsUnique();

                entity.HasIndex(e => e.UserId)
                    .HasName("IX_Расход_нач_тмп_1");

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходОбщий>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход общий");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Расход общий")
                    .IsUnique();

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Расход общий_2");

                entity.HasIndex(e => e.Пояснение)
                    .HasName("IX_Расход общий_1");

                entity.HasIndex(e => new { e.Месяц, e.Год, e.IdСубсчета })
                    .HasName("IX_Расход общий_5");

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСотрудника)
                    .HasColumnName("ID сотрудника")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтатусаБюджета)
                    .HasColumnName("ID статуса бюджета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтатусаСчета)
                    .HasColumnName("ID статуса счета")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdУтвр2)
                    .HasColumnName("ID утвр2")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordSmeta)
                    .HasColumnName("Record smeta")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdБухг)
                    .HasColumnName("User ID бухг")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdИнфр)
                    .HasColumnName("User ID инфр")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdРег)
                    .HasColumnName("User ID рег")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdСоглас)
                    .HasColumnName("User ID соглас")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdУтвр)
                    .HasColumnName("User ID утвр")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdУтвр2)
                    .HasColumnName("User ID утвр2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Год).HasDefaultValueSql("((0))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Кто).HasDefaultValueSql("((0))");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Месяц).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Объект).HasDefaultValueSql("((0))");

                entity.Property(e => e.Отправлено).HasDefaultValueSql("((0))");

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаВалБезНдс)
                    .HasColumnName("Сумма_вал_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Тип).HasMaxLength(5);

                entity.Property(e => e.ТипДокумента)
                    .HasColumnName("Тип документа")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<РасходОбщийАрхив>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход общий архив");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Расход общий архив")
                    .IsUnique();

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_Расход общий архив_1");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Расход общий архив_2");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Расход общий архив_3");

                entity.Property(e => e.BlgTip)
                    .HasColumnName("BLG-tip")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdСтатусаБюджета).HasColumnName("ID статуса бюджета");

                entity.Property(e => e.IdСтатусаСчета).HasColumnName("ID статуса счета");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("Id юрлица");

                entity.Property(e => e.RecOld).HasColumnName("Rec_old");

                entity.Property(e => e.RecordSmeta).HasColumnName("Record smeta");

                entity.Property(e => e.UserIdБухг).HasColumnName("User ID бухг");

                entity.Property(e => e.UserIdИнфр).HasColumnName("User ID инфр");

                entity.Property(e => e.UserIdРег).HasColumnName("User ID рег");

                entity.Property(e => e.UserIdСоглас).HasColumnName("User ID соглас");

                entity.Property(e => e.UserIdУтвр).HasColumnName("User ID утвр");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Курс).HasColumnType("money");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("money");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Отправлено).HasDefaultValueSql("((0))");

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Пояснение).HasMaxLength(255);

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("money");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("money");

                entity.Property(e => e.Тип)
                    .IsRequired()
                    .HasMaxLength(5);

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");
            });

            modelBuilder.Entity<РасходОбщийАрхивДо20092017>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход общий архив до 2009-2017");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Расход общий архив до 2009-2013")
                    .IsUnique();

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСтатусаБюджета)
                    .HasColumnName("ID статуса бюджета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтатусаСчета)
                    .HasColumnName("ID статуса счета")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordSmeta)
                    .HasColumnName("Record smeta")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdБухг)
                    .HasColumnName("User ID бухг")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdИнфр)
                    .HasColumnName("User ID инфр")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdРег)
                    .HasColumnName("User ID рег")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdСоглас)
                    .HasColumnName("User ID соглас")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserIdУтвр)
                    .HasColumnName("User ID утвр")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Год).HasDefaultValueSql("((0))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Кто).HasDefaultValueSql("((0))");

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Месяц).HasDefaultValueSql("((0))");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Объект).HasDefaultValueSql("((0))");

                entity.Property(e => e.Отправлено).HasDefaultValueSql("((0))");

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаВалБезНдс)
                    .HasColumnName("Сумма_вал_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Тип).HasMaxLength(5);

                entity.Property(e => e.ТипДокумента)
                    .HasColumnName("Тип документа")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<РасходОбщийДляБухгалтера>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход общий для бухгалтера");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdСтатусаБюджета).HasColumnName("ID статуса бюджета");

                entity.Property(e => e.IdСтатусаСчета).HasColumnName("ID статуса счета");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordSmeta).HasColumnName("Record smeta");

                entity.Property(e => e.UserIdБухг).HasColumnName("User ID бухг");

                entity.Property(e => e.UserIdИнфр).HasColumnName("User ID инфр");

                entity.Property(e => e.UserIdРег).HasColumnName("User ID рег");

                entity.Property(e => e.UserIdСоглас).HasColumnName("User ID соглас");

                entity.Property(e => e.UserIdУтвр).HasColumnName("User ID утвр");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Пост)
                    .HasColumnName("пост")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Тип).HasMaxLength(5);

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");
            });

            modelBuilder.Entity<РасходОбщийДляУтв>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход общий для утв");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСтатусаБюджета).HasColumnName("ID статуса бюджета");

                entity.Property(e => e.IdСтатусаСчета).HasColumnName("ID статуса счета");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordSmeta).HasColumnName("Record smeta");

                entity.Property(e => e.UserIdБухг).HasColumnName("User ID бухг");

                entity.Property(e => e.UserIdИнфр).HasColumnName("User ID инфр");

                entity.Property(e => e.UserIdРег).HasColumnName("User ID рег");

                entity.Property(e => e.UserIdСоглас).HasColumnName("User ID соглас");

                entity.Property(e => e.UserIdУтвр).HasColumnName("User ID утвр");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Пост)
                    .HasColumnName("пост")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Тип).HasMaxLength(5);

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");
            });

            modelBuilder.Entity<РасходОбщийДляУтвДиал>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход общий для утв диал");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСотрудника).HasColumnName("ID сотрудника");

                entity.Property(e => e.IdСтатусаБюджета).HasColumnName("ID статуса бюджета");

                entity.Property(e => e.IdСтатусаСчета).HasColumnName("ID статуса счета");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdУтвр2).HasColumnName("ID утвр2");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordSmeta).HasColumnName("Record smeta");

                entity.Property(e => e.UserIdБухг).HasColumnName("User ID бухг");

                entity.Property(e => e.UserIdИнфр).HasColumnName("User ID инфр");

                entity.Property(e => e.UserIdРег).HasColumnName("User ID рег");

                entity.Property(e => e.UserIdСоглас).HasColumnName("User ID соглас");

                entity.Property(e => e.UserIdУтвр).HasColumnName("User ID утвр");

                entity.Property(e => e.UserIdУтвр2).HasColumnName("User ID утвр2");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Пост)
                    .HasColumnName("пост")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Тип).HasMaxLength(5);

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");
            });

            modelBuilder.Entity<РасходОбщийДляУтвЛич>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход общий для утв лич");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСотрудника).HasColumnName("ID сотрудника");

                entity.Property(e => e.IdСтатусаБюджета).HasColumnName("ID статуса бюджета");

                entity.Property(e => e.IdСтатусаСчета).HasColumnName("ID статуса счета");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdУтвр2).HasColumnName("ID утвр2");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordSmeta).HasColumnName("Record smeta");

                entity.Property(e => e.UserIdБухг).HasColumnName("User ID бухг");

                entity.Property(e => e.UserIdИнфр).HasColumnName("User ID инфр");

                entity.Property(e => e.UserIdРег).HasColumnName("User ID рег");

                entity.Property(e => e.UserIdСоглас).HasColumnName("User ID соглас");

                entity.Property(e => e.UserIdУтвр).HasColumnName("User ID утвр");

                entity.Property(e => e.UserIdУтвр2).HasColumnName("User ID утвр2");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Пост)
                    .HasColumnName("пост")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Тип).HasMaxLength(5);

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");
            });

            modelBuilder.Entity<РасходОплаченДл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход оплачен дл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Оплачено).HasColumnType("decimal(38, 8)");
            });

            modelBuilder.Entity<РасходОплаченУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход оплачен Узловая");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Оплачено).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляДолга>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для долга");

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма дол")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляДолгаДляПлана>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для долга для Плана");

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.Валюта).HasMaxLength(50);

                entity.Property(e => e.Двери).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Мебель).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Сейфы).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");

                entity.Property(e => e.СуммаRОтгр).HasColumnName("Сумма R отгр");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма дол")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаДолОтгр)
                    .HasColumnName("Сумма дол отгр")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляДолгаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для долга регион");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");

                entity.Property(e => e.СуммаБезНдс)
                    .HasColumnName("Сумма_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаВСчете).HasColumnName("Сумма_в_счете");

                entity.Property(e => e.СуммаВСчетеДол)
                    .HasColumnName("Сумма_в_счете_дол")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляДолгаРегионДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для долга регион_двери");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");

                entity.Property(e => e.СуммаБезНдс)
                    .HasColumnName("Сумма_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаВСчете).HasColumnName("Сумма_в_счете");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляДолгаРегионМебель>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для долга регион_мебель");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаБезНдс)
                    .HasColumnName("Сумма_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаВСчете)
                    .HasColumnName("Сумма_в_счете")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляДолгаРегионСейфы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для долга регион_сейфы");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаБезНдс)
                    .HasColumnName("Сумма_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаВСчете)
                    .HasColumnName("Сумма_в_счете")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляДолгаРегионСнятьГалочку>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для долга регион_снять галочку");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаБезНдс)
                    .HasColumnName("Сумма_без_НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаВСчете)
                    .HasColumnName("Сумма_в_счете")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляОплаты>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для оплаты");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаЦр)
                    .HasColumnName("Сумма_ЦР")
                    .HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляПросмотра>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для просмотра");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Сср)
                    .HasColumnName("сср")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");

                entity.Property(e => e.СуммаСчета).HasColumnName("Сумма_счета");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляПросмотраРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для просмотра регион");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.ВСчетеРуб).HasColumnName("В счете руб");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Сср)
                    .HasColumnName("сср")
                    .HasColumnType("decimal(38, 5)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляРаспискиКнРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для расписки_КН регион");

                entity.Property(e => e.FirstОбоснованиеБлокировки).HasColumnName("First_Обоснование блокировки");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВСчете).HasColumnName("В счете");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");
            });

            modelBuilder.Entity<РасходПоЗаявкамДляРаспискиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам для расписки регион");

                entity.Property(e => e.FirstОбоснованиеБлокировки).HasColumnName("First_Обоснование блокировки");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВСчете).HasColumnName("В счете");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");
            });

            modelBuilder.Entity<РасходПоЗаявкамКонтрольный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам_контрольный");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.FirstВидПлатежа).HasColumnName("First_Вид платежа");

                entity.Property(e => e.FirstДатаПр)
                    .HasColumnName("First_Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ВыписанСчет)
                    .IsRequired()
                    .HasColumnName("выписан счет")
                    .HasMaxLength(3);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаДоставки)
                    .HasColumnName("Сумма доставки")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаЦр)
                    .HasColumnName("Сумма_ЦР")
                    .HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<РасходПоЗаявкамКонтрольныйВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам_контрольный все");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.FirstВидПлатежа).HasColumnName("First_Вид платежа");

                entity.Property(e => e.FirstДатаПр)
                    .HasColumnName("First_Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ВыписанСчет)
                    .IsRequired()
                    .HasColumnName("выписан счет")
                    .HasMaxLength(3);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаДоставки)
                    .HasColumnName("Сумма доставки")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаЦр)
                    .HasColumnName("Сумма_ЦР")
                    .HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<РасходПоЗаявкамОплаченным>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам оплаченным");

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма дол")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходПоЗаявкамОтгруженнымРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам отгруженным регион");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");
            });

            modelBuilder.Entity<РасходПоЗаявкамОтгруженныхСПрефДляАкта>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам отгруженных с преф для акта");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.СуммаОтгр).HasColumnName("Сумма отгр");
            });

            modelBuilder.Entity<РасходПоЗаявкамОтгруженныхСПрефРегДб>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам отгруженных с преф рег_дб");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаБезНдсКолБольшенуля).HasColumnName("Сумма_без_НДС_кол_большенуля");

                entity.Property(e => e.СуммаКолБольшенуля).HasColumnName("Сумма_кол_большенуля");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");

                entity.Property(e => e.СуммаРубБезНдс).HasColumnName("Сумма руб_без_НДС");
            });

            modelBuilder.Entity<РасходПоЗаявкамОтгруженныхСПрефРегДбObjed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам отгруженных с преф рег_дб_objed");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаБезНдсКолБольшенуля).HasColumnName("Сумма_без_НДС_кол_большенуля");

                entity.Property(e => e.СуммаКолБольшенуля).HasColumnName("Сумма_кол_большенуля");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");

                entity.Property(e => e.СуммаРубБезНдс).HasColumnName("Сумма руб_без_НДС");
            });

            modelBuilder.Entity<РасходПоЗаявкамОтгруженныхСПрефРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по заявкам отгруженных с преф регион");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Сс)
                    .HasColumnName("сс")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");

                entity.Property(e => e.СуммаРубБезНдс).HasColumnName("Сумма руб_без_НДС");
            });

            modelBuilder.Entity<РасходПоПартиямРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход по партиям регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Расход по партиям регион")
                    .IsUnique();

                entity.HasIndex(e => e.RecordRashod)
                    .HasName("IX_Расход по партиям регион_1");

                entity.HasIndex(e => e.Партия)
                    .HasName("IX_Расход по партиям регион_2");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordRashod)
                    .HasColumnName("Record rashod")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Sebestoimost).HasDefaultValueSql("(0)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Количество).HasDefaultValueSql("(0)");

                entity.Property(e => e.Партия).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<РасходПоСчетамКонтрольныйВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по счетам_контрольный все");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.FirstВидПлатежа).HasColumnName("First_Вид платежа");

                entity.Property(e => e.FirstДатаПр)
                    .HasColumnName("First_Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FirstНомерПлатежки)
                    .HasColumnName("First_Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ВыписанСчет)
                    .IsRequired()
                    .HasColumnName("выписан счет")
                    .HasMaxLength(3);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаДоставки)
                    .HasColumnName("Сумма доставки")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаСчетаДоСкидки)
                    .HasColumnName("Сумма_счета_до_скидки")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаЦр)
                    .HasColumnName("Сумма_ЦР")
                    .HasColumnType("decimal(38, 5)");
            });

            modelBuilder.Entity<РасходПоСчетуПоТоваруРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход по счету по товару регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Основание).HasMaxLength(50);
            });

            modelBuilder.Entity<РасходПодДилера>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВПути)
                    .HasColumnName("В пути")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Транзиты).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходПодДилераНедогрузы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера недогрузы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПодДилераНедогрузыКомплРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера недогрузы компл регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПодДилераНедогрузыМоскваРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера недогрузы москва регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПодДилераНедогрузыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера недогрузы регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПодДилераНедогрузыРегион1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера недогрузы регион1111");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПодДилераНедогрузыСчетаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера недогрузы счета регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходПодДилераРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПодДилераЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - под дилера ЦО");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПриходДенегРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - приход денег регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходПроцент>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход_процент");

                entity.HasIndex(e => new { e.НомерПокупателя, e.IdТовара })
                    .HasName("IX_Расход_процент");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаОтгр)
                    .HasColumnName("Дата_отгр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолИт)
                    .HasColumnName("Кол_ит")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРас)
                    .HasColumnName("Сумма рас")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаСс)
                    .HasColumnName("Сумма_сс")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<РасходПроцентКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход_процент_кл");

                entity.HasIndex(e => new { e.НомерПокупателя, e.IdТовара })
                    .HasName("IX_Расход_процент_кл")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.КолИт)
                    .HasColumnName("Кол_ит")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРас)
                    .HasColumnName("Сумма рас")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаСс)
                    .HasColumnName("Сумма_сс")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<РасходПроцентПг>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход_процент_пг");

                entity.HasIndex(e => new { e.НомерПокупателя, e.IdТовара })
                    .HasName("IX_Расход_процент_пг");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаОтгр)
                    .HasColumnName("Дата_отгр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолИт)
                    .HasColumnName("Кол_ит")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРас)
                    .HasColumnName("Сумма рас")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаСс)
                    .HasColumnName("Сумма_сс")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<РасходПроцентПгКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход_процент_пг_кл");

                entity.HasIndex(e => new { e.НомерПокупателя, e.IdТовара })
                    .HasName("IX_Расход_процент_пг_кл")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.КолИт)
                    .HasColumnName("Кол_ит")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРас)
                    .HasColumnName("Сумма рас")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаСс)
                    .HasColumnName("Сумма_сс")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<РасходПроцентРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход_процент регион");

                entity.HasIndex(e => new { e.НомерПокупателя, e.IdТовара, e.Регион, e.UserId, e.IdДилера, e.ДатаОтгр })
                    .HasName("IX_Расход_процент регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ДатаОтгр)
                    .HasColumnName("Дата_отгр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолИт)
                    .HasColumnName("Кол_ит")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРас)
                    .HasColumnName("Сумма рас")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаСс)
                    .HasColumnName("Сумма_сс")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<РасходПроцентРегионПг>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход_процент регион_пг");

                entity.HasIndex(e => new { e.НомерПокупателя, e.Регион, e.IdТовара, e.UserId, e.IdДилера, e.ДатаОтгр })
                    .HasName("IX_Расход_процент регион пг")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ДатаОтгр)
                    .HasColumnName("Дата_отгр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КолИт)
                    .HasColumnName("Кол_ит")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРас)
                    .HasColumnName("Сумма рас")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаСс)
                    .HasColumnName("Сумма_сс")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<РасходРазрешение>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - разрешение");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходРазрешениеМоскваРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - разрешение москва регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходРазрешениеНеделя>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - разрешение неделя");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходРазрешениеНеделяРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - разрешение неделя регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходРазрешениеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - разрешение регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходРаспоряжениеНаОтпускРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход - распоряжение на отпуск регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<РасходРеальный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходРеальныйГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный групп");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходРеальныйГруппДляГл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный групп для гл");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<РасходРеальныйДляБрак>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный для брак");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Выписано).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходРеальныйДляБракБуфер>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный для брак-буфер");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Выписано).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходРеальныйДляВыравнивания>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный для выравнивания");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходРеальныйДляВыравниванияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный для выравнивания регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходРеальныйДляГл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный для гл");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Выписано).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Недогрузы)
                    .HasColumnName("недогрузы")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<РасходРеальныйДляГлУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный для гл-Узловая");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Выписано).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходРеальныйДляИмпорта>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход реальный для импорта");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Выписано).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<РасходРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход регион");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Расход регион")
                    .IsUnique();

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Расход регион_1");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Расход регион_2");

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdПодразделения)
                    .HasColumnName("ID подразделения")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.IdПолучателя)
                    .HasColumnName("ID получателя")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСотрудника)
                    .HasColumnName("ID сотрудника")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdСтатьи)
                    .HasColumnName("ID статьи")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Комментарий).HasMaxLength(50);

                entity.Property(e => e.Наличные).HasDefaultValueSql("(0)");

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<РасходРеестр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход реестр");

                entity.HasIndex(e => e.IdRecord)
                    .HasName("IX_Расход реестр")
                    .IsUnique();

                entity.HasIndex(e => e.IdПодразделения)
                    .HasName("IX_Расход реестр_4");

                entity.HasIndex(e => e.IdСотрудника)
                    .HasName("IX_Расход реестр_6");

                entity.HasIndex(e => e.IdСтатьи)
                    .HasName("IX_Расход реестр_1");

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_Расход реестр_2");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Расход реестр_3");

                entity.HasIndex(e => e.RecordFinplan)
                    .HasName("IX_Расход реестр_5");

                entity.Property(e => e.BlgTip).HasColumnName("BLG-tip");

                entity.Property(e => e.IdOrder)
                    .HasColumnName("ID order")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdRecord)
                    .HasColumnName("ID record")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdКуда)
                    .HasColumnName("ID куда")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПолучателя)
                    .HasColumnName("ID получателя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСотрудника)
                    .HasColumnName("ID сотрудника")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтатьи)
                    .HasColumnName("ID статьи")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтруктуры).HasColumnName("ID структуры");

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСчетБалансаДеб)
                    .HasColumnName("ID счет баланса деб")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСчетБалансаКред)
                    .HasColumnName("ID счет баланса кред")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordFinplan)
                    .HasColumnName("Record finplan")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordFinplanStr)
                    .HasColumnName("Record finplan str")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтчета)
                    .HasColumnName("Дата отчета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Договор).HasMaxLength(50);

                entity.Property(e => e.Документ).HasMaxLength(50);

                entity.Property(e => e.Комментарий).HasMaxLength(50);

                entity.Property(e => e.Курс)
                    .HasColumnType("decimal(10, 5)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Объект).HasMaxLength(50);

                entity.Property(e => e.Отчет).HasDefaultValueSql("((0))");

                entity.Property(e => e.Поставщик).HasMaxLength(150);

                entity.Property(e => e.РасходникРаспечатан)
                    .HasColumnName("Расходник распечатан")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СтавкаНдс).HasColumnName("Ставка_НДС");

                entity.Property(e => e.Сумма)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРубБезНдс)
                    .HasColumnName("Сумма_руб_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТипДокумента)
                    .HasColumnName("Тип документа")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Товар).HasMaxLength(50);
            });

            modelBuilder.Entity<РасходРеестрПодпись>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход реестр подпись");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Расход реестр подпись")
                    .IsUnique();

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Usd).HasColumnName("USD");

                entity.Property(e => e.Вал).HasMaxLength(10);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ЕстьПодпись)
                    .HasColumnName("Есть подпись")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.Основание).HasMaxLength(255);

                entity.Property(e => e.Подпись).HasColumnType("image");

                entity.Property(e => e.Сотрудник).HasMaxLength(50);

                entity.Property(e => e.Структурное).HasMaxLength(150);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<РасходСейфы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_сейфы");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<РасходСуммаПоСчетуРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход сумма по счету регион");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаПоОтгр)
                    .HasColumnName("Сумма по отгр")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСс)
                    .HasColumnName("Сумма по сс")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчету)
                    .HasColumnName("Сумма по счету")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчетуБезНдс)
                    .HasColumnName("Сумма по счету без НДС")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчетуРуб)
                    .HasColumnName("Сумма по счету руб")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчетуРубБезНдс).HasColumnName("Сумма по счету руб без НДС");
            });

            modelBuilder.Entity<РасходСуммаПоСчетуРегионГруппа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход сумма по счету регион группа");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаПоОтгр)
                    .HasColumnName("Сумма по отгр")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСс)
                    .HasColumnName("Сумма по сс")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчету)
                    .HasColumnName("Сумма по счету")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчетуБезНдс)
                    .HasColumnName("Сумма по счету без НДС")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчетуРуб)
                    .HasColumnName("Сумма по счету руб")
                    .HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаПоСчетуРубБезНдс).HasColumnName("Сумма по счету руб без НДС");
            });

            modelBuilder.Entity<РасходСчета>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход_счета");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходТоварЦена>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("расход_товар_цена");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасходТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход товара");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Расход товара_2");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Расход товара_5");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Расход товара")
                    .IsUnique();

                entity.HasIndex(e => e.ДилерКлиент)
                    .HasName("IX_Расход товара_3");

                entity.HasIndex(e => e.Накладная)
                    .HasName("IX_Расход товара_1");

                entity.HasIndex(e => e.НомерПокупателя)
                    .HasName("IX_Расход товара_4");

                entity.HasIndex(e => e.ОбоснованиеБлокировки)
                    .HasName("IX_Расход товара_6");

                entity.HasIndex(e => new { e.IdТовара, e.Количество, e.КоличествоДляОтгрузки, e.УпаковкаНомер, e.IdСклада, e.ОбоснованиеБлокировки })
                    .HasName("IX_Расход товара_7");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0.2))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordРекламация)
                    .HasColumnName("Record_рекламация")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Накладная).HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерЗак)
                    .HasColumnName("Номер_зак")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерКоректы)
                    .HasColumnName("Номер_коректы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерРегиона)
                    .HasColumnName("Номер_региона")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбоснованиеБлокировки)
                    .HasColumnName("Обоснование блокировки")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.План)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Подтверждение).HasDefaultValueSql("((0))");

                entity.Property(e => e.Префикс).HasDefaultValueSql("((0))");

                entity.Property(e => e.Причина).HasDefaultValueSql("((0))");

                entity.Property(e => e.РегионЗабронировал)
                    .HasColumnName("Регион_забронировал")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РегионЗак)
                    .HasColumnName("Регион_зак")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.След)
                    .HasMaxLength(20)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'шт')");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ФактМест).HasColumnName("Факт мест");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<РасходТовара1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход товара_");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(36, 6)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(36, 6)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<РасходТовараВозвратыДляАктаСверки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход товара возвраты для акта сверки");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.СуммаОтгр).HasColumnName("Сумма отгр");
            });

            modelBuilder.Entity<РасходТовараДляАктаСверки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расход товара для акта сверки");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.План).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");
            });

            modelBuilder.Entity<РасходТовараДляФилиалов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход товара для филиалов");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Расход товара для филиалов_2");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Расход товара для филиалов_3");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Расход товара для филиалов")
                    .IsUnique();

                entity.HasIndex(e => e.НомерПокупателя)
                    .HasName("IX_Расход товара для филиалов_4");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара })
                    .HasName("IX_Расход товара для филиалов_1");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sebestoimost).HasDefaultValueSql("(0)");

                entity.Property(e => e.Ssr).HasColumnName("SSR");

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasDefaultValueSql("(0)")
                    .HasComment("");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Количество).HasDefaultValueSql("(0)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя)
                    .HasColumnName("Номер покупателя")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ОбоснованиеБлокировки)
                    .HasColumnName("Обоснование блокировки")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.Префикс).HasDefaultValueSql("(0)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<РасходТовараПоставки>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Расход товара поставки");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Расход товара поставки");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Расход товара поставки_1");

                entity.HasIndex(e => e.АвтоСписаниеId)
                    .HasName("IX_Расход товара поставки_8");

                entity.HasIndex(e => e.КомплектRecId)
                    .HasName("IX_Расход товара поставки_2");

                entity.HasIndex(e => e.НомерПорядковый)
                    .HasName("IX_Расход товара поставки_5");

                entity.HasIndex(e => new { e.IdТовара, e.КомплектRecId })
                    .HasName("Комплект_RecID_IDX");

                entity.HasIndex(e => new { e.RecordId, e.Provedeno, e.ДатаВывоза })
                    .HasName("IX_Расход товара поставки_Provedeno");

                entity.HasIndex(e => new { e.Префикс, e.Год, e.Фирма })
                    .HasName("IX_Расход товара поставки_4");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.Количество, e.Партия, e.ДатаВывоза })
                    .HasName("IX_Расход товара поставки_Дата_вывоза");

                entity.HasIndex(e => new { e.IdСклада, e.Количество, e.ДатаВывоза, e.IdТовара, e.ОбоснованиеБлокировки })
                    .HasName("IX_Расход_товара_поставки_Обработчик");

                entity.HasIndex(e => new { e.IdТовара, e.Количество, e.IdСклада, e.FactoryId, e.ДатаВывоза })
                    .HasName("IX_Расход товара поставки_ID_склада_FactoryID_Дата_вывоза");

                entity.HasIndex(e => new { e.IdТовара, e.Количество, e.Партия, e.IdСклада, e.ДатаВывоза })
                    .HasName("IX_Расход товара поставки_10");

                entity.HasIndex(e => new { e.IdТовара, e.RecordId, e.Партия, e.IdСклада, e.КомплектRecId, e.ДатаВывоза })
                    .HasName("Расход_товара_поставки_Комплект_RecID");

                entity.HasIndex(e => new { e.IdСклада, e.Префикс, e.НомерПорядковый, e.Год, e.Фирма, e.Provedeno, e.FactoryId, e.ДатаВывоза })
                    .HasName("IX_Расход товара поставки_7");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.ДилерКлиент, e.НомерПокупателя, e.КоличествоВСчетеToDelete, e.Префикс, e.Перенесен, e.Партия, e.ПостРас, e.НомерПорядковый, e.СтранаПроисхождения, e.НомерГтд, e.Основание, e.Provedeno, e.FactoryId, e.IdСкладКуда, e.БазоваяЦенаR, e.Количество, e.ДатаПредполагаемойПродажи, e.АвтоСписаниеId, e.AnalogId, e.Who, e.ЦенаПродажи, e.ЦенаПродажиR, e.БазоваяЦена, e.Год, e.Фирма, e.Кф, e.UserId, e.RecordId, e.Sebestoimost, e.Ssr, e.ЕдИзм, e.Валюта, e.Накладная, e.КоличествоКОплатеToDelete, e.КоличествоОплаченноеToDelete, e.ДатаВывоза, e.ОбоснованиеБлокировки })
                    .HasName("IX_Расход товара поставки_9");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.AnalogId).HasColumnName("AnalogID");

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdСкладКуда).HasColumnName("ID Склад_Куда");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TovDirId).HasColumnName("TovDirID");

                entity.Property(e => e.TypeSpisId).HasColumnName("TypeSpisID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId)
                    .HasColumnName("АвтоСписаниеID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВСчетеToDelete)
                    .HasColumnName("Количество в счете_to_Delete")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоКОплатеToDelete)
                    .HasColumnName("Количество к оплате_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КоличествоОплаченноеToDelete)
                    .HasColumnName("Количество оплаченное_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КомплектRecId).HasColumnName("Комплект_RecID");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки)
                    .HasColumnName("Обоснование блокировки")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ПостРас).HasColumnName("Пост_рас");

                entity.Property(e => e.Префикс).HasDefaultValueSql("((0))");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasDefaultValueSql("((9))");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.ПриходТовараПоставки)
                    .WithMany(p => p.РасходТовараПоставки)
                    .HasForeignKey(d => new { d.IdСклада, d.IdТовара, d.Партия })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Расход товара поставки_Приход товара поставки1");
            });

            modelBuilder.Entity<РасходТовараПоставкиOld>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Расход товара поставки_OLD");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AnalogId).HasColumnName("AnalogID");

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdСкладКуда).HasColumnName("ID Склад_Куда");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.TovDirId).HasColumnName("TovDirID");

                entity.Property(e => e.TypeSpisId).HasColumnName("TypeSpisID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId).HasColumnName("АвтоСписаниеID");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВСчетеToDelete)
                    .HasColumnName("Количество в счете_to_Delete")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоКОплатеToDelete)
                    .HasColumnName("Количество к оплате_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КоличествоОплаченноеToDelete)
                    .HasColumnName("Количество оплаченное_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КомплектRecId).HasColumnName("Комплект_RecID");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ПостРас).HasColumnName("Пост_рас");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<РасходТовараПоставкиДо2018>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("Расход товара поставки до 2018");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AnalogId).HasColumnName("AnalogID");

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВходнойЗаявки).HasColumnName("ID входной заявки");

                entity.Property(e => e.IdСкладКуда).HasColumnName("ID Склад_Куда");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TovDirId).HasColumnName("TovDirID");

                entity.Property(e => e.TypeSpisId).HasColumnName("TypeSpisID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АвтоСписаниеId)
                    .HasColumnName("АвтоСписаниеID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВСчетеToDelete)
                    .HasColumnName("Количество в счете_to_Delete")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоКОплатеToDelete)
                    .HasColumnName("Количество к оплате_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КоличествоОплаченноеToDelete)
                    .HasColumnName("Количество оплаченное_to_Delete")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КомплектRecId).HasColumnName("Комплект_RecID");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ОбоснованиеБлокировки)
                    .HasColumnName("Обоснование блокировки")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ПостРас).HasColumnName("Пост_рас");

                entity.Property(e => e.Префикс).HasDefaultValueSql("((0))");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasDefaultValueSql("((9))");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.HasOne(d => d.ПриходТовараПоставкиДо2018)
                    .WithMany(p => p.РасходТовараПоставкиДо2018)
                    .HasForeignKey(d => new { d.IdСклада, d.IdТовара, d.Партия })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Расход товара поставки до 2018_Приход товара поставки1");
            });

            modelBuilder.Entity<РасходТовараРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расход товара регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Расход товара регион")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Расход товара регион_5");

                entity.HasIndex(e => new { e.IdСклада, e.Регион })
                    .HasName("IX_Расход товара регион_1");

                entity.HasIndex(e => new { e.IdТовара, e.Регион })
                    .HasName("IX_Расход товара регион_2");

                entity.HasIndex(e => new { e.ДатаВывоза, e.Регион })
                    .HasName("IX_Расход товара регион_3");

                entity.HasIndex(e => new { e.RecordId, e.НомерПокупателя, e.Регион })
                    .HasName("IX_Расход товара регион_4");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0.2))");

                entity.Property(e => e.RecVosst).HasColumnName("rec_vosst");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdOld).HasColumnName("Record ID_old");

                entity.Property(e => e.RecordРекламация)
                    .HasColumnName("Record_рекламация")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоВНалоговой)
                    .HasColumnName("Количество в налоговой")
                    .HasColumnType("decimal(20, 8)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоВСчете)
                    .HasColumnName("Количество в счете")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоКОплате)
                    .HasColumnName("Количество к оплате")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерЗак)
                    .HasColumnName("Номер_зак")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.НомерКоректы)
                    .HasColumnName("Номер_коректы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерОфиса)
                    .HasColumnName("Номер_офиса")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки)
                    .HasColumnName("Обоснование блокировки")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.План)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Подтверждение).HasDefaultValueSql("((0))");

                entity.Property(e => e.Префикс).HasDefaultValueSql("((0))");

                entity.Property(e => e.Причина).HasDefaultValueSql("((0))");

                entity.Property(e => e.ПричинаПодробно)
                    .HasColumnName("Причина подробно")
                    .HasMaxLength(80);

                entity.Property(e => e.РегионЗак)
                    .HasColumnName("Регион_зак")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<РасхолОбщийДляУтв>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расхол общий для утв");

                entity.Property(e => e.IdRecord).HasColumnName("ID record");

                entity.Property(e => e.IdReestra).HasColumnName("ID reestra");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdЗоны).HasColumnName("ID зоны");

                entity.Property(e => e.IdОтветственного).HasColumnName("ID ответственного");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdПроизв).HasColumnName("ID произв");

                entity.Property(e => e.IdСтатусаБюджета).HasColumnName("ID статуса бюджета");

                entity.Property(e => e.IdСтатусаСчета).HasColumnName("ID статуса счета");

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordSmeta).HasColumnName("Record smeta");

                entity.Property(e => e.UserIdБухг).HasColumnName("User ID бухг");

                entity.Property(e => e.UserIdИнфр).HasColumnName("User ID инфр");

                entity.Property(e => e.UserIdРег).HasColumnName("User ID рег");

                entity.Property(e => e.UserIdСоглас).HasColumnName("User ID соглас");

                entity.Property(e => e.UserIdУтвр).HasColumnName("User ID утвр");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаБухг)
                    .HasColumnName("Дата бухг")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИнфр)
                    .HasColumnName("Дата инфр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРег)
                    .HasColumnName("Дата рег")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСоглас)
                    .HasColumnName("Дата соглас")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтверждения)
                    .HasColumnName("Дата утверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Когда).HasColumnType("smalldatetime");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasMaxLength(6);

                entity.Property(e => e.Комментарий)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КурсОплаты)
                    .HasColumnName("Курс оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета)
                    .IsRequired()
                    .HasColumnName("Номер счета")
                    .HasMaxLength(50);

                entity.Property(e => e.Пост)
                    .HasColumnName("пост")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.СтатьяРасхода)
                    .HasColumnName("Статья расхода")
                    .HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаВал)
                    .HasColumnName("Сумма_вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплаты)
                    .HasColumnName("Сумма оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыВал)
                    .HasColumnName("Сумма оплаты вал")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаОплатыРуб)
                    .HasColumnName("Сумма оплаты руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма_руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Тип).HasMaxLength(5);

                entity.Property(e => e.ТипДокумента).HasColumnName("Тип документа");
            });

            modelBuilder.Entity<РасхолУсл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расхол_усл");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<РасчетСсПечать>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расчет_СС_печать");

                entity.Property(e => e.IdИзделия).HasColumnName("ID изделия");

                entity.Property(e => e.IdПлощади).HasColumnName("ID площади");

                entity.Property(e => e.IdСтатьиЗатрат).HasColumnName("ID статьи затрат");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.АртикулНовый)
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(25);

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Вес).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ДатаФормирования)
                    .HasColumnName("Дата формирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Деталь).HasMaxLength(100);

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Изделие)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.ИтогоРуб)
                    .HasColumnName("Итого_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кат).HasMaxLength(50);

                entity.Property(e => e.Кдр)
                    .HasColumnName("КДР")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Ким)
                    .HasColumnName("КИМ")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Ким2)
                    .HasColumnName("КИМ2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Ким3)
                    .HasColumnName("КИМ3")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Кто).HasMaxLength(100);

                entity.Property(e => e.КурсEuro)
                    .HasColumnName("Курс_EURO")
                    .HasColumnType("decimal(7, 3)");

                entity.Property(e => e.КурсUsd)
                    .HasColumnName("Курс_USD")
                    .HasColumnType("decimal(7, 3)");

                entity.Property(e => e.МетодLifo)
                    .HasColumnName("Метод_LIFO")
                    .HasMaxLength(4)
                    .IsFixedLength();

                entity.Property(e => e.МетодКосвенных)
                    .HasColumnName("Метод_Косвенных")
                    .HasMaxLength(4)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НормаРасхода)
                    .HasColumnName("Норма расхода")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Площадка).HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СНдс)
                    .HasColumnName("С_НДС")
                    .HasMaxLength(7)
                    .IsFixedLength();

                entity.Property(e => e.СтатьяЗатрат)
                    .HasColumnName("Статья затрат")
                    .HasMaxLength(150);

                entity.Property(e => e.ТипРасчета)
                    .IsRequired()
                    .HasColumnName("Тип расчета")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Цена).HasColumnType("decimal(26, 6)");

                entity.Property(e => e.ЦенаСправочник)
                    .HasColumnName("Цена справочник")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<РасчетСсПечатьБолгария>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расчет_СС_печать_болгария");

                entity.Property(e => e.IdИзделия).HasColumnName("ID изделия");

                entity.Property(e => e.IdПлощади).HasColumnName("ID площади");

                entity.Property(e => e.IdСтатьиЗатрат).HasColumnName("ID статьи затрат");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.АртикулНовый)
                    .HasColumnName("Артикул Новый")
                    .HasMaxLength(50);

                entity.Property(e => e.Валюта)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Вес).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.ДатаФормирования)
                    .HasColumnName("Дата формирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Деталь).HasMaxLength(100);

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Изделие)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ИтогоРуб)
                    .HasColumnName("Итого_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кат).HasMaxLength(50);

                entity.Property(e => e.Кдр)
                    .HasColumnName("КДР")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Ким)
                    .HasColumnName("КИМ")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Ким2)
                    .HasColumnName("КИМ2")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Ким3)
                    .HasColumnName("КИМ3")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Кто).HasMaxLength(100);

                entity.Property(e => e.КурсEuro)
                    .HasColumnName("Курс_EURO")
                    .HasColumnType("decimal(7, 3)");

                entity.Property(e => e.КурсUsd)
                    .HasColumnName("Курс_USD")
                    .HasColumnType("decimal(7, 3)");

                entity.Property(e => e.МетодLifo)
                    .HasColumnName("Метод_LIFO")
                    .HasMaxLength(4)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(1000);

                entity.Property(e => e.НормаРасхода)
                    .HasColumnName("Норма расхода")
                    .HasColumnType("decimal(18, 5)");

                entity.Property(e => e.Площадка).HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СНдс)
                    .HasColumnName("С_НДС")
                    .HasMaxLength(7)
                    .IsFixedLength();

                entity.Property(e => e.СтатьяЗатрат)
                    .HasColumnName("Статья затрат")
                    .HasMaxLength(150);

                entity.Property(e => e.ТипРасчета)
                    .IsRequired()
                    .HasColumnName("Тип расчета")
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаСправочник)
                    .HasColumnName("Цена справочник")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<РасчетШтрафа>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расчет штрафа");

                entity.HasIndex(e => new { e.НомерСчета, e.НомерШтрафа })
                    .HasName("IX_Расчет штрафа")
                    .IsUnique();

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.КоличествоДнейПросрочки)
                    .HasColumnName("Количество дней просрочки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерШтрафа).HasColumnName("Номер штрафа");

                entity.Property(e => e.ПлановаяДатаОплаты)
                    .HasColumnName("Плановая дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.РазмерШтрафа)
                    .HasColumnName("Размер штрафа")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаДолга)
                    .HasColumnName("Сумма долга")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаШтрафа)
                    .HasColumnName("Сумма штрафа")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Юрлицо)
                    .HasMaxLength(70)
                    .IsFixedLength();
            });

            modelBuilder.Entity<РасчетШтрафаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Расчет штрафа регион");

                entity.HasIndex(e => new { e.НомерСчета, e.Регион, e.НомерШтрафа })
                    .HasName("IX_Расчет штрафа регион")
                    .IsUnique();

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.КоличествоДнейПросрочки)
                    .HasColumnName("Количество дней просрочки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерШтрафа).HasColumnName("Номер штрафа");

                entity.Property(e => e.ПлановаяДатаОплаты)
                    .HasColumnName("Плановая дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.РазмерШтрафа)
                    .HasColumnName("Размер штрафа")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаДолга)
                    .HasColumnName("Сумма долга")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаШтрафа)
                    .HasColumnName("Сумма штрафа")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Юрлицо)
                    .HasMaxLength(70)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Расширенная>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расширенная");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(13);

                entity.Property(e => e.IdНомера).HasColumnName("ID номера");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БуферУзмк).HasColumnName("Буфер_УЗМК");

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Взломостойкость).HasMaxLength(20);

                entity.Property(e => e.ВнутреннийОбъем).HasColumnName("Внутренний объем");

                entity.Property(e => e.ВысотаВн).HasColumnName("Высота вн");

                entity.Property(e => e.ВысотаМм).HasColumnName("Высота мм");

                entity.Property(e => e.ГарантийныйСрок).HasColumnName("Гарантийный срок");

                entity.Property(e => e.ГлубинаВн).HasColumnName("Глубина вн");

                entity.Property(e => e.ГлубинаМм).HasColumnName("Глубина мм");

                entity.Property(e => e.КассовоеОтделение).HasColumnName("Кассовое отделение");

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КолВоПолок).HasColumnName("Кол-во полок");

                entity.Property(e => e.КоличествоБатареек).HasColumnName("Количество батареек");

                entity.Property(e => e.КоличествоБатареекАа).HasColumnName("Количество батареек АА");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КоличествоУпаковокВШт).HasColumnName("Количество упаковок в шт");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Описание).HasMaxLength(150);

                entity.Property(e => e.ОписаниеКода)
                    .HasColumnName("Описание кода")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.ПланНаДень).HasColumnName("План на день");

                entity.Property(e => e.Поставщик).HasMaxLength(100);

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.Сертификат).HasMaxLength(20);

                entity.Property(e => e.СменяКода).HasColumnName("Сменя кода");

                entity.Property(e => e.СрокСлужбы).HasColumnName("Срок службы");

                entity.Property(e => e.Стандарт).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");

                entity.Property(e => e.ШиринаВн).HasColumnName("Ширина вн");

                entity.Property(e => e.ШиринаМм).HasColumnName("Ширина мм");

                entity.Property(e => e.Штрихкод).HasMaxLength(30);

                entity.Property(e => e.ЭлектронныйЗамок).HasColumnName("Электронный замок");
            });

            modelBuilder.Entity<РасширеннаяПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Расширенная поставки");

                entity.Property(e => e.Abc)
                    .HasColumnName("ABC")
                    .HasMaxLength(5);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.ВысотаВн).HasColumnName("Высота вн");

                entity.Property(e => e.ВысотаМм).HasColumnName("Высота мм");

                entity.Property(e => e.ГлубинаВн).HasColumnName("Глубина вн");

                entity.Property(e => e.ГлубинаМм).HasColumnName("Глубина мм");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Категория).HasMaxLength(20);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Описание).HasMaxLength(150);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.ПланНаДень).HasColumnName("План на день");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипГруппы).HasColumnName("Тип группы");

                entity.Property(e => e.ШиринаВн).HasColumnName("Ширина вн");

                entity.Property(e => e.ШиринаМм).HasColumnName("Ширина мм");
            });

            modelBuilder.Entity<РегистрацияЖалоб>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Регистрация жалоб");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Регистрация жалоб")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ВЧейАдрес)
                    .HasColumnName("В чей адрес")
                    .HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода).HasColumnType("smalldatetime");

                entity.Property(e => e.КтоВнес)
                    .HasColumnName("Кто внес")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ОтКого)
                    .HasColumnName("От кого")
                    .HasMaxLength(50);

                entity.Property(e => e.ОтметкаОбИсполнении)
                    .IsRequired()
                    .HasColumnName("Отметка об исполнении")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ПредметЖалобы)
                    .HasColumnName("Предмет жалобы")
                    .HasMaxLength(100);

                entity.Property(e => e.ПринятыеМеры)
                    .HasColumnName("Принятые меры")
                    .HasMaxLength(150);

                entity.Property(e => e.ТипКлиента)
                    .HasColumnName("Тип клиента")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<РегистрацияПриемокПоКачеству>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Регистрация приемок по качеству");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Регистрация приемок по качеству")
                    .IsUnique();

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода).HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗатрат)
                    .HasColumnName("Код затрат")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.КтоВнес)
                    .HasColumnName("Кто внес")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерАкта)
                    .HasColumnName("Номер акта")
                    .HasMaxLength(10);

                entity.Property(e => e.НомерЗаказа)
                    .HasColumnName("Номер заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.ОписаниеБрака)
                    .HasColumnName("Описание брака")
                    .HasMaxLength(100);

                entity.Property(e => e.ОтКого)
                    .HasColumnName("От кого")
                    .HasMaxLength(50);

                entity.Property(e => e.ОтметкаОбИсполнении)
                    .IsRequired()
                    .HasColumnName("Отметка об исполнении")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ПринятоеРешение)
                    .HasColumnName("Принятое решение")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СуммаЗатрат)
                    .HasColumnName("Сумма затрат")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<РеестрКомм>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Реестр комм");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Реестр комм")
                    .IsUnique();

                entity.Property(e => e.Comm)
                    .HasColumnName("comm")
                    .HasMaxLength(255);

                entity.Property(e => e.Rec).HasColumnName("rec");
            });

            modelBuilder.Entity<РекламацииПоДверям>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Рекламации по дверям");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IdДефекта).HasColumnName("ID дефекта");

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.Выражение1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Выражение2).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ДатаАкта)
                    .HasColumnName("Дата акта")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Завод)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерРекл).HasColumnName("Номер рекл");

                entity.Property(e => e.ОписаниеДефекта)
                    .HasColumnName("Описание дефекта")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СводнаяДляПрогнозаДни>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сводная для прогноза_дни");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Сводная для прогноза_дни")
                    .IsUnique();

                entity.Property(e => e.IdУчастка).HasColumnName("ID участка");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e._1).HasColumnName("1");

                entity.Property(e => e._10).HasColumnName("10");

                entity.Property(e => e._11).HasColumnName("11");

                entity.Property(e => e._12).HasColumnName("12");

                entity.Property(e => e._13).HasColumnName("13");

                entity.Property(e => e._14).HasColumnName("14");

                entity.Property(e => e._15).HasColumnName("15");

                entity.Property(e => e._16).HasColumnName("16");

                entity.Property(e => e._17).HasColumnName("17");

                entity.Property(e => e._18).HasColumnName("18");

                entity.Property(e => e._19).HasColumnName("19");

                entity.Property(e => e._2).HasColumnName("2");

                entity.Property(e => e._20).HasColumnName("20");

                entity.Property(e => e._21).HasColumnName("21");

                entity.Property(e => e._22).HasColumnName("22");

                entity.Property(e => e._23).HasColumnName("23");

                entity.Property(e => e._24).HasColumnName("24");

                entity.Property(e => e._25).HasColumnName("25");

                entity.Property(e => e._26).HasColumnName("26");

                entity.Property(e => e._27).HasColumnName("27");

                entity.Property(e => e._28).HasColumnName("28");

                entity.Property(e => e._29).HasColumnName("29");

                entity.Property(e => e._3).HasColumnName("3");

                entity.Property(e => e._30).HasColumnName("30");

                entity.Property(e => e._31).HasColumnName("31");

                entity.Property(e => e._4).HasColumnName("4");

                entity.Property(e => e._5).HasColumnName("5");

                entity.Property(e => e._6).HasColumnName("6");

                entity.Property(e => e._7).HasColumnName("7");

                entity.Property(e => e._8).HasColumnName("8");

                entity.Property(e => e._9).HasColumnName("9");

                entity.Property(e => e.Признак).HasMaxLength(10);

                entity.Property(e => e.Участок)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СводнаяДляПрогнозаДниГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сводная для прогноза_дни_групп");

                entity.Property(e => e.IdУчастка).HasColumnName("ID участка");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e._1).HasColumnName("1");

                entity.Property(e => e._10).HasColumnName("10");

                entity.Property(e => e._11).HasColumnName("11");

                entity.Property(e => e._12).HasColumnName("12");

                entity.Property(e => e._13).HasColumnName("13");

                entity.Property(e => e._14).HasColumnName("14");

                entity.Property(e => e._15).HasColumnName("15");

                entity.Property(e => e._16).HasColumnName("16");

                entity.Property(e => e._17).HasColumnName("17");

                entity.Property(e => e._18).HasColumnName("18");

                entity.Property(e => e._19).HasColumnName("19");

                entity.Property(e => e._2).HasColumnName("2");

                entity.Property(e => e._20).HasColumnName("20");

                entity.Property(e => e._21).HasColumnName("21");

                entity.Property(e => e._22).HasColumnName("22");

                entity.Property(e => e._23).HasColumnName("23");

                entity.Property(e => e._24).HasColumnName("24");

                entity.Property(e => e._25).HasColumnName("25");

                entity.Property(e => e._26).HasColumnName("26");

                entity.Property(e => e._27).HasColumnName("27");

                entity.Property(e => e._28).HasColumnName("28");

                entity.Property(e => e._29).HasColumnName("29");

                entity.Property(e => e._3).HasColumnName("3");

                entity.Property(e => e._30).HasColumnName("30");

                entity.Property(e => e._31).HasColumnName("31");

                entity.Property(e => e._4).HasColumnName("4");

                entity.Property(e => e._5).HasColumnName("5");

                entity.Property(e => e._6).HasColumnName("6");

                entity.Property(e => e._7).HasColumnName("7");

                entity.Property(e => e._8).HasColumnName("8");

                entity.Property(e => e._9).HasColumnName("9");

                entity.Property(e => e.Итого).HasColumnName("итого");

                entity.Property(e => e.Признак).HasMaxLength(10);

                entity.Property(e => e.Участок)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<СводнаяДляПрогнозаУчастки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сводная для прогноза_участки");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Сводная для прогноза_участки")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.Месяц).HasMaxLength(20);

                entity.Property(e => e.Уч1План)
                    .HasColumnName("Уч1_План")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч1ПриходНеделя1)
                    .HasColumnName("Уч1_Приход_Неделя1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч1ПриходНеделя2)
                    .HasColumnName("Уч1_Приход_Неделя2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч1ПриходНеделя3)
                    .HasColumnName("Уч1_Приход_Неделя3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч1ПриходНеделя4)
                    .HasColumnName("Уч1_Приход_Неделя4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч1ПриходНеделя5)
                    .HasColumnName("Уч1_Приход_Неделя5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч1ПриходНеделя6)
                    .HasColumnName("Уч1_Приход_Неделя6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч1ФактПм)
                    .HasColumnName("Уч1_Факт_пм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2План)
                    .HasColumnName("Уч2_План")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2ПриходНеделя1)
                    .HasColumnName("Уч2_Приход_Неделя1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2ПриходНеделя2)
                    .HasColumnName("Уч2_Приход_Неделя2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2ПриходНеделя3)
                    .HasColumnName("Уч2_Приход_Неделя3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2ПриходНеделя4)
                    .HasColumnName("Уч2_Приход_Неделя4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2ПриходНеделя5)
                    .HasColumnName("Уч2_Приход_Неделя5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2ПриходНеделя6)
                    .HasColumnName("Уч2_Приход_Неделя6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч2ФактПм)
                    .HasColumnName("Уч2_Факт_пм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3План)
                    .HasColumnName("Уч3_План")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3ПриходНеделя1)
                    .HasColumnName("Уч3_Приход_Неделя1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3ПриходНеделя2)
                    .HasColumnName("Уч3_Приход_Неделя2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3ПриходНеделя3)
                    .HasColumnName("Уч3_Приход_Неделя3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3ПриходНеделя4)
                    .HasColumnName("Уч3_Приход_Неделя4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3ПриходНеделя5)
                    .HasColumnName("Уч3_Приход_Неделя5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3ПриходНеделя6)
                    .HasColumnName("Уч3_Приход_Неделя6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч3ФактПм)
                    .HasColumnName("Уч3_Факт_пм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4План)
                    .HasColumnName("Уч4_План")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4ПриходНеделя1)
                    .HasColumnName("Уч4_Приход_Неделя1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4ПриходНеделя2)
                    .HasColumnName("Уч4_Приход_Неделя2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4ПриходНеделя3)
                    .HasColumnName("Уч4_Приход_Неделя3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4ПриходНеделя4)
                    .HasColumnName("Уч4_Приход_Неделя4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4ПриходНеделя5)
                    .HasColumnName("Уч4_Приход_Неделя5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4ПриходНеделя6)
                    .HasColumnName("Уч4_Приход_Неделя6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч4ФактПм)
                    .HasColumnName("Уч4_Факт_пм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5План)
                    .HasColumnName("Уч5_План")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5ПриходНеделя1)
                    .HasColumnName("Уч5_Приход_Неделя1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5ПриходНеделя2)
                    .HasColumnName("Уч5_Приход_Неделя2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5ПриходНеделя3)
                    .HasColumnName("Уч5_Приход_Неделя3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5ПриходНеделя4)
                    .HasColumnName("Уч5_Приход_Неделя4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5ПриходНеделя5)
                    .HasColumnName("Уч5_Приход_Неделя5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5ПриходНеделя6)
                    .HasColumnName("Уч5_Приход_Неделя6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч5ФактПм)
                    .HasColumnName("Уч5_Факт_пм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6План)
                    .HasColumnName("Уч6_План")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6ПриходНеделя1)
                    .HasColumnName("Уч6_Приход_Неделя1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6ПриходНеделя2)
                    .HasColumnName("Уч6_Приход_Неделя2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6ПриходНеделя3)
                    .HasColumnName("Уч6_Приход_Неделя3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6ПриходНеделя4)
                    .HasColumnName("Уч6_Приход_Неделя4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6ПриходНеделя5)
                    .HasColumnName("Уч6_Приход_Неделя5")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6ПриходНеделя6)
                    .HasColumnName("Уч6_Приход_Неделя6")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Уч6ФактПм)
                    .HasColumnName("Уч6_Факт_пм")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СводнаяДляПрогнозаУчасткиГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сводная для прогноза_участки_групп");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.Месяц)
                    .IsRequired()
                    .HasMaxLength(8);

                entity.Property(e => e.Уч1План).HasColumnName("Уч1_План");

                entity.Property(e => e.Уч1ПриходНеделя1).HasColumnName("Уч1_Приход_Неделя1");

                entity.Property(e => e.Уч1ПриходНеделя2).HasColumnName("Уч1_Приход_Неделя2");

                entity.Property(e => e.Уч1ПриходНеделя3).HasColumnName("Уч1_Приход_Неделя3");

                entity.Property(e => e.Уч1ПриходНеделя4).HasColumnName("Уч1_Приход_Неделя4");

                entity.Property(e => e.Уч1ПриходНеделя5).HasColumnName("Уч1_Приход_Неделя5");

                entity.Property(e => e.Уч1ПриходНеделя6).HasColumnName("Уч1_Приход_Неделя6");

                entity.Property(e => e.Уч1ФактПм).HasColumnName("Уч1_Факт_пм");

                entity.Property(e => e.Уч2План).HasColumnName("Уч2_План");

                entity.Property(e => e.Уч2ПриходНеделя1).HasColumnName("Уч2_Приход_Неделя1");

                entity.Property(e => e.Уч2ПриходНеделя2).HasColumnName("Уч2_Приход_Неделя2");

                entity.Property(e => e.Уч2ПриходНеделя3).HasColumnName("Уч2_Приход_Неделя3");

                entity.Property(e => e.Уч2ПриходНеделя4).HasColumnName("Уч2_Приход_Неделя4");

                entity.Property(e => e.Уч2ПриходНеделя5).HasColumnName("Уч2_Приход_Неделя5");

                entity.Property(e => e.Уч2ПриходНеделя6).HasColumnName("Уч2_Приход_Неделя6");

                entity.Property(e => e.Уч2ФактПм).HasColumnName("Уч2_Факт_пм");

                entity.Property(e => e.Уч3План).HasColumnName("Уч3_План");

                entity.Property(e => e.Уч3ПриходНеделя1).HasColumnName("Уч3_Приход_Неделя1");

                entity.Property(e => e.Уч3ПриходНеделя2).HasColumnName("Уч3_Приход_Неделя2");

                entity.Property(e => e.Уч3ПриходНеделя3).HasColumnName("Уч3_Приход_Неделя3");

                entity.Property(e => e.Уч3ПриходНеделя4).HasColumnName("Уч3_Приход_Неделя4");

                entity.Property(e => e.Уч3ПриходНеделя5).HasColumnName("Уч3_Приход_Неделя5");

                entity.Property(e => e.Уч3ПриходНеделя6).HasColumnName("Уч3_Приход_Неделя6");

                entity.Property(e => e.Уч3ФактПм).HasColumnName("Уч3_Факт_пм");

                entity.Property(e => e.Уч4План).HasColumnName("Уч4_План");

                entity.Property(e => e.Уч4ПриходНеделя1).HasColumnName("Уч4_Приход_Неделя1");

                entity.Property(e => e.Уч4ПриходНеделя2).HasColumnName("Уч4_Приход_Неделя2");

                entity.Property(e => e.Уч4ПриходНеделя3).HasColumnName("Уч4_Приход_Неделя3");

                entity.Property(e => e.Уч4ПриходНеделя4).HasColumnName("Уч4_Приход_Неделя4");

                entity.Property(e => e.Уч4ПриходНеделя5).HasColumnName("Уч4_Приход_Неделя5");

                entity.Property(e => e.Уч4ПриходНеделя6).HasColumnName("Уч4_Приход_Неделя6");

                entity.Property(e => e.Уч4ФактПм).HasColumnName("Уч4_Факт_пм");

                entity.Property(e => e.Уч5План).HasColumnName("Уч5_План");

                entity.Property(e => e.Уч5ПриходНеделя1).HasColumnName("Уч5_Приход_Неделя1");

                entity.Property(e => e.Уч5ПриходНеделя2).HasColumnName("Уч5_Приход_Неделя2");

                entity.Property(e => e.Уч5ПриходНеделя3).HasColumnName("Уч5_Приход_Неделя3");

                entity.Property(e => e.Уч5ПриходНеделя4).HasColumnName("Уч5_Приход_Неделя4");

                entity.Property(e => e.Уч5ПриходНеделя5).HasColumnName("Уч5_Приход_Неделя5");

                entity.Property(e => e.Уч5ПриходНеделя6).HasColumnName("Уч5_Приход_Неделя6");

                entity.Property(e => e.Уч5ФактПм).HasColumnName("Уч5_Факт_пм");

                entity.Property(e => e.Уч6План).HasColumnName("Уч6_План");

                entity.Property(e => e.Уч6ПриходНеделя1).HasColumnName("Уч6_Приход_Неделя1");

                entity.Property(e => e.Уч6ПриходНеделя2).HasColumnName("Уч6_Приход_Неделя2");

                entity.Property(e => e.Уч6ПриходНеделя3).HasColumnName("Уч6_Приход_Неделя3");

                entity.Property(e => e.Уч6ПриходНеделя4).HasColumnName("Уч6_Приход_Неделя4");

                entity.Property(e => e.Уч6ПриходНеделя5).HasColumnName("Уч6_Приход_Неделя5");

                entity.Property(e => e.Уч6ПриходНеделя6).HasColumnName("Уч6_Приход_Неделя6");

                entity.Property(e => e.Уч6ФактПм).HasColumnName("Уч6_Факт_пм");
            });

            modelBuilder.Entity<СводнаяПоЗаказамСданоОтгружено>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сводная по заказам_сдано_отгружено");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Базовый)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтЗавода)
                    .HasColumnName("Дата от завода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Заказчик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Категория).HasMaxLength(256);

                entity.Property(e => e.КоличествоВЗаказе).HasColumnName("Количество в заказе");

                entity.Property(e => e.КоличествоВСчетах)
                    .HasColumnName("Количество в счетах")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоСдано)
                    .HasColumnName("Количество сдано")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗавода)
                    .HasColumnName("Номер завода")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.Описание).HasMaxLength(250);

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.ПринятоВПроизводство)
                    .HasColumnName("Принято в производство")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.РегионЗаказчика)
                    .IsRequired()
                    .HasColumnName("Регион Заказчика")
                    .HasMaxLength(70);

                entity.Property(e => e.Статус).HasMaxLength(50);

                entity.Property(e => e.ТребуемаяДатаОтЗаказчика)
                    .HasColumnName("Требуемая дата от заказчика")
                    .HasColumnType("datetime");
            });

            modelBuilder.Entity<СводнаяРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сводная регион");

                entity.HasIndex(e => new { e.Id, e.Регион })
                    .HasName("IX_Сводная регион")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Август).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Апрель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Декабрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Июнь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Май).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Март).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Ноябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Октябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сентябрь).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Февраль).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<СданоПоЗаказу>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сдано по заказу");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Где)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаПервойСдачи).HasColumnName("Дата первой сдачи");

                entity.Property(e => e.ДатаПоследнейСдачи)
                    .HasColumnName("Дата последней сдачи")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<СданоПоЗаказуBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сдано по заказу_BG");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.NSub)
                    .HasColumnName("N_SUB")
                    .HasMaxLength(20);

                entity.Property(e => e.OrderNo)
                    .HasColumnName("Order No")
                    .HasMaxLength(50);

                entity.Property(e => e.Где)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаПерваяКазанлык)
                    .HasColumnName("Дата_первая_Казанлык")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПоследнейСдачи)
                    .HasColumnName("Дата последней сдачи")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<СданоПоЗаказуВУзловой>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сдано по заказу в Узловой");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаПерваяУзловая)
                    .HasColumnName("Дата_первая_Узловая")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<СданоПоЗаказуВЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сдано по заказу в ЦО");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<СданоПоЗаказуСДатами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сдано по заказу с датами");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Где)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаПоследнейСдачи)
                    .HasColumnName("Дата последней сдачи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<СебестоимостьРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Себестоимость регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Цена)
                    .HasColumnName("Цена_")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<Сезонность>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Месяц)
                    .HasName("IX_Сезонность")
                    .IsUnique();

                entity.Property(e => e.Коэффициент).HasColumnType("decimal(4, 2)");

                entity.Property(e => e.КоэффициентСпецзаказов)
                    .HasColumnName("Коэффициент_спецзаказов")
                    .HasColumnType("decimal(4, 2)");
            });

            modelBuilder.Entity<СезонностьПоГруппам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сезонность по группам");

                entity.HasIndex(e => new { e.Гр, e.Месяц })
                    .HasName("IX_Сезонность по группам")
                    .IsUnique();

                entity.Property(e => e.Коэффициент).HasColumnType("decimal(4, 2)");
            });

            modelBuilder.Entity<СервисРасширенныйОтчет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сервис расширенный отчет");

                entity.Property(e => e.Expr1).HasMaxLength(100);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Srok)
                    .HasColumnName("srok")
                    .HasMaxLength(50);

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.АктРассмотренияРекламации)
                    .HasColumnName("Акт рассмотрения рекламации")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВыездМастера).HasColumnName("Выезд мастера");

                entity.Property(e => e.ДатаАкта)
                    .HasColumnName("Дата акта")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаВвода).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗакрытоФилиалом)
                    .HasColumnName("Дата закрыто филиалом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИзделия)
                    .HasColumnName("Дата изделия")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИсполнения)
                    .HasColumnName("Дата исполнения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИсполненияПоПлану)
                    .HasColumnName("Дата исполнения по плану")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Замок).HasMaxLength(100);

                entity.Property(e => e.Затрата).HasMaxLength(200);

                entity.Property(e => e.ЗатратыСклада)
                    .HasColumnName("Затраты склада")
                    .HasColumnType("money");

                entity.Property(e => e.ЗатратыТранспортировки)
                    .HasColumnName("Затраты транспортировки")
                    .HasColumnType("money");

                entity.Property(e => e.ЗатратыФилиала)
                    .HasColumnName("Затраты филиала")
                    .HasColumnType("money");

                entity.Property(e => e.КлеймоИсполнителя)
                    .HasColumnName("Клеймо исполнителя")
                    .HasMaxLength(50);

                entity.Property(e => e.Код).HasMaxLength(5);

                entity.Property(e => e.КодДефекта)
                    .HasColumnName("Код дефекта")
                    .HasMaxLength(4);

                entity.Property(e => e.КодПоддефекта)
                    .HasColumnName("код поддефекта")
                    .HasMaxLength(4);

                entity.Property(e => e.КомуПереданоЗмк)
                    .HasColumnName("Кому передано ЗМК")
                    .HasMaxLength(60);

                entity.Property(e => e.КорректирующиеДействия)
                    .HasColumnName("Корректирующие действия")
                    .HasMaxLength(255);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НеУчтеноЗмк).HasColumnName("Не учтено ЗМК");

                entity.Property(e => e.НеобходимыеЗЧ)
                    .HasColumnName("Необходимые з/ч")
                    .HasMaxLength(255);

                entity.Property(e => e.ОписаниеДефекта)
                    .HasColumnName("Описание дефекта")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтчетЗмк)
                    .HasColumnName("Отчет ЗМК")
                    .HasMaxLength(60);

                entity.Property(e => e.ПереданныеЗЧ)
                    .HasColumnName("Переданные з/ч")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик).HasMaxLength(100);

                entity.Property(e => e.ПринятоеРешение)
                    .HasColumnName("Принятое решение")
                    .HasMaxLength(255);

                entity.Property(e => e.РекламацияПризнана)
                    .HasColumnName("Рекламация признана")
                    .HasMaxLength(3);

                entity.Property(e => e.Решение).HasMaxLength(50);

                entity.Property(e => e.СерийныйНомер)
                    .HasColumnName("Серийный номер")
                    .HasMaxLength(50);

                entity.Property(e => e.СкладОтгрузки)
                    .HasColumnName("Склад отгрузки")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипКлиента).HasColumnName("Тип клиента");

                entity.Property(e => e.ТипПродукции)
                    .HasColumnName("Тип продукции")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Филиал).HasMaxLength(70);

                entity.Property(e => e.ФинансовыеПотери)
                    .HasColumnName("Финансовые потери")
                    .HasColumnType("money");

                entity.Property(e => e.Хар).HasMaxLength(150);

                entity.Property(e => e.ШтампОтк)
                    .HasColumnName("Штамп ОТК")
                    .HasMaxLength(60);
            });

            modelBuilder.Entity<Сканируем>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.НомерНакладной, e.ШтрихКод, e.IdТовара, e.ДилерКлиент, e.Кто, e.Префикс })
                    .HasName("IX_Сканируем")
                    .IsUnique();

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КоличествоСчитано)
                    .HasColumnName("Количество считано")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Кто).HasDefaultValueSql("((0))");

                entity.Property(e => e.Модель).HasMaxLength(50);

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Префикс).HasDefaultValueSql("((0))");

                entity.Property(e => e.ШтрихКод)
                    .IsRequired()
                    .HasColumnName("Штрих_Код")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СканируемГруппы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сканируем группы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КоличествоСчитано).HasColumnName("Количество считано");

                entity.Property(e => e.Модель).HasMaxLength(50);

                entity.Property(e => e.НомерНакладной).HasColumnName("Номер накладной");

                entity.Property(e => e.ШтрихКод)
                    .IsRequired()
                    .HasColumnName("Штрих_Код")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СканируемГруппыУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сканируем группы УЗМК");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КоличествоСчитано).HasColumnName("Количество считано");

                entity.Property(e => e.Модель).HasMaxLength(50);

                entity.Property(e => e.НомерНакладной).HasColumnName("Номер накладной");

                entity.Property(e => e.ШтрихКод)
                    .IsRequired()
                    .HasColumnName("Штрих_Код")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СканируемУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сканируем УЗМК");

                entity.HasIndex(e => new { e.НомерНакладной, e.IdТовара, e.ДилерКлиент, e.Кто, e.Префикс, e.ШтрихКод })
                    .HasName("IX_Сканируем УЗМК")
                    .IsUnique();

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КоличествоСчитано)
                    .HasColumnName("Количество считано")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Кто).HasDefaultValueSql("((0))");

                entity.Property(e => e.Модель).HasMaxLength(50);

                entity.Property(e => e.НомерНакладной)
                    .HasColumnName("Номер накладной")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Префикс).HasDefaultValueSql("((0))");

                entity.Property(e => e.ШтрихКод)
                    .IsRequired()
                    .HasColumnName("Штрих_Код")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СканируемЯчейки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сканируем ячейки");

                entity.HasIndex(e => new { e.НомерНакладной, e.Время, e.ШтрихКод, e.Адрес, e.Кто, e.ДилерКлиент, e.Префикс })
                    .HasName("IX_Сканируем ячейки")
                    .IsUnique();

                entity.Property(e => e.Время).HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Кто).HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерНакладной).HasColumnName("Номер накладной");

                entity.Property(e => e.ШтрихКод)
                    .IsRequired()
                    .HasColumnName("Штрих-Код")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СкидкиДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Скидки дилеров");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.СкидкаГруппа)
                    .HasColumnName("Скидка_группа")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СкидкаМодель).HasColumnName("Скидка_модель");

                entity.Property(e => e.СкидкаПодгруппа)
                    .HasColumnName("Скидка_подгруппа")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СкидкиДилеровГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Скидки дилеров_групп");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Группа)
                    .HasColumnName("группа")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Модель).HasColumnName("модель");

                entity.Property(e => e.Подгруппа)
                    .HasColumnName("подгруппа")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СкидкиДилеровГруппРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Скидки дилеров_групп регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Группа)
                    .HasColumnName("группа")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Модель).HasColumnName("модель");

                entity.Property(e => e.Подгруппа)
                    .HasColumnName("подгруппа")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СкидкиДилеровПоПодгруппам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки дилеров по подгруппам");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Скидки дилеров по подгруппам")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdДилера, e.IdПодгруппы })
                    .HasName("IX_Скидки дилеров по подгруппам_1")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПодгруппы)
                    .HasColumnName("ID подгруппы")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СкидкиДилеровПоПодгруппамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки дилеров по подгруппам регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Скидки дилеров по подгруппам регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdДилера, e.IdПодгруппы, e.Регион })
                    .HasName("IX_Скидки дилеров по подгруппам регион_1")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПодгруппы)
                    .HasColumnName("ID подгруппы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СкидкиДилеровРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Скидки дилеров регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.СкидкаГруппа)
                    .HasColumnName("Скидка_группа")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СкидкаМодель).HasColumnName("Скидка_модель");

                entity.Property(e => e.СкидкаПодгруппа)
                    .HasColumnName("Скидка_подгруппа")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СкидкиДляКрыма>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки для Крыма");

                entity.HasIndex(e => e.IdПодгруппы)
                    .HasName("IX_Скидки для Крыма")
                    .IsUnique();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.Скидка).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<СкидкиПоДилерам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки по дилерам");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Скидки по дилерам")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СкидкиПоДилерамНовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки по дилерам_нов регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Скидки по дилерам_нов регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdГруппы, e.IdДилера, e.Регион })
                    .HasName("IX_Скидки по дилерам_нов регион_1")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СкидкиПоДилерамПоТоварам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки по дилерам по товарам");

                entity.HasIndex(e => new { e.IdДилера, e.IdТовара })
                    .HasName("IX_Скидки по дилерам по товарам")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СкидкиПоДилерамПоТоварамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки по дилерам по товарам регион");

                entity.HasIndex(e => new { e.IdДилера, e.IdТовара, e.Регион })
                    .HasName("IX_Скидки по дилерам по товарам регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СкидкиПоДилерамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки по дилерам регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Скидки по дилерам регион")
                    .IsUnique();

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Скидки по дилерам регион_2");

                entity.HasIndex(e => new { e.IdГруппы, e.IdДилера, e.Регион })
                    .HasName("IX_Скидки по дилерам регион_1")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Скидка)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СкидкиПоОбъемам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки по объемам");

                entity.HasIndex(e => e.Группа)
                    .HasName("IX_Скидки по объемам")
                    .IsUnique();

                entity.Property(e => e.Объем).HasColumnType("decimal(12, 0)");

                entity.Property(e => e.Скидка).HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<СкидкиПоСкладамПоТоварамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Скидки по складам по товарам регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СкидкиПоСкладамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Скидки по складам регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Скидки по складам регион")
                    .IsUnique();

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Скидки по складам регион_2");

                entity.HasIndex(e => new { e.IdГруппы, e.IdДилера, e.Регион })
                    .HasName("IX_Скидки по складам регион_1")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СкладТовар>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Склад-товар");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<СкладыФилиалы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Склады_филиалы");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наимен).HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(10);

                entity.Property(e => e.Примечание).HasMaxLength(100);
            });

            modelBuilder.Entity<СколькоСчетов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сколько счетов");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.КолВоСчетов).HasColumnName("Кол-во счетов");
            });

            modelBuilder.Entity<Следы>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Форма, e.Когда, e.Кто, e.Филиал })
                    .HasName("IX_Следы")
                    .IsUnique();

                entity.Property(e => e.Когда).HasColumnType("datetime");

                entity.Property(e => e.Форма).HasMaxLength(50);
            });

            modelBuilder.Entity<СовместныйСписокТоваровВСчетеЗаявке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Совместный список товаров в счете-заявке");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СовместныйСписокТоваровВСчетеЗаявкеОтгр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Совместный список товаров в счете-заявке отгр");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.РасчетноеКоличество)
                    .HasColumnName("Расчетное количество")
                    .HasColumnType("decimal(38, 12)");

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ФактМест).HasColumnName("Факт мест");
            });

            modelBuilder.Entity<СовместныйСписокТоваровВСчетеЗаявкеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Совместный список товаров в счете-заявке регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecVosst).HasColumnName("rec_vosst");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоВНалоговой)
                    .HasColumnName("Количество в налоговой")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.КоличествоВСчете)
                    .HasColumnName("Количество в счете")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.План).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СоответсвиеСубсчетСтатья>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Соответсвие субсчет-статья");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Соответсвие субсчет-статья")
                    .IsUnique();

                entity.Property(e => e.Код).ValueGeneratedOnAdd();

                entity.Property(e => e.Субсчет).HasMaxLength(1);
            });

            modelBuilder.Entity<СоответствиеCashInc>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Соответствие Cash-Inc");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Соответствие Cash-Inc")
                    .IsUnique();

                entity.Property(e => e.IncomeStatement)
                    .HasColumnName("Income Statement")
                    .HasMaxLength(255);

                entity.Property(e => e.KodCash)
                    .HasColumnName("Kod_cash")
                    .HasMaxLength(6);

                entity.Property(e => e.KodInc)
                    .HasColumnName("Kod_inc")
                    .HasMaxLength(6);

                entity.Property(e => e.Слагаемые).HasMaxLength(50);
            });

            modelBuilder.Entity<СоответствиеПараметрГрафаБаланс>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Соответствие параметр_графа_баланс");

                entity.HasIndex(e => e.Параметр)
                    .HasName("IX_Соответствие параметр_графа_баланс")
                    .IsUnique();

                entity.Property(e => e.Графа)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СоответствиеПлательщикФирма>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Соответствие Плательщик-Фирма");

                entity.HasIndex(e => new { e.IdФирмыТо, e.ДилерКлиент, e.IdКомпании })
                    .HasName("IX_Соответствие Плательщик-Фирма")
                    .IsUnique();

                entity.Property(e => e.IdКомпании).HasColumnName("ID компании");

                entity.Property(e => e.IdФирмыТо).HasColumnName("ID фирмы ТО");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_Клиент");
            });

            modelBuilder.Entity<СоответствиеФилиалФирма>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Соответствие филиал-фирма");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Соответствие филиал-фирма")
                    .IsUnique();

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа).HasColumnName("Вид платежа");
            });

            modelBuilder.Entity<СостояниеПартияВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("СостояниеПартияВсе регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SebR).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СостояниеПартияГлРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("СостояниеПартияГл регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SebR).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СостояниеПартияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("СостояниеПартия регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Seb).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SebR).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СостояниеСклада>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Состояние склада");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.RasVse)
                    .HasColumnName("ras_vse")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаРуб)
                    .HasColumnName("Базовая цена руб")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");
            });

            modelBuilder.Entity<СостояниеСкладаДляПечатиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Состояние склада для печати регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Всего).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Категория).HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СостояниеСкладаНаДень>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Состояние склада на день");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Состояние склада на день")
                    .IsUnique();

                entity.Property(e => e.DielerPrice)
                    .HasColumnName("Dieler price")
                    .HasColumnType("money");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СостояниеСкладаПоДням>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Состояние склада по дням");

                entity.HasIndex(e => new { e.IdГруппы, e.Регион, e.Дата })
                    .HasName("IX_Состояние склада по дням")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.СуммаСсРуб).HasColumnName("Сумма_сс_руб");
            });

            modelBuilder.Entity<Сотрудники>(entity =>
            {
                entity.HasKey(e => e.ЛичныйНомер)
                    .HasName("Сотрудники_pk");

                entity.HasIndex(e => e.IdСтатьиAdmin)
                    .HasName("Отбор_5");

                entity.HasIndex(e => e.IdСтатьиDib)
                    .HasName("Отбор_4");

                entity.HasIndex(e => e.IdСтатьиOae)
                    .HasName("Отбор_6");

                entity.HasIndex(e => e.IdСтатьиTpo)
                    .HasName("Отбор_3");

                entity.HasIndex(e => e.IdСтатьиЗавод)
                    .HasName("Отбор_2");

                entity.HasIndex(e => e.IdСтатьиСейф)
                    .HasName("Отбор_1");

                entity.HasIndex(e => e.IdСтатьиУзмк)
                    .HasName("Отбор_7");

                entity.HasIndex(e => e.Фио);

                entity.HasIndex(e => new { e.ЛичныйНомер, e.Hid, e.Статус })
                    .HasName("IX_Сотрудники_2");

                entity.HasIndex(e => new { e.Фио, e.Имя, e.Отчество, e.Фирма, e.IdФирмы, e.Hid })
                    .HasName("IX_Сотрудники_1")
                    .IsUnique();

                entity.Property(e => e.ЛичныйНомер)
                    .HasColumnName("Личный номер")
                    .ValueGeneratedNever();

                entity.Property(e => e.DibПроц).HasColumnName("dib_проц");

                entity.Property(e => e.Hid)
                    .HasColumnName("HID")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПроходная).HasColumnName("ID проходная");

                entity.Property(e => e.IdСтатьиAdmin).HasColumnName("ID статьи_admin");

                entity.Property(e => e.IdСтатьиDib).HasColumnName("ID статьи_dib");

                entity.Property(e => e.IdСтатьиOae).HasColumnName("ID статьи_oae");

                entity.Property(e => e.IdСтатьиTpo).HasColumnName("ID статьи_tpo");

                entity.Property(e => e.IdСтатьиДвери).HasColumnName("ID статьи_двери");

                entity.Property(e => e.IdСтатьиЗавод).HasColumnName("ID статьи_завод");

                entity.Property(e => e.IdСтатьиМо).HasColumnName("ID статьи_мо");

                entity.Property(e => e.IdСтатьиСейф).HasColumnName("ID статьи_сейф");

                entity.Property(e => e.IdСтатьиУзмк).HasColumnName("ID статьи_узмк");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.OaeПроц).HasColumnName("oae_проц");

                entity.Property(e => e.АвтоматическиПересчитать)
                    .HasColumnName("Автоматически пересчитать")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.АдминПроц).HasColumnName("Админ_проц");

                entity.Property(e => e.АнглийскоеИмя)
                    .HasColumnName("Английское имя")
                    .HasMaxLength(150);

                entity.Property(e => e.БазоваяСтавка)
                    .HasColumnName("Базовая ставка")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.БаллКвалификации).HasColumnName("Балл квалификации");

                entity.Property(e => e.БаллНужности).HasColumnName("Балл нужности");

                entity.Property(e => e.ВалютаЗарплаты).HasColumnName("Валюта зарплаты");

                entity.Property(e => e.География).HasMaxLength(50);

                entity.Property(e => e.ДатаВнесенияИзменений)
                    .HasColumnName("Дата внесения изменений")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДвериПроц).HasColumnName("двери_проц");

                entity.Property(e => e.Должность).HasMaxLength(150);

                entity.Property(e => e.ДолжностьУправленческая)
                    .HasColumnName("Должность управленческая")
                    .HasMaxLength(150);

                entity.Property(e => e.ЗаводПроц).HasColumnName("Завод_проц");

                entity.Property(e => e.Имя).HasMaxLength(100);

                entity.Property(e => e.КодБдр).HasColumnName("Код БДР");

                entity.Property(e => e.КтоВнес).HasColumnName("Кто внес");

                entity.Property(e => e.МетодОплаты)
                    .HasColumnName("Метод оплаты")
                    .HasMaxLength(150);

                entity.Property(e => e.МоПроц).HasColumnName("мо_проц");

                entity.Property(e => e.НомерParex)
                    .HasColumnName("Номер PAREX")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерКредитнойКарточки)
                    .HasColumnName("Номер кредитной карточки")
                    .HasMaxLength(150)
                    .HasDefaultValueSql("(N'Не выдана')");

                entity.Property(e => e.НомерКрыловский)
                    .HasColumnName("Номер Крыловский")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерМаст)
                    .HasColumnName("Номер МАСТ")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерПаспорта)
                    .HasColumnName("Номер паспорта")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерСерии)
                    .HasColumnName("Номер серии")
                    .HasMaxLength(50);

                entity.Property(e => e.Отчество).HasMaxLength(100);

                entity.Property(e => e.ПремияПроц).HasColumnName("Премия_проц");

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.СейфыПроц).HasColumnName("Сейфы_проц");

                entity.Property(e => e.Ставка1с)
                    .HasColumnName("Ставка_1С")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СтавкаВРублях)
                    .HasColumnName("Ставка в рублях")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СтарыйНомер)
                    .HasColumnName("Старый номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Статус).HasDefaultValueSql("((1))");

                entity.Property(e => e.ТпоПроц).HasColumnName("ТПО_проц");

                entity.Property(e => e.УзмкПроц).HasColumnName("узмк_проц");

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(150);

                entity.Property(e => e.ФиоParex)
                    .HasColumnName("ФИО PAREX")
                    .HasMaxLength(150);

                entity.Property(e => e.ФиоКрыловский)
                    .HasColumnName("ФИО Крыловский")
                    .HasMaxLength(150);

                entity.Property(e => e.Фирма).HasMaxLength(4);

                entity.Property(e => e.Фирма1с)
                    .HasColumnName("Фирма_1С")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СотрудникиПроектПроизводства>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сотрудники_проект_производства");

                entity.HasIndex(e => e.ЛичныйНом)
                    .HasName("IX_Сотрудники_проект_производства")
                    .IsUnique();

                entity.Property(e => e.BlgДвери).HasColumnName("blg_двери");

                entity.Property(e => e.BlgЛдсп).HasColumnName("blg_лдсп");

                entity.Property(e => e.BlgМебель).HasColumnName("blg_мебель");

                entity.Property(e => e.BlgМедмеб).HasColumnName("blg_медмеб");

                entity.Property(e => e.BlgМо).HasColumnName("blg_мо");

                entity.Property(e => e.BlgПроммеб).HasColumnName("blg_проммеб");

                entity.Property(e => e.BlgСейф).HasColumnName("blg_сейф");

                entity.Property(e => e.BlgСтелл).HasColumnName("blg_стелл");

                entity.Property(e => e.DibДвери).HasColumnName("dib_двери");

                entity.Property(e => e.DibЛдсп).HasColumnName("dib_лдсп");

                entity.Property(e => e.DibМебель).HasColumnName("dib_мебель");

                entity.Property(e => e.DibМедмеб).HasColumnName("dib_медмеб");

                entity.Property(e => e.DibМо).HasColumnName("dib_мо");

                entity.Property(e => e.DibПроммеб).HasColumnName("dib_проммеб");

                entity.Property(e => e.DibСейф).HasColumnName("dib_сейф");

                entity.Property(e => e.DibСтелл).HasColumnName("dib_стелл");

                entity.Property(e => e.IdСубсчетаРеестра).HasColumnName("ID субсчета реестра");

                entity.Property(e => e.АдмДвери).HasColumnName("адм_двери");

                entity.Property(e => e.АдмЛдсп).HasColumnName("адм_лдсп");

                entity.Property(e => e.АдмМебель).HasColumnName("адм_мебель");

                entity.Property(e => e.АдмМедмеб).HasColumnName("адм_медмеб");

                entity.Property(e => e.АдмМо).HasColumnName("адм_мо");

                entity.Property(e => e.АдмПроммеб).HasColumnName("адм_проммеб");

                entity.Property(e => e.АдмСейф).HasColumnName("адм_сейф");

                entity.Property(e => e.АдмСтелл).HasColumnName("адм_стелл");

                entity.Property(e => e.ДвериДвери).HasColumnName("двери_двери");

                entity.Property(e => e.ДвериЛдсп).HasColumnName("двери_лдсп");

                entity.Property(e => e.ДвериМебель).HasColumnName("двери_мебель");

                entity.Property(e => e.ДвериМедмеб).HasColumnName("двери_медмеб");

                entity.Property(e => e.ДвериМо).HasColumnName("двери_мо");

                entity.Property(e => e.ДвериПроммеб).HasColumnName("двери_проммеб");

                entity.Property(e => e.ДвериСейф).HasColumnName("двери_сейф");

                entity.Property(e => e.ДвериСтелл).HasColumnName("двери_стелл");

                entity.Property(e => e.ЗмкДвери).HasColumnName("змк_двери");

                entity.Property(e => e.ЗмкЛдсп).HasColumnName("змк_лдсп");

                entity.Property(e => e.ЗмкМебель).HasColumnName("змк_мебель");

                entity.Property(e => e.ЗмкМедмеб).HasColumnName("змк_медмеб");

                entity.Property(e => e.ЗмкМо).HasColumnName("змк_мо");

                entity.Property(e => e.ЗмкПроммеб).HasColumnName("змк_проммеб");

                entity.Property(e => e.ЗмкСейф).HasColumnName("змк_сейф");

                entity.Property(e => e.ЗмкСтелл).HasColumnName("змк_стелл");

                entity.Property(e => e.ЛичныйНом).HasColumnName("Личный ном");

                entity.Property(e => e.МоДвери).HasColumnName("мо_двери");

                entity.Property(e => e.МоЛдсп).HasColumnName("мо_лдсп");

                entity.Property(e => e.МоМебель).HasColumnName("мо_мебель");

                entity.Property(e => e.МоМедмеб).HasColumnName("мо_медмеб");

                entity.Property(e => e.МоМо).HasColumnName("мо_мо");

                entity.Property(e => e.МоПроммеб).HasColumnName("мо_проммеб");

                entity.Property(e => e.МоСейф).HasColumnName("мо_сейф");

                entity.Property(e => e.МоСтелл).HasColumnName("мо_стелл");

                entity.Property(e => e.СимДвери).HasColumnName("сим_двери");

                entity.Property(e => e.СимЛдсп).HasColumnName("сим_лдсп");

                entity.Property(e => e.СимМебель).HasColumnName("сим_мебель");

                entity.Property(e => e.СимМедмеб).HasColumnName("сим_медмеб");

                entity.Property(e => e.СимМо).HasColumnName("сим_мо");

                entity.Property(e => e.СимПроммеб).HasColumnName("сим_проммеб");

                entity.Property(e => e.СимСейф).HasColumnName("сим_сейф");

                entity.Property(e => e.СимСтелл).HasColumnName("сим_стелл");

                entity.Property(e => e.ТпоДвери).HasColumnName("тпо_двери");

                entity.Property(e => e.ТпоЛдсп).HasColumnName("тпо_лдсп");

                entity.Property(e => e.ТпоМебель).HasColumnName("тпо_мебель");

                entity.Property(e => e.ТпоМедмеб).HasColumnName("тпо_медмеб");

                entity.Property(e => e.ТпоМо).HasColumnName("тпо_мо");

                entity.Property(e => e.ТпоПроммеб).HasColumnName("тпо_проммеб");

                entity.Property(e => e.ТпоСейф).HasColumnName("тпо_сейф");

                entity.Property(e => e.ТпоСтелл).HasColumnName("тпо_стелл");

                entity.Property(e => e.УзмкДвери).HasColumnName("узмк_двери");

                entity.Property(e => e.УзмкЛдсп).HasColumnName("узмк_лдсп");

                entity.Property(e => e.УзмкМебель).HasColumnName("узмк_мебель");

                entity.Property(e => e.УзмкМедмеб).HasColumnName("узмк_медмеб");

                entity.Property(e => e.УзмкМо).HasColumnName("узмк_мо");

                entity.Property(e => e.УзмкПроммеб).HasColumnName("узмк_проммеб");

                entity.Property(e => e.УзмкСейф).HasColumnName("узмк_сейф");

                entity.Property(e => e.УзмкСтелл).HasColumnName("узмк_стелл");
            });

            modelBuilder.Entity<СотрудникиПроизводства111>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сотрудники_производства111");

                entity.HasIndex(e => new { e.ЛичныйНомер, e.IdПроизв })
                    .HasName("IX_Сотрудники_производства")
                    .IsUnique();

                entity.Property(e => e.IdПроизв).HasColumnName("Id произв");

                entity.Property(e => e.ЛичныйНомер).HasColumnName("Личный номер");

                entity.Property(e => e.Процент).HasColumnName("процент");
            });

            modelBuilder.Entity<СпецПозицииСпецификации>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Спец_Позиции спецификации");

                entity.HasIndex(e => e.IdПозиции)
                    .HasName("IX_Спец_Позиции спецификации")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdСпецификации, e.IdДетали, e.IdМатериала, e.Узел })
                    .HasName("IX_Спец_Позиции спецификации_1")
                    .IsUnique();

                entity.Property(e => e.Idizgot).HasColumnName("IDizgot");

                entity.Property(e => e.IdДетали).HasColumnName("ID детали");

                entity.Property(e => e.IdМатериала).HasColumnName("ID материала");

                entity.Property(e => e.IdМатериалаBg).HasColumnName("ID материала BG");

                entity.Property(e => e.IdМатериалаUzmk).HasColumnName("ID материала UZMK");

                entity.Property(e => e.IdПозиции)
                    .HasColumnName("ID позиции")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdСпецификации).HasColumnName("ID спецификации");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Lit)
                    .HasColumnName("lit")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ЕдИзм).HasColumnName("Ед_изм");

                entity.Property(e => e.ЕдИзмBg).HasColumnName("Ед_изм BG");

                entity.Property(e => e.ЕдИзмUzmk).HasColumnName("Ед_изм UZMK");

                entity.Property(e => e.ЕдИзмерения)
                    .HasColumnName("Ед_измерения")
                    .HasMaxLength(10);

                entity.Property(e => e.Изменилась).HasDefaultValueSql("((1))");

                entity.Property(e => e.КолСборок)
                    .HasColumnName("Кол_сборок")
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЧистое)
                    .HasColumnName("Кол_чистое")
                    .HasColumnType("decimal(12, 5)");

                entity.Property(e => e.КолЧистоеBg)
                    .HasColumnName("Кол_чистое BG")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КолЧистоеUzmk)
                    .HasColumnName("Кол_чистое UZMK")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Количество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КоличествоBg)
                    .HasColumnName("Количество BG")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КоличествоUzmk)
                    .HasColumnName("Количество UZMK")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерПп).HasColumnName("Номер пп");

                entity.Property(e => e.Узел).HasMaxLength(50);

                entity.Property(e => e.УровеньСорт)
                    .HasColumnName("Уровень_сорт")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СпецСписокДеталей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Спец_Список деталей");

                entity.HasIndex(e => e.IdДетали)
                    .HasName("IX_Спец_Список деталей")
                    .IsUnique();

                entity.HasIndex(e => e.Шифр)
                    .HasName("IX_Спец_Список деталей_1")
                    .IsUnique();

                entity.Property(e => e.EanCode)
                    .HasColumnName("EAN_CODE")
                    .HasColumnType("decimal(13, 0)");

                entity.Property(e => e.Idizgot).HasColumnName("IDIZGOT");

                entity.Property(e => e.IdДетали)
                    .HasColumnName("ID детали")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdМатериала)
                    .HasColumnName("ID материала")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserUtvEn).HasColumnName("User_utv_EN");

                entity.Property(e => e.UserUtvKon).HasColumnName("User_utv_kon");

                entity.Property(e => e.UserUtvTech).HasColumnName("User_utv_tech");

                entity.Property(e => e.UtvEn)
                    .HasColumnName("utv_EN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UtvKon)
                    .HasColumnName("utv_kon")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UtvTech)
                    .HasColumnName("utv_tech")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Вес)
                    .HasColumnType("decimal(18, 5)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаИзменения)
                    .HasColumnName("Дата_изменения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИзмененияEn)
                    .HasColumnName("Дата_изменения_EN")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИзмененияTech)
                    .HasColumnName("Дата_изменения_tech")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерЧертежа)
                    .HasColumnName("Номер чертежа")
                    .HasMaxLength(20);

                entity.Property(e => e.Периметр).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Площадь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Чертеж).HasColumnType("image");

                entity.Property(e => e.ЧертежPdf)
                    .HasColumnName("Чертеж_PDF")
                    .HasColumnType("image");

                entity.Property(e => e.ЧертежИзменен)
                    .HasColumnName("Чертеж изменен")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Шифр).HasMaxLength(20);
            });

            modelBuilder.Entity<СпецШапкаСпецификации>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Спец_Шапка спецификации");

                entity.HasIndex(e => e.IdСпецификации)
                    .HasName("IX_Спец_Шапка спецификации")
                    .IsUnique();

                entity.Property(e => e.IdСпецификации)
                    .HasColumnName("ID спецификации")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserUtvEn)
                    .HasColumnName("User utv_en")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserUtvKon)
                    .HasColumnName("User utv_kon")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserUtvTech)
                    .HasColumnName("User utv_tech")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserUtvZak)
                    .HasColumnName("User utv_zak")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UtvEn).HasColumnName("utv_en");

                entity.Property(e => e.UtvKon)
                    .HasColumnName("utv_kon")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UtvTech).HasColumnName("utv_tech");

                entity.Property(e => e.UtvZak).HasColumnName("utv_zak");

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаНачала)
                    .HasColumnName("Дата начала")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтвEn)
                    .HasColumnName("Дата утв en")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтвKon)
                    .HasColumnName("Дата утв kon")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтвTech)
                    .HasColumnName("Дата утв tech")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаУтвZak)
                    .HasColumnName("Дата утв zak")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Утверждена).HasDefaultValueSql("((0))");

                entity.Property(e => e.УшлоВАсуп).HasColumnName("Ушло в АСУП");
            });

            modelBuilder.Entity<СпецификацияТрудозатрат>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Спецификация трудозатрат");

                entity.HasIndex(e => new { e.IdТехпроцесса, e.IdБазы })
                    .HasName("IX_Спецификация трудозатрат")
                    .IsUnique();

                entity.Property(e => e.IdБазы).HasColumnName("ID базы");

                entity.Property(e => e.IdТехпроцесса).HasColumnName("ID техпроцесса");

                entity.Property(e => e.Расценка).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Трудоемкость).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СпецценыДляСебестоимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Спеццены для себестоимости");

                entity.HasIndex(e => new { e.IdТовара, e.IdПлощадки })
                    .HasName("IX_Спеццены для себестоимости")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdПлощадки)
                    .HasColumnName("ID площадки")
                    .HasDefaultValueSql("((44))");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("((44))");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasDefaultValueSql("((20))");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписаниеПриход>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Списание_приход");

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.ВыражениеСпр)
                    .HasColumnName("Выражение_спр")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СпискоБалловПоГруппеОценкиДилера>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Списко баллов по группе оценки дилера");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Списко баллов по группе оценки дилера")
                    .IsUnique();

                entity.Property(e => e.ГруппаСкидки).HasColumnName("Группа скидки");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");

                entity.Property(e => e.СмпрДо).HasColumnName("СМПР_до");

                entity.Property(e => e.СмпрОт).HasColumnName("СМПР_от");
            });

            modelBuilder.Entity<СпискоСкладов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Списко складов_");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.IdГородаПочт).HasColumnName("ID города_почт");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Директор).HasMaxLength(50);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.ИндексПочт)
                    .HasColumnName("Индекс_почт")
                    .HasMaxLength(6);

                entity.Property(e => e.НомерТелефона)
                    .HasColumnName("Номер телефона")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(100);

                entity.Property(e => e.Скл).HasMaxLength(10);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УлицаДомПочт)
                    .HasColumnName("Улица_дом_почт")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СпискоСчетовДляСканированияУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Списко счетов для сканирования УЗМК");

                entity.Property(e => e.Dil).HasColumnName("dil");
            });

            modelBuilder.Entity<СписокАдресовДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список адресов дилеров");

                entity.HasIndex(e => e.IdАдреса)
                    .HasName("IX_Список адресов дилеров")
                    .IsUnique();

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_Список адресов дилеров_1");

                entity.Property(e => e.Deleted).HasDefaultValueSql("(0)");

                entity.Property(e => e.Gln)
                    .HasColumnName("GLN")
                    .HasMaxLength(20);

                entity.Property(e => e.IdАдреса)
                    .HasColumnName("ID адреса")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .IsRequired()
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Телефон).HasMaxLength(20);

                entity.Property(e => e.ТипЦены)
                    .HasColumnName("Тип цены")
                    .HasMaxLength(1)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокАдресовДилеровРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список адресов дилеров регион");

                entity.HasIndex(e => e.IdАдреса)
                    .HasName("IX_Список адресов дилеров регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdДилера, e.Регион })
                    .HasName("IX_Список адресов дилеров регион_1");

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.Gln)
                    .HasColumnName("GLN")
                    .HasMaxLength(20);

                entity.Property(e => e.IdАдреса)
                    .HasColumnName("ID адреса")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .IsRequired()
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Телефон).HasMaxLength(20);

                entity.Property(e => e.ТипЦены)
                    .HasColumnName("Тип цены")
                    .HasMaxLength(4)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокАдресовКлиентов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список адресов клиентов");

                entity.HasIndex(e => e.IdАдреса)
                    .HasName("IX_Список адресов клиентов")
                    .IsUnique();

                entity.HasIndex(e => e.IdКлиента)
                    .HasName("IX_Список адресов клиентов_1");

                entity.Property(e => e.IdАдреса)
                    .HasColumnName("ID адреса")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdКлиента)
                    .HasColumnName("ID клиента")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .IsRequired()
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.КппДляСф)
                    .HasColumnName("КПП для СФ")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокАртикуловАшан>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов АШАН");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов АШАН")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СписокАртикуловДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов дилеров");

                entity.HasIndex(e => new { e.IdТовара, e.IdДилера })
                    .HasName("IX_Список артикулов дилеров")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.ArtikulMgb)
                    .HasColumnName("Artikul MGB")
                    .HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловДилеровРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов дилеров регион");

                entity.HasIndex(e => new { e.IdТовара, e.IdДилера, e.Регион })
                    .HasName("IX_Список артикулов дилеров регион")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.ArtikulMgb)
                    .HasColumnName("Artikul MGB")
                    .HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(255);
            });

            modelBuilder.Entity<СписокАртикуловЕпицентр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Епицентр");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Епицентр")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СписокАртикуловЗельгрос>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Зельгрос");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Зельгрос")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СписокАртикуловКасторама>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Касторама");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Касторама")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловКлиентов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов клиентов");

                entity.HasIndex(e => new { e.IdТовара, e.IdКлиента })
                    .HasName("IX_Список артикулов клиентов")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловКомус>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов КОМУС");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов КОМУС")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокАртикуловЛеруа>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Леруа");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Леруа")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловОби>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов ОБИ");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов ОБИ")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловОбиКв>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов ОБИ кв");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов ОБИ кв")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловПрагматик>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Прагматик");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Прагматик")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокАртикуловПрактикер>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Практикер");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Практикер")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СписокАртикуловРаут>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов РАУТ");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов РАУТ")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловСбербанк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов СБЕРБАНК");

                entity.HasIndex(e => new { e.IdТовара, e.IdКлиента })
                    .HasName("IX_Список артикулов СБЕРБАНК")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокАртикуловСтарт>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов СТАРТ");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов СТАРТ")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Наименование)
                    .HasMaxLength(100)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокАртикуловСтройдепо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Стройдепо");

                entity.HasIndex(e => e.Artikul)
                    .HasName("IX_Список артикулов Стройдепо_1");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Стройдепо")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Ean)
                    .HasColumnName("EAN")
                    .HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СписокАртикуловХоумСентерз>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список артикулов Хоум Сентерз");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список артикулов Хоум Сентерз")
                    .IsUnique();

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СписокБалловПоOrrДни>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по ORR_дни");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по ORR_дни")
                    .IsUnique();

                entity.Property(e => e.ДнДо).HasColumnName("Дн_до");

                entity.Property(e => e.ДнОт).HasColumnName("Дн_от");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоOrrПроц>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по ORR_проц");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по ORR_проц")
                    .IsUnique();

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");

                entity.Property(e => e.ПроцДо).HasColumnName("Проц_до");

                entity.Property(e => e.ПроцОт).HasColumnName("Проц_от");
            });

            modelBuilder.Entity<СписокБалловПоRoce>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по ROCE");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по ROCE")
                    .IsUnique();

                entity.Property(e => e.RoceДо)
                    .HasColumnName("ROCE_до")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.RoceОт)
                    .HasColumnName("ROCE_от")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоДз>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по ДЗ");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по ДЗ")
                    .IsUnique();

                entity.Property(e => e.БаллДз).HasColumnName("Балл_ДЗ");

                entity.Property(e => e.ДзДо).HasColumnName("ДЗ_до");

                entity.Property(e => e.ДзОт).HasColumnName("ДЗ_от");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоДолеOrr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по доле ORR");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по доле ORR")
                    .IsUnique();

                entity.Property(e => e.ДоляДо)
                    .HasColumnName("Доля_до")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ДоляОт)
                    .HasColumnName("Доля_от")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоДолеМесяцев>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по доле месяцев");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по доле месяцев")
                    .IsUnique();

                entity.Property(e => e.ДоляДо)
                    .HasColumnName("Доля_до")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ДоляОт)
                    .HasColumnName("Доля_от")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоДоходности>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по доходности");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по доходности")
                    .IsUnique();

                entity.Property(e => e.ДохДо)
                    .HasColumnName("Дох_до")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ДохОт)
                    .HasColumnName("Дох_от")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоКин>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по Кин");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по Кин")
                    .IsUnique();

                entity.Property(e => e.ДнДо).HasColumnName("Дн_до");

                entity.Property(e => e.ДнОт).HasColumnName("Дн_от");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");

                entity.Property(e => e.СрокОтсрочки)
                    .HasColumnName("Срок отсрочки")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.СрокОтсрочкиДо)
                    .HasColumnName("Срок отсрочки_до")
                    .HasColumnType("decimal(6, 3)");
            });

            modelBuilder.Entity<СписокБалловПоКоб>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по Коб");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по оплате")
                    .IsUnique();

                entity.Property(e => e.КобДо).HasColumnName("Коб_до");

                entity.Property(e => e.КобОт).HasColumnName("Коб_от");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоЛояльности>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по лояльности");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по лояльности")
                    .IsUnique();

                entity.Property(e => e.ЛоялДо).HasColumnName("Лоял_до");

                entity.Property(e => e.ЛоялОт).HasColumnName("Лоял_от");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоОтсрочке>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по отсрочке");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по отсрочке")
                    .IsUnique();

                entity.Property(e => e.ДнДо).HasColumnName("Дн_до");

                entity.Property(e => e.ДнОт).HasColumnName("Дн_от");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");
            });

            modelBuilder.Entity<СписокБалловПоСмпр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по смпр");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по смпр")
                    .IsUnique();

                entity.Property(e => e.ГруппаСкидки).HasColumnName("Группа скидки");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");

                entity.Property(e => e.СмпрДо)
                    .HasColumnName("СМПР_до")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СмпрОт)
                    .HasColumnName("СМПР_от")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокБалловПоТемпам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по темпам");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по темпам")
                    .IsUnique();

                entity.Property(e => e.ГруппаСкидки).HasColumnName("Группа скидки");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");

                entity.Property(e => e.СмпрДо).HasColumnName("СМПР_до");

                entity.Property(e => e.СмпрОт).HasColumnName("СМПР_от");
            });

            modelBuilder.Entity<СписокБалловПоТемпамРоста>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список баллов по темпам роста");

                entity.HasIndex(e => e.НомерСтроки)
                    .HasName("IX_Список баллов по темпам роста")
                    .IsUnique();

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");

                entity.Property(e => e.ТемпДо)
                    .HasColumnName("Темп_до")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ТемпОт)
                    .HasColumnName("Темп_от")
                    .HasColumnType("decimal(5, 2)");
            });

            modelBuilder.Entity<СписокВидовОплат>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список видов оплат");

                entity.HasIndex(e => e.IdВида)
                    .HasName("IX_Список видов оплат")
                    .IsUnique();

                entity.Property(e => e.IdВида)
                    .HasColumnName("ID вида")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ВидОплаты)
                    .IsRequired()
                    .HasColumnName("Вид оплаты")
                    .HasMaxLength(70);
            });

            modelBuilder.Entity<СписокВидовПлатежей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список видов платежей");

                entity.HasIndex(e => e.Idплатежа)
                    .HasName("IX_Список видов платежей")
                    .IsUnique();

                entity.Property(e => e.Idплатежа)
                    .HasColumnName("IDплатежа")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ВидПлатежа)
                    .HasColumnName("Вид платежа")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВидовТранспорта>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список видов транспорта");

                entity.HasIndex(e => e.IdВидаТранспорта)
                    .HasName("IX_Список видов транспорта")
                    .IsUnique();

                entity.Property(e => e.IdВидаТранспорта).HasColumnName("ID вида_транспорта");

                entity.Property(e => e.ВидТранспорта)
                    .HasColumnName("Вид транспорта")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВидовУслуг>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список видов услуг");

                entity.HasIndex(e => e.IdВидаУслуги)
                    .HasName("IX_Список видов услуг")
                    .IsUnique();

                entity.Property(e => e.IdВидаУслуги)
                    .HasColumnName("ID вида услуги")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(140);
            });

            modelBuilder.Entity<СписокВодителей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список водителей");

                entity.HasIndex(e => e.IdВодителя)
                    .HasName("IX_Список водителей")
                    .IsUnique();

                entity.HasIndex(e => e.Водитель)
                    .HasName("IX_Список водителей_1")
                    .IsUnique();

                entity.Property(e => e.IdВодителя)
                    .HasColumnName("ID водителя")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Вместимость).HasMaxLength(50);

                entity.Property(e => e.Внешний).HasDefaultValueSql("((0))");

                entity.Property(e => e.Водитель)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Госномер)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Грузоподъемность).HasMaxLength(50);

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Тип).HasMaxLength(50);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокВсехКлиентовBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список всех клиентов BG");

                entity.Property(e => e.Fil).HasColumnName("fil");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(4, 2)");

                entity.Property(e => e.Otdel)
                    .IsRequired()
                    .HasColumnName("otdel")
                    .HasMaxLength(3);

                entity.Property(e => e.Skidka).HasColumnName("skidka");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ИсполнениеАртикула)
                    .IsRequired()
                    .HasColumnName("Исполнение артикула")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ИсполнениеАртикула1)
                    .IsRequired()
                    .HasColumnName("Исполнение артикула1")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.ИсполнениеАртикула2)
                    .IsRequired()
                    .HasColumnName("Исполнение артикула2")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.КодКлиента)
                    .HasColumnName("Код клиента")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокВсехКлиентовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список всех клиентов регион");

                entity.Property(e => e.Fil).HasColumnName("fil");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Otdel)
                    .HasColumnName("otdel")
                    .HasMaxLength(15);

                entity.Property(e => e.Skidka)
                    .HasColumnName("skidka")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ИсполнениеАртикула).HasColumnName("Исполнение артикула");

                entity.Property(e => e.ИсполнениеАртикула1).HasColumnName("Исполнение артикула1");

                entity.Property(e => e.ИсполнениеАртикула2).HasColumnName("Исполнение артикула2");

                entity.Property(e => e.КодКлиента)
                    .HasColumnName("Код клиента")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокВсехКлиентовРегионNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список всех клиентов регион_new");

                entity.Property(e => e.Fil).HasColumnName("fil");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Otdel)
                    .HasColumnName("otdel")
                    .HasMaxLength(15);

                entity.Property(e => e.Skidka)
                    .HasColumnName("skidka")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ИсполнениеАртикула).HasColumnName("Исполнение артикула");

                entity.Property(e => e.ИсполнениеАртикула1).HasColumnName("Исполнение артикула1");

                entity.Property(e => e.ИсполнениеАртикула2).HasColumnName("Исполнение артикула2");

                entity.Property(e => e.КодКлиента)
                    .HasColumnName("Код клиента")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокВсехКлиентовРегионРф>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список всех клиентов регион_РФ");

                entity.Property(e => e.Fil).HasColumnName("fil");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Otdel)
                    .HasColumnName("otdel")
                    .HasMaxLength(15);

                entity.Property(e => e.Skidka).HasColumnName("skidka");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ИсполнениеАртикула).HasColumnName("Исполнение артикула");

                entity.Property(e => e.ИсполнениеАртикула1).HasColumnName("Исполнение артикула1");

                entity.Property(e => e.ИсполнениеАртикула2).HasColumnName("Исполнение артикула2");

                entity.Property(e => e.КодКлиента)
                    .IsRequired()
                    .HasColumnName("Код клиента")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокВсехКлиентовРегионРфРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список всех клиентов регион_РФ_регион");

                entity.Property(e => e.Fil).HasColumnName("fil");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Otdel)
                    .HasColumnName("otdel")
                    .HasMaxLength(15);

                entity.Property(e => e.Skidka)
                    .HasColumnName("skidka")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ИсполнениеАртикула).HasColumnName("Исполнение артикула");

                entity.Property(e => e.ИсполнениеАртикула1).HasColumnName("Исполнение артикула1");

                entity.Property(e => e.ИсполнениеАртикула2).HasColumnName("Исполнение артикула2");

                entity.Property(e => e.КодКлиента)
                    .IsRequired()
                    .HasColumnName("Код клиента")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокВсехКлиентовРегионРфЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список всех клиентов регион_РФ_ЦО");

                entity.Property(e => e.Fil).HasColumnName("fil");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdГорода)
                    .IsRequired()
                    .HasColumnName("ID города")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Otdel)
                    .IsRequired()
                    .HasColumnName("otdel")
                    .HasMaxLength(10);

                entity.Property(e => e.Skidka).HasColumnName("skidka");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Грузополучатель)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ГрузополучательНакладная)
                    .IsRequired()
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.ИсполнениеАртикула).HasColumnName("Исполнение артикула");

                entity.Property(e => e.ИсполнениеАртикула1).HasColumnName("Исполнение артикула1");

                entity.Property(e => e.ИсполнениеАртикула2).HasColumnName("Исполнение артикула2");

                entity.Property(e => e.КодКлиента)
                    .IsRequired()
                    .HasColumnName("Код клиента")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.УлицаДом)
                    .IsRequired()
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<СписокВсехНакладных>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ накладных");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование).HasMaxLength(60);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<СписокВсехНакладныхАрхив>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ накладных архив");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Стадия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВсехНакладныхСДилерами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ накладных с дилерами");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Стадия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВсехНакладныхСКлиентами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ накладных с клиентами");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Стадия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВсехРаспоряжений>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ распоряжений");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<СписокВсехРаспоряженийАрхив>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ распоряжений архив");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Название).HasMaxLength(100);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Стадия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВсехРаспоряженийВообщеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ распоряжений вообще регион");

                entity.Property(e => e.IdВодителяРасп).HasColumnName("ID водителя_расп");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп).HasColumnName("ID заказчика транспорта_расп");

                entity.Property(e => e.IdПеревозчикаРасп).HasColumnName("ID перевозчика_расп");

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");

                entity.Property(e => e.IdПунктаРасп).HasColumnName("ID пункта_расп");

                entity.Property(e => e.IdСтадииРасп).HasColumnName("ID стадии_расп");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.НаименованиеГруза)
                    .HasColumnName("Наименование груза")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгр).HasColumnType("datetime");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВсехРаспоряженийЗаГодРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ распоряжений за год регион");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.НомерТт)
                    .HasColumnName("Номер ТТ")
                    .HasMaxLength(50);

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Примечание).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокВсехРаспоряженийРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ распоряжений регион");

                entity.Property(e => e.IdВодителяРасп).HasColumnName("ID водителя_расп");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп).HasColumnName("ID заказчика транспорта_расп");

                entity.Property(e => e.IdПеревозчикаРасп).HasColumnName("ID перевозчика_расп");

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");

                entity.Property(e => e.IdПунктаРасп).HasColumnName("ID пункта_расп");

                entity.Property(e => e.IdСтадииРасп).HasColumnName("ID стадии_расп");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилКл).HasColumnName("дил_кл");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КолСтрок).HasColumnName("Кол_строк");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НаименованиеГруза)
                    .HasColumnName("Наименование груза")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.НомерТт)
                    .HasColumnName("Номер ТТ")
                    .HasMaxLength(50);

                entity.Property(e => e.Отгружена).HasColumnType("datetime");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СамовывозИзМосквы).HasColumnName("Самовывоз из Москвы");

                entity.Property(e => e.Стадия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВсехРаспоряженийСДилерами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ распоряжений с дилерами");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Стадия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокВсехРаспоряженийСКлиентами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список ВСЕХ распоряжений с клиентами");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Стадия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокГеографическихЕдиниц>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список географических единиц");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список географических единиц")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ГеографическаяЕдиница)
                    .IsRequired()
                    .HasColumnName("Географическая единица")
                    .HasMaxLength(150);

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<СписокГородов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список городов");

                entity.HasIndex(e => e.IdГорода)
                    .HasName("IX_Список городов")
                    .IsUnique();

                entity.Property(e => e.IdГорода)
                    .HasColumnName("ID города")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdРегиона)
                    .HasColumnName("ID региона")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Коэффициент).HasDefaultValueSql("((1))");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокГруппДефектов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список групп дефектов");

                entity.HasIndex(e => e.IdГруппы)
                    .HasName("IX_Список групп дефектов")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(200);
            });

            modelBuilder.Entity<СписокГруппСкидок>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список групп скидок");

                entity.HasIndex(e => new { e.ГруппаСкидок, e.ОбъемПродажВМесДо })
                    .HasName("IX_Список групп скидок")
                    .IsUnique();

                entity.Property(e => e.БазоваяСкидка)
                    .HasColumnName("Базовая скидка")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.ГруппаСкидок).HasColumnName("Группа скидок");

                entity.Property(e => e.ОбъемПродажВМесДо)
                    .HasColumnName("Объем продаж в мес_до")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажВМесОт)
                    .HasColumnName("Объем продаж в мес_от")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СкидкаЗаMin)
                    .HasColumnName("Скидка за min")
                    .HasColumnType("decimal(6, 3)");
            });

            modelBuilder.Entity<СписокГруппСкидокДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список групп скидок_двери");

                entity.HasIndex(e => new { e.ГруппаСкидок, e.ОбъемПродажВМесДо })
                    .HasName("IX_Список групп скидок_двери")
                    .IsUnique();

                entity.Property(e => e.БазоваяСкидка)
                    .HasColumnName("Базовая скидка")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.ГруппаСкидок).HasColumnName("Группа скидок");

                entity.Property(e => e.ОбъемПродажВМесДо)
                    .HasColumnName("Объем продаж в мес_до")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажВМесОт)
                    .HasColumnName("Объем продаж в мес_от")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СкидкаЗаMin)
                    .HasColumnName("Скидка за min")
                    .HasColumnType("decimal(6, 3)");
            });

            modelBuilder.Entity<СписокГруппФирмВРеестре>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список групп фирм в реестре");

                entity.HasIndex(e => e.IdГруппыФирмы)
                    .HasName("IX_Список групп фирм в реестре")
                    .IsUnique();

                entity.Property(e => e.IdГруппыФирмы).HasColumnName("ID группы фирмы");

                entity.Property(e => e.ГруппаФирмы)
                    .HasColumnName("Группа фирмы")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокДефектов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список дефектов");

                entity.HasIndex(e => e.IdДефекта)
                    .HasName("IX_Список дефектов")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДефекта)
                    .HasColumnName("ID дефекта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Группа).HasMaxLength(100);

                entity.Property(e => e.КодДефекта)
                    .HasColumnName("Код дефекта")
                    .HasMaxLength(4);

                entity.Property(e => e.ХарактерДефекта)
                    .HasColumnName("Характер дефекта")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список дилеров");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список дилеров")
                    .IsUnique();

                entity.HasIndex(e => e.IdДилОбъединения)
                    .HasName("IX_Список дилеров_2");

                entity.HasIndex(e => e.Название)
                    .HasName("IX_Список дилеров_1")
                    .IsUnique();

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email1).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idd)
                    .HasColumnName("IDD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГорода)
                    .HasColumnName("ID города")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.IdКаналаСбыта)
                    .HasColumnName("ID канала сбыта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Базовая).HasDefaultValueSql("((0))");

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(100);

                entity.Property(e => e.ДилРег).HasColumnName("Дил_рег");

                entity.Property(e => e.Директорская).HasDefaultValueSql("((0))");

                entity.Property(e => e.ЕстьКаталог).HasColumnName("Есть каталог");

                entity.Property(e => e.ЕстьСайт).HasColumnName("Есть сайт");

                entity.Property(e => e.ЗаВыставку)
                    .HasColumnName("За выставку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаВыставку1)
                    .HasColumnName("За_выставку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаЛояльность)
                    .HasColumnName("За лояльность")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаМаркетотчет)
                    .HasColumnName("За маркетотчет")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаОбъем)
                    .HasColumnName("За объем")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаОбъем1)
                    .HasColumnName("За_объем")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаОтсрочку)
                    .HasColumnName("За_отсрочку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаРейтинг)
                    .HasColumnName("За_рейтинг")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаСклад)
                    .HasColumnName("За_склад")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаЭксклюзив)
                    .HasColumnName("За_эксклюзив")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.Контакт).HasMaxLength(255);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(25);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.ЛогинВнешний)
                    .HasColumnName("Логин_внешний")
                    .HasMaxLength(50);

                entity.Property(e => e.МаксимальныйКредит)
                    .HasColumnName("Максимальный кредит")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МаксимальныйКредитR)
                    .HasColumnName("Максимальный кредит R")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Место).HasDefaultValueSql("((0))");

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0.2))");

                entity.Property(e => e.Окнх)
                    .HasColumnName("ОКНХ")
                    .HasMaxLength(80);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.Отсрочка).HasDefaultValueSql("((0))");

                entity.Property(e => e.План1).HasDefaultValueSql("((0))");

                entity.Property(e => e.План2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Планmin).HasDefaultValueSql("((0))");

                entity.Property(e => e.ПланГодБонус1)
                    .HasColumnName("План_год_бонус1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПланГодБонус2)
                    .HasColumnName("План_год_бонус2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПланГодБонус3)
                    .HasColumnName("План_год_бонус3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Посредник).HasDefaultValueSql("((0))");

                entity.Property(e => e.РассылкаEmail)
                    .HasColumnName("Рассылка_email")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РассылкаEmail1)
                    .HasColumnName("Рассылка_email1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Руководитель).HasMaxLength(255);

                entity.Property(e => e.РуководительДляСервиса)
                    .HasColumnName("Руководитель для сервиса")
                    .HasMaxLength(100);

                entity.Property(e => e.СкидкаИзКарточки)
                    .HasColumnName("Скидка_из_карточки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланmin)
                    .HasColumnName("Скидка_планmin")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланГодБонус1)
                    .HasColumnName("Скидка_План_год_бонус1")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланГодБонус2)
                    .HasColumnName("Скидка_План_год_бонус2")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланГодБонус3)
                    .HasColumnName("Скидка_План_год_бонус3")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Соглашение).HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаТоваров)
                    .HasColumnName("Сумма товаров")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефон2).HasMaxLength(25);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТелефоныДляСервиса)
                    .HasColumnName("Телефоны для сервиса")
                    .HasMaxLength(100);

                entity.Property(e => e.ТипДилера).HasColumnName("Тип дилера");

                entity.Property(e => e.ТипКонтракта)
                    .HasColumnName("Тип контракта")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(50);

                entity.Property(e => e.Факс).HasMaxLength(20);

                entity.Property(e => e.ФилиалОтч).HasColumnName("Филиал_отч");

                entity.Property(e => e.Штраф).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокДилеровДляСписка>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список дилеров для списка");

                entity.Property(e => e.IdВладельца).HasColumnName("ID владельца");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Название).HasMaxLength(15);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<СписокДилеровОбъединения>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список дилеров объединения");

                entity.HasIndex(e => e.IdОбъединения)
                    .HasName("IX_Список дилеров объединения")
                    .IsUnique();

                entity.HasIndex(e => e.Объединение)
                    .HasName("IX_Список дилеров объединения_1")
                    .IsUnique();

                entity.Property(e => e.IdДилераЦо).HasColumnName("ID дилера ЦО");

                entity.Property(e => e.IdКаналаСбытаОб)
                    .HasColumnName("ID канала сбыта_об")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКатегорииОб)
                    .HasColumnName("ID категории_об")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdОбъединения)
                    .HasColumnName("ID объединения")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Мтк)
                    .HasColumnName("МТК")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Объединение)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ОтсрочкаОб)
                    .HasColumnName("Отсрочка_об")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПосредникОб)
                    .HasColumnName("Посредник_об")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РегионЦо).HasColumnName("Регион ЦО");

                entity.Property(e => e.СкидкаОб)
                    .HasColumnName("Скидка_об")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокДилеровОбъединенияФильтр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список дилеров объединения_фильтр");

                entity.Property(e => e.IdДилераЦо).HasColumnName("ID дилера ЦО");

                entity.Property(e => e.IdОбъединения)
                    .HasColumnName("ID объединения")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Объединение)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.РегионЦо).HasColumnName("Регион ЦО");
            });

            modelBuilder.Entity<СписокДилеровРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список дилеров регион");

                entity.HasIndex(e => e.IdДилОбъединения)
                    .HasName("IX_Список дилеров регион_3");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Список дилеров регион_1");

                entity.HasIndex(e => new { e.Id, e.Регион })
                    .HasName("IX_Список дилеров регион")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => new { e.Название, e.Регион })
                    .HasName("IX_Список дилеров регион_2");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email1).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idd)
                    .HasColumnName("IDD")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГорода)
                    .HasColumnName("ID города")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.IdКаналаСбыта)
                    .HasColumnName("ID канала сбыта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.RecDl)
                    .HasColumnName("Rec_dl")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Базовая).HasDefaultValueSql("((0))");

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(100);

                entity.Property(e => e.ДатаОткрытияДилера)
                    .HasColumnName("Дата открытия дилера")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ЕстьКаталог).HasColumnName("Есть каталог");

                entity.Property(e => e.ЕстьСайт).HasColumnName("Есть сайт");

                entity.Property(e => e.ЗаВыставку)
                    .HasColumnName("За выставку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаВыставку1)
                    .HasColumnName("За_выставку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаЛояльность)
                    .HasColumnName("За лояльность")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаМаркетотчет)
                    .HasColumnName("За маркетотчет")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаОбъем)
                    .HasColumnName("За объем")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаОбъем1).HasColumnName("За_объем");

                entity.Property(e => e.ЗаОтсрочку).HasColumnName("За_отсрочку");

                entity.Property(e => e.ЗаРейтинг).HasColumnName("За_рейтинг");

                entity.Property(e => e.ЗаСклад)
                    .HasColumnName("За_склад")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЗаЭксклюзив).HasColumnName("За_эксклюзив");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.История).HasColumnType("ntext");

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.Контакт).HasMaxLength(150);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(25);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.КредитMax)
                    .HasColumnName("Кредит max")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МаксимальныйКредит)
                    .HasColumnName("Максимальный кредит")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.МаксимальныйКредитR)
                    .HasColumnName("Максимальный кредит R")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Место).HasDefaultValueSql("((0))");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Окнх)
                    .HasColumnName("ОКНХ")
                    .HasMaxLength(80);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.Отсрочка).HasDefaultValueSql("((0))");

                entity.Property(e => e.План1).HasDefaultValueSql("((0))");

                entity.Property(e => e.План2).HasDefaultValueSql("((0))");

                entity.Property(e => e.Планmin).HasDefaultValueSql("((0))");

                entity.Property(e => e.ПланГодБонус1)
                    .HasColumnName("План_год_бонус1")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПланГодБонус2)
                    .HasColumnName("План_год_бонус2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПланГодБонус3)
                    .HasColumnName("План_год_бонус3")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Посредник).HasDefaultValueSql("((0))");

                entity.Property(e => e.РассылкаEmail)
                    .HasColumnName("Рассылка_email")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.РассылкаEmail1)
                    .HasColumnName("Рассылка_email1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.СистемаСкидок)
                    .HasColumnName("Система скидок")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Скидка2011).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СкидкаИзКарточки)
                    .HasColumnName("Скидка_из_карточки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланmin)
                    .HasColumnName("Скидка_планmin")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланГодБонус1)
                    .HasColumnName("Скидка_План_год_бонус1")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланГодБонус2)
                    .HasColumnName("Скидка_План_год_бонус2")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СкидкаПланГодБонус3)
                    .HasColumnName("Скидка_План_год_бонус3")
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаТоваров)
                    .HasColumnName("Сумма товаров")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефон2).HasMaxLength(25);

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипДилера).HasColumnName("Тип дилера");

                entity.Property(e => e.ТипКонтракта)
                    .HasColumnName("Тип контракта")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(50);

                entity.Property(e => e.Факс).HasMaxLength(20);

                entity.Property(e => e.ФилиалОтч).HasColumnName("Филиал_отч");

                entity.Property(e => e.ЦенаПоДоговору).HasColumnName("Цена по договору");

                entity.Property(e => e.Штраф).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокДилеровСДоступами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список дилеров с доступами");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdВладельца).HasColumnName("ID владельца");

                entity.Property(e => e.IdДилОбъединения).HasColumnName("ID дил объединения");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.IdРаботничкаРег).HasColumnName("ID работничка_рег");

                entity.Property(e => e.Password).HasMaxLength(10);

                entity.Property(e => e.ВыпискаОтПромет).HasColumnName("Выписка_от_Промет");

                entity.Property(e => e.МаксимальныйКредитR).HasColumnName("Максимальный кредит R");

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ПолеПустое)
                    .IsRequired()
                    .HasColumnName("поле_пустое")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ПолеПустое1)
                    .IsRequired()
                    .HasColumnName("поле_пустое1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Пусто1)
                    .IsRequired()
                    .HasColumnName("пусто1")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Пусто2)
                    .IsRequired()
                    .HasColumnName("пусто2")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.СкидкаИзКарточки).HasColumnName("Скидка_из_карточки");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 3)");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 3)");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокДляБлокировки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список для блокировки");

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Список для блокировки")
                    .IsUnique();

                entity.Property(e => e.ДатаРожденияВладельца1)
                    .HasColumnName("Дата рождения владельца1")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРожденияВладельца2)
                    .HasColumnName("Дата рождения владельца2")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРожденияДиректора)
                    .HasColumnName("Дата рождения директора")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Наименование1).HasMaxLength(255);

                entity.Property(e => e.Наименование2).HasMaxLength(255);

                entity.Property(e => e.ФиоВладельца1)
                    .HasColumnName("ФИО владельца1")
                    .HasMaxLength(255);

                entity.Property(e => e.ФиоВладельца2)
                    .HasColumnName("ФИО владельца2")
                    .HasMaxLength(255);

                entity.Property(e => e.ФиоДиректора)
                    .HasColumnName("ФИО директора")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокДляВозвратовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список для возвратов регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.Отпущена).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");
            });

            modelBuilder.Entity<СписокДляОтгрузкиПереводРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список для отгрузки перевод регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(255);

                entity.Property(e => e.НомерНакладной).HasColumnName("Номер накладной");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<СписокДляОтгрузкиТтРегионNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список для отгрузки ТТ регион new");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(70);

                entity.Property(e => e.Куда)
                    .HasColumnName("куда")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.НомерНакладной).HasColumnName("Номер накладной");

                entity.Property(e => e.НомерОфиса).HasColumnName("Номер_офиса");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");

                entity.Property(e => e.Филиал).HasColumnName("филиал");
            });

            modelBuilder.Entity<СписокДляЦениСтарыеРеквизиты13032015>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список для цени_старые реквизиты_13032015");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Список для цени_старые реквизиты_13032015")
                    .IsUnique();

                entity.Property(e => e.EMail)
                    .HasColumnName("e-mail")
                    .HasMaxLength(20);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Hrmid).HasColumnName("HRMID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IsReal).HasDefaultValueSql("((1))");

                entity.Property(e => e.PC)
                    .HasColumnName("P/C")
                    .HasMaxLength(50);

                entity.Property(e => e.АдресДляКорреспонденции)
                    .HasColumnName("Адрес_для_корреспонденции")
                    .HasMaxLength(40);

                entity.Property(e => e.АдресДляШапки)
                    .HasColumnName("Адрес_для шапки")
                    .HasMaxLength(60);

                entity.Property(e => e.АдресСф)
                    .HasColumnName("Адрес СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Банк).HasMaxLength(50);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизитыДил)
                    .HasColumnName("Банковские реквизиты_дил")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.БухгалтерСтарый)
                    .HasColumnName("Бухгалтер_старый")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель22102012)
                    .HasColumnName("Грузоотправитель_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель29072014)
                    .HasColumnName("Грузоотправитель_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф)
                    .HasColumnName("Грузоотправитель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф22102012)
                    .HasColumnName("Грузоотправитель для СФ_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф29072014)
                    .HasColumnName("Грузоотправитель для СФ_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфДляСетей)
                    .HasColumnName("Грузоотправитель для СФ для сетей")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфТула)
                    .HasColumnName("Грузоотправитель для СФ_Тула")
                    .HasMaxLength(500);

                entity.Property(e => e.ГрузоотправительКл)
                    .HasColumnName("Грузоотправитель_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл22102012)
                    .HasColumnName("Грузоотправитель_кл_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл29072014)
                    .HasColumnName("Грузоотправитель_кл_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКлСтарый)
                    .HasColumnName("Грузоотправитель_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН/КПП")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннКпп22102012)
                    .HasColumnName("ИНН/КПП_22102012")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннОтдельно)
                    .HasColumnName("ИНН_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.КС)
                    .HasColumnName("К/С")
                    .HasMaxLength(50);

                entity.Property(e => e.КппОтдельно)
                    .HasColumnName("КПП_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.Кф)
                    .HasColumnType("decimal(11, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Кф1)
                    .HasColumnName("Кф_")
                    .HasColumnType("decimal(11, 3)");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Плательщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик29072014)
                    .HasColumnName("Поставщик_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл)
                    .HasColumnName("Поставщик_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл29072014)
                    .HasColumnName("Поставщик_кл_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКлСтарый)
                    .HasColumnName("Поставщик_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБанк)
                    .HasColumnName("Текст Банк")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБик)
                    .HasColumnName("Текст БИК")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстКС)
                    .HasColumnName("Текст К/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстРС)
                    .HasColumnName("Текст Р/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Телефон)
                    .HasColumnName("телефон")
                    .HasMaxLength(50);

                entity.Property(e => e.Факс)
                    .HasColumnName("факс")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокДляЦепи>(entity =>
            {
                entity.HasKey(e => e.IdФирмы);

                entity.ToTable("Список для цепи");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.EMail)
                    .HasColumnName("e-mail")
                    .HasMaxLength(20);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Hrmid).HasColumnName("HRMID");

                entity.Property(e => e.IsReal).HasDefaultValueSql("((1))");

                entity.Property(e => e.PC)
                    .HasColumnName("P/C")
                    .HasMaxLength(50);

                entity.Property(e => e.АдресДляКорреспонденции)
                    .HasColumnName("Адрес_для_корреспонденции")
                    .HasMaxLength(40);

                entity.Property(e => e.АдресДляШапки)
                    .HasColumnName("Адрес_для шапки")
                    .HasMaxLength(60);

                entity.Property(e => e.АдресСф)
                    .HasColumnName("Адрес СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Банк).HasMaxLength(50);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизитыАльфа)
                    .HasColumnName("Банковские реквизиты_АЛЬФА")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизитыДил)
                    .HasColumnName("Банковские реквизиты_дил")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.БухгалтерСтарый)
                    .HasColumnName("Бухгалтер_старый")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель22102012)
                    .HasColumnName("Грузоотправитель_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель29072014)
                    .HasColumnName("Грузоотправитель_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф)
                    .HasColumnName("Грузоотправитель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф14072016)
                    .HasColumnName("Грузоотправитель для СФ_14072016")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф22102012)
                    .HasColumnName("Грузоотправитель для СФ_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф29072014)
                    .HasColumnName("Грузоотправитель для СФ_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфДляСетей)
                    .HasColumnName("Грузоотправитель для СФ для сетей")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфТула)
                    .HasColumnName("Грузоотправитель для СФ_Тула")
                    .HasMaxLength(500);

                entity.Property(e => e.ГрузоотправительКл)
                    .HasColumnName("Грузоотправитель_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл22102012)
                    .HasColumnName("Грузоотправитель_кл_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл29072014)
                    .HasColumnName("Грузоотправитель_кл_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКлСтарый)
                    .HasColumnName("Грузоотправитель_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН/КПП")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннКпп22102012)
                    .HasColumnName("ИНН/КПП_22102012")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннОтдельно)
                    .HasColumnName("ИНН_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.КС)
                    .HasColumnName("К/С")
                    .HasMaxLength(50);

                entity.Property(e => e.КппОтдельно)
                    .HasColumnName("КПП_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.Кф)
                    .HasColumnType("decimal(11, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Кф1)
                    .HasColumnName("Кф_")
                    .HasColumnType("decimal(11, 3)");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Плательщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик29072014)
                    .HasColumnName("Поставщик_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл)
                    .HasColumnName("Поставщик_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл29072014)
                    .HasColumnName("Поставщик_кл_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКлСтарый)
                    .HasColumnName("Поставщик_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБанк)
                    .HasColumnName("Текст Банк")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБик)
                    .HasColumnName("Текст БИК")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстКС)
                    .HasColumnName("Текст К/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстРС)
                    .HasColumnName("Текст Р/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Телефон)
                    .HasColumnName("телефон")
                    .HasMaxLength(50);

                entity.Property(e => e.Факс)
                    .HasColumnName("факс")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокДляЦепиПриказы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список для цепи приказы");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Список для цени приказы")
                    .IsUnique();

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Печать).HasColumnType("image");

                entity.Property(e => e.Приказ1).HasMaxLength(150);

                entity.Property(e => e.Приказ1Н)
                    .HasColumnName("Приказ1_н")
                    .HasMaxLength(150);

                entity.Property(e => e.Приказ2).HasMaxLength(150);

                entity.Property(e => e.Приказ2Н)
                    .HasColumnName("Приказ2_н")
                    .HasMaxLength(150);

                entity.Property(e => e.Приказ3).HasMaxLength(255);

                entity.Property(e => e.Приказ3Н)
                    .HasColumnName("Приказ3_н")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокДляЦепиСтарыеРеквизиты>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список для цепи_старые_реквизиты");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Список для цепи_старые_реквизиты")
                    .IsUnique();

                entity.Property(e => e.EMail)
                    .HasColumnName("e-mail")
                    .HasMaxLength(20);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Hrmid).HasColumnName("HRMID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IsReal).HasDefaultValueSql("((1))");

                entity.Property(e => e.PC)
                    .HasColumnName("P/C")
                    .HasMaxLength(50);

                entity.Property(e => e.АдресДляКорреспонденции)
                    .HasColumnName("Адрес_для_корреспонденции")
                    .HasMaxLength(40);

                entity.Property(e => e.АдресДляШапки)
                    .HasColumnName("Адрес_для шапки")
                    .HasMaxLength(60);

                entity.Property(e => e.АдресСф)
                    .HasColumnName("Адрес СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Банк).HasMaxLength(50);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.БухгалтерСтарый)
                    .HasColumnName("Бухгалтер_старый")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель22102012)
                    .HasColumnName("Грузоотправитель_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф)
                    .HasColumnName("Грузоотправитель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф22102012)
                    .HasColumnName("Грузоотправитель для СФ_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфДляСетей)
                    .HasColumnName("Грузоотправитель для СФ для сетей")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфТула)
                    .HasColumnName("Грузоотправитель для СФ_Тула")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл)
                    .HasColumnName("Грузоотправитель_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл22102012)
                    .HasColumnName("Грузоотправитель_кл_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКлСтарый)
                    .HasColumnName("Грузоотправитель_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН/КПП")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннКпп22102012)
                    .HasColumnName("ИНН/КПП_22102012")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннОтдельно)
                    .HasColumnName("ИНН_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.КС)
                    .HasColumnName("К/С")
                    .HasMaxLength(50);

                entity.Property(e => e.КппОтдельно)
                    .HasColumnName("КПП_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.Кф)
                    .HasColumnType("decimal(11, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Кф1)
                    .HasColumnName("Кф_")
                    .HasColumnType("decimal(11, 3)");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Плательщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл)
                    .HasColumnName("Поставщик_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКлСтарый)
                    .HasColumnName("Поставщик_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБанк)
                    .HasColumnName("Текст Банк")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБик)
                    .HasColumnName("Текст БИК")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстКС)
                    .HasColumnName("Текст К/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстРС)
                    .HasColumnName("Текст Р/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Телефон)
                    .HasColumnName("телефон")
                    .HasMaxLength(50);

                entity.Property(e => e.Факс)
                    .HasColumnName("факс")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокДляЦепиСтарыеРеквизиты29072014>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список для цепи_старые реквизиты_29072014");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Списко для цепи_старые реквизиты_29072014")
                    .IsUnique();

                entity.Property(e => e.EMail)
                    .HasColumnName("e-mail")
                    .HasMaxLength(20);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Hrmid).HasColumnName("HRMID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IsReal).HasDefaultValueSql("((1))");

                entity.Property(e => e.PC)
                    .HasColumnName("P/C")
                    .HasMaxLength(50);

                entity.Property(e => e.АдресДляКорреспонденции)
                    .HasColumnName("Адрес_для_корреспонденции")
                    .HasMaxLength(40);

                entity.Property(e => e.АдресДляШапки)
                    .HasColumnName("Адрес_для шапки")
                    .HasMaxLength(60);

                entity.Property(e => e.АдресСф)
                    .HasColumnName("Адрес СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Банк).HasMaxLength(50);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизитыДил)
                    .HasColumnName("Банковские реквизиты_дил")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.БухгалтерСтарый)
                    .HasColumnName("Бухгалтер_старый")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель22102012)
                    .HasColumnName("Грузоотправитель_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф)
                    .HasColumnName("Грузоотправитель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф22102012)
                    .HasColumnName("Грузоотправитель для СФ_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфДляСетей)
                    .HasColumnName("Грузоотправитель для СФ для сетей")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфТула)
                    .HasColumnName("Грузоотправитель для СФ_Тула")
                    .HasMaxLength(500);

                entity.Property(e => e.ГрузоотправительКл)
                    .HasColumnName("Грузоотправитель_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл22102012)
                    .HasColumnName("Грузоотправитель_кл_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКлСтарый)
                    .HasColumnName("Грузоотправитель_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН/КПП")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннКпп22102012)
                    .HasColumnName("ИНН/КПП_22102012")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннОтдельно)
                    .HasColumnName("ИНН_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.КС)
                    .HasColumnName("К/С")
                    .HasMaxLength(50);

                entity.Property(e => e.КппОтдельно)
                    .HasColumnName("КПП_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.Кф)
                    .HasColumnType("decimal(11, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Кф1)
                    .HasColumnName("Кф_")
                    .HasColumnType("decimal(11, 3)");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Плательщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл)
                    .HasColumnName("Поставщик_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКлСтарый)
                    .HasColumnName("Поставщик_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБанк)
                    .HasColumnName("Текст Банк")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБик)
                    .HasColumnName("Текст БИК")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстКС)
                    .HasColumnName("Текст К/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстРС)
                    .HasColumnName("Текст Р/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Телефон)
                    .HasColumnName("телефон")
                    .HasMaxLength(50);

                entity.Property(e => e.Факс)
                    .HasColumnName("факс")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокДляЦепиСтарыеРеквизитыНпо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список для цепи_старые реквизиты_НПО");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Список для цепи_старые реквизиты_НПО")
                    .IsUnique();

                entity.Property(e => e.EMail)
                    .HasColumnName("e-mail")
                    .HasMaxLength(20);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Hrmid).HasColumnName("HRMID");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IsReal).HasDefaultValueSql("((1))");

                entity.Property(e => e.PC)
                    .HasColumnName("P/C")
                    .HasMaxLength(50);

                entity.Property(e => e.АдресДляКорреспонденции)
                    .HasColumnName("Адрес_для_корреспонденции")
                    .HasMaxLength(40);

                entity.Property(e => e.АдресДляШапки)
                    .HasColumnName("Адрес_для шапки")
                    .HasMaxLength(60);

                entity.Property(e => e.АдресСф)
                    .HasColumnName("Адрес СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Банк).HasMaxLength(50);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизитыДил)
                    .HasColumnName("Банковские реквизиты_дил")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(50);

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.БухгалтерСтарый)
                    .HasColumnName("Бухгалтер_старый")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель22102012)
                    .HasColumnName("Грузоотправитель_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.Грузоотправитель29072014)
                    .HasColumnName("Грузоотправитель_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф)
                    .HasColumnName("Грузоотправитель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф22102012)
                    .HasColumnName("Грузоотправитель для СФ_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСф29072014)
                    .HasColumnName("Грузоотправитель для СФ_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфДляСетей)
                    .HasColumnName("Грузоотправитель для СФ для сетей")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительДляСфТула)
                    .HasColumnName("Грузоотправитель для СФ_Тула")
                    .HasMaxLength(500);

                entity.Property(e => e.ГрузоотправительКл)
                    .HasColumnName("Грузоотправитель_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл22102012)
                    .HasColumnName("Грузоотправитель_кл_22102012")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКл29072014)
                    .HasColumnName("Грузоотправитель_кл_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузоотправительКлСтарый)
                    .HasColumnName("Грузоотправитель_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН/КПП")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннКпп22102012)
                    .HasColumnName("ИНН/КПП_22102012")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИннОтдельно)
                    .HasColumnName("ИНН_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.КС)
                    .HasColumnName("К/С")
                    .HasMaxLength(50);

                entity.Property(e => e.КппОтдельно)
                    .HasColumnName("КПП_отдельно")
                    .HasMaxLength(50);

                entity.Property(e => e.Кф)
                    .HasColumnType("decimal(11, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Кф1)
                    .HasColumnName("Кф_")
                    .HasColumnType("decimal(11, 3)");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Плательщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.Поставщик29072014)
                    .HasColumnName("Поставщик_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл)
                    .HasColumnName("Поставщик_кл")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКл29072014)
                    .HasColumnName("Поставщик_кл_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.ПоставщикКлСтарый)
                    .HasColumnName("Поставщик_кл_старый")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБанк)
                    .HasColumnName("Текст Банк")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстБик)
                    .HasColumnName("Текст БИК")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстКС)
                    .HasColumnName("Текст К/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ТекстРС)
                    .HasColumnName("Текст Р/С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Телефон)
                    .HasColumnName("телефон")
                    .HasMaxLength(50);

                entity.Property(e => e.Факс)
                    .HasColumnName("факс")
                    .HasMaxLength(50);

                entity.Property(e => e.Фирма).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокДоверенныхЛицПоставки>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.Fio });

                entity.ToTable("Список доверенных лиц поставки");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(100);

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.PersonId).HasColumnName("PersonID");

                entity.Property(e => e.PostId).HasColumnName("PostID");
            });

            modelBuilder.Entity<СписокДоговоров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список договоров");

                entity.HasIndex(e => e.IdДоговора)
                    .HasName("IX_Список договоров_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdЮрлица, e.Договор, e.Регион })
                    .HasName("IX_Список договоров")
                    .IsUnique();

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdДоговора)
                    .HasColumnName("ID договора")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.ДатаНачала)
                    .HasColumnName("Дата начала")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОкончания)
                    .HasColumnName("Дата окончания")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Действующий)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Договор)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Пролонгация).HasDefaultValueSql("((0))");

                entity.Property(e => e.Регион).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокДоговоровПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список договоров поставки");

                entity.HasIndex(e => e.IdДоговора)
                    .HasName("IX_Список договоров поставки")
                    .IsUnique();

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdДоговора)
                    .HasColumnName("ID договора")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.ДатаДоговора)
                    .HasColumnName("Дата договора")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаНачала)
                    .HasColumnName("Дата начала")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОкончания)
                    .HasColumnName("Дата окончания")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.МетодПоставки).HasColumnName("Метод поставки");

                entity.Property(e => e.УсловияОплаты).HasColumnName("Условия оплаты");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокДокументов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список документов");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_Список документов")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Анкета)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаОткрытияДилера)
                    .HasColumnName("Дата открытия дилера")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПослОтчета)
                    .HasColumnName("Дата посл_отчета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Договор2000)
                    .IsRequired()
                    .HasColumnName("Договор 2000")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Договор2001)
                    .IsRequired()
                    .HasColumnName("Договор 2001")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Договор2002)
                    .IsRequired()
                    .HasColumnName("Договор 2002")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ОтчетныйПериод)
                    .HasColumnName("Отчетный период")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Паспорт)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ПечатьИПодписи)
                    .IsRequired()
                    .HasColumnName("Печать и подписи")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Прочие).HasMaxLength(255);

                entity.Property(e => e.Сверка1999)
                    .IsRequired()
                    .HasColumnName("Сверка 1999")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Сверка2000)
                    .IsRequired()
                    .HasColumnName("Сверка 2000")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Сверка2001)
                    .IsRequired()
                    .HasColumnName("Сверка 2001")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Сверка2002)
                    .IsRequired()
                    .HasColumnName("Сверка 2002")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СвидетельствоОРегистрации)
                    .IsRequired()
                    .HasColumnName("Свидетельство о регистрации")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Устав)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СписокДокументовЮрлиц>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список документов юрлиц");

                entity.HasIndex(e => e.IdЮрлица)
                    .HasName("IX_Список документов юрлиц")
                    .IsUnique();

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Анкета)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Выставка).HasDefaultValueSql("(0)");

                entity.Property(e => e.Действующий).HasDefaultValueSql("(1)");

                entity.Property(e => e.Договор).HasMaxLength(50);

                entity.Property(e => e.Договор2000)
                    .IsRequired()
                    .HasColumnName("Договор 2000")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Договор2001)
                    .IsRequired()
                    .HasColumnName("Договор 2001")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Договор2005)
                    .IsRequired()
                    .HasColumnName("Договор 2005")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Евросейф)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Нал)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Паспорт)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ПечатьИПодписи)
                    .IsRequired()
                    .HasColumnName("Печать и подписи")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Прочие).HasMaxLength(255);

                entity.Property(e => e.Сверка1999)
                    .IsRequired()
                    .HasColumnName("Сверка 1999")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Сверка2000)
                    .IsRequired()
                    .HasColumnName("Сверка 2000")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Сверка2001)
                    .IsRequired()
                    .HasColumnName("Сверка 2001")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Сверка2004)
                    .IsRequired()
                    .HasColumnName("Сверка 2004")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.СвидетельствоОРегистрации)
                    .IsRequired()
                    .HasColumnName("Свидетельство о регистрации")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Устав)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СписокДолжностей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список должностей");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список должностей")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.НазваниеДолжности)
                    .HasColumnName("Название должности")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СписокДолжностейПоставки>(entity =>
            {
                entity.HasKey(e => e.GroupId);

                entity.ToTable("Список должностей поставки");

                entity.Property(e => e.GroupId).HasColumnName("GroupID");

                entity.Property(e => e.GroupName).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокДоступов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов")
                    .IsUnique();

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");
            });

            modelBuilder.Entity<СписокДоступовБухгКФирмам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов бухг к фирмам");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов бухг к фирмам")
                    .IsUnique();

                entity.Property(e => e.IdКомпании)
                    .HasColumnName("ID компании")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdФирмыПлат)
                    .HasColumnName("ID фирмы плат")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокДоступовБухгалтеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов бухгалтеров");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов бухгалтеров")
                    .IsUnique();

                entity.Property(e => e.IdРаботника)
                    .HasColumnName("ID работника")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdФирмыПлат)
                    .HasColumnName("ID фирмы плат")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокДоступовКДилерам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов к дилерам");

                entity.HasIndex(e => e.IdВладельца)
                    .HasName("IX_Список доступов к дилерам_2");

                entity.HasIndex(e => e.IdРаботничка)
                    .HasName("IX_Список доступов к дилерам_1");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов к дилерам")
                    .IsUnique();

                entity.Property(e => e.IdВладельца).HasColumnName("ID владельца");

                entity.Property(e => e.IdВладельцаРег).HasColumnName("ID владельца_рег");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.IdРаботничкаРег).HasColumnName("ID работничка_рег");
            });

            modelBuilder.Entity<СписокДоступовКПоставщикам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов к поставщикам");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов к поставщикам")
                    .IsUnique();

                entity.Property(e => e.IdРаботника).HasColumnName("ID работника");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокДоступовКФирмам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов к фирмам");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов к фирмам")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdРаботника, e.IdФирмыПлат })
                    .HasName("IX_Список доступов к фирмам_1")
                    .IsUnique();

                entity.Property(e => e.IdРаботника).HasColumnName("ID работника");

                entity.Property(e => e.IdФирмыПлат).HasColumnName("ID фирмы плат");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокДоступовНаСогласование>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов на согласование");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов на согласование")
                    .IsUnique();

                entity.Property(e => e.IdПодразд).HasColumnName("ID подразд");

                entity.Property(e => e.IdРаботника).HasColumnName("ID работника");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокДоступовРеестр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов реестр");

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");
            });

            modelBuilder.Entity<СписокДоступовРеестрПлательщики>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов реестр-плательщики");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов реестр-плат")
                    .IsUnique();

                entity.Property(e => e.IdРаботничка).HasColumnName("ID работничка");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокДоступовФинплан>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список доступов финплан");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список доступов финплан")
                    .IsUnique();

                entity.Property(e => e.IdРаботника).HasColumnName("ID работника");

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.Код).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокЕдиницИзмерения>(entity =>
            {
                entity.HasKey(e => e.Код);

                entity.ToTable("Список единиц измерения");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список единиц измерения")
                    .IsUnique();

                entity.Property(e => e.Код)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НаименованиеEn)
                    .HasColumnName("Наименование EN")
                    .HasMaxLength(50);

                entity.Property(e => e.Сокращение)
                    .HasMaxLength(10)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокЗамков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список замков");

                entity.HasIndex(e => e.IdЗамка)
                    .HasName("IX_Список замков")
                    .IsUnique();

                entity.Property(e => e.IdЗамка)
                    .IsRequired()
                    .HasColumnName("ID замка")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.АналогПоставки)
                    .HasColumnName("Аналог_Поставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Замок)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(8)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокЗамковЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список замков зависимости");

                entity.HasIndex(e => new { e.IdЗамка, e.IdКонструкции })
                    .HasName("IX_Спичок замков зависимости")
                    .IsUnique();

                entity.Property(e => e.IdЗамка)
                    .HasColumnName("ID замка")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокЗамковПоМоделям>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список замков по моделям");

                entity.Property(e => e.IdЗамка)
                    .IsRequired()
                    .HasColumnName("ID замка")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.L3)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Замок)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasMaxLength(46);
            });

            modelBuilder.Entity<СписокЗамковСпецификация>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список замков спецификация");

                entity.HasIndex(e => e.IdСпецификации)
                    .HasName("IX_Список закмов спецификация")
                    .IsUnique();

                entity.Property(e => e.IdЗамка)
                    .IsRequired()
                    .HasColumnName("ID замка")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdСпецификации)
                    .HasColumnName("ID спецификации")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.АналогДетали)
                    .HasColumnName("Аналог_Детали")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.АналогПоставки)
                    .HasColumnName("Аналог_Поставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Замок).HasMaxLength(250);

                entity.Property(e => e.Количество)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокЗатрат>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список затрат");

                entity.HasIndex(e => e.IdЗатраты)
                    .HasName("IX_Список затрат")
                    .IsUnique();

                entity.Property(e => e.IdЗатраты)
                    .HasColumnName("ID затраты")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Вид).HasMaxLength(50);

                entity.Property(e => e.Код).HasMaxLength(5);

                entity.Property(e => e.Наименование).HasMaxLength(200);
            });

            modelBuilder.Entity<СписокЗаявокДляВыпискиРаспоряжений11111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для выписки распоряжений11111");

                entity.Property(e => e.Expr1).HasColumnType("smalldatetime");

                entity.Property(e => e.Expr2).HasColumnType("datetime");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокДляВыпискиРаспоряженийРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для выписки распоряжений регион");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЗаявокДляВыпискиСфРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для выписки сф регион");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(200);

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВыписанаСчетФактура).HasColumnName("Выписана счет-фактура");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Телефоны).HasMaxLength(15);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЗаявокДляДолга>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для долга");

                entity.Property(e => e.Expr2).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДолгДол)
                    .HasColumnName("Долг_дол")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ДолгРуб)
                    .HasColumnName("Долг_руб")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<СписокЗаявокДляДолгаDib>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для долга DIB");

                entity.Property(e => e.Expr2).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДолгДол)
                    .HasColumnName("Долг_дол")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ДолгРуб)
                    .HasColumnName("Долг_руб")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<СписокЗаявокДляОплатыДолларыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для оплаты_доллары регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.Оплата)
                    .HasColumnName("Оплата $")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Отпущена).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<СписокЗаявокДляОплатыОбщийРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для оплаты_общий регион");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.Отпущена).HasColumnType("smalldatetime");

                entity.Property(e => e.СкидкаДоп)
                    .HasColumnName("Скидка_доп")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");
            });

            modelBuilder.Entity<СписокЗаявокДляОплатыРублиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для оплаты_рубли регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.SumСуммаОплаты)
                    .HasColumnName("Sum_Сумма оплаты $")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.Отпущена).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<СписокЗаявокДляПереводРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для перевод регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.ОтКого).HasColumnName("От_кого");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЗаявокДляПереводаДляОтчетаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для перевода для отчета регион");

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодГорода)
                    .HasColumnName("Код города")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.ОтКого).HasColumnName("От_кого");

                entity.Property(e => e.Отгружена).HasColumnType("datetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Приход).HasColumnType("datetime");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<СписокЗаявокДляПросмотраЗавод>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для просмотра завод");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdВодителя).HasColumnName("ID водителя");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЗаказчикаТранспорта).HasColumnName("ID заказчика транспорта");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdПункта).HasColumnName("ID пункта");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecDl).HasColumnName("Rec_dl");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПодтверждения)
                    .HasColumnName("Дата подтверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилКл).HasColumnName("дил_кл");

                entity.Property(e => e.ДоходКому).HasColumnName("Доход_кому");

                entity.Property(e => e.ДоходСколько)
                    .HasColumnName("Доход_сколько")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.Кому).HasMaxLength(50);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.МаксимальныйКредит).HasColumnName("Максимальный кредит");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерТт)
                    .HasColumnName("Номер ТТ")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ОснованиеУпд)
                    .HasColumnName("Основание УПД")
                    .HasMaxLength(255);

                entity.Property(e => e.Ответственные).HasMaxLength(100);

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.ОтсрочкаПродленная)
                    .HasColumnName("Отсрочка_продленная")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Премия).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПричинаОтсрочки)
                    .HasColumnName("Причина отсрочки")
                    .HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.СамовывозИзМосквы).HasColumnName("Самовывоз из Москвы");

                entity.Property(e => e.Скидка).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаДоп)
                    .HasColumnName("Скидка_доп")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаНал)
                    .HasColumnName("Скидка_нал")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаОбъем)
                    .HasColumnName("Скидка_объем")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаОтсрочка)
                    .HasColumnName("Скидка_отсрочка")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПросрочка)
                    .HasColumnName("Скидка_просрочка")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаСез)
                    .HasColumnName("Скидка_сез")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СрокОплаты)
                    .HasColumnName("Срок оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЗаявокДляПросмотраРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для просмотра регион");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdВодителя).HasColumnName("ID водителя");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЗаказчикаТранспорта).HasColumnName("ID заказчика транспорта");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdПункта).HasColumnName("ID пункта");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecDl).HasColumnName("Rec_dl");

                entity.Property(e => e.TenderId).HasColumnName("TenderID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная1)
                    .HasColumnName("Грузополучатель накладная1")
                    .HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПодтверждения)
                    .HasColumnName("Дата подтверждения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилКл).HasColumnName("дил_кл");

                entity.Property(e => e.ДоходКому).HasColumnName("Доход_кому");

                entity.Property(e => e.ДоходСколько)
                    .HasColumnName("Доход_сколько")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.Кому).HasMaxLength(50);

                entity.Property(e => e.Курс).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.МаксимальныйКредит).HasColumnName("Максимальный кредит");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерТт)
                    .HasColumnName("Номер ТТ")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоГрузополучателя)
                    .HasColumnName("ОКПО грузополучателя")
                    .HasMaxLength(50);

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.ОснованиеУпд)
                    .HasColumnName("Основание УПД")
                    .HasMaxLength(255);

                entity.Property(e => e.Ответственные).HasMaxLength(100);

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.ОтсрочкаПродленная)
                    .HasColumnName("Отсрочка_продленная")
                    .HasColumnType("decimal(10, 3)");

                entity.Property(e => e.Премия).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПричинаОтсрочки)
                    .HasColumnName("Причина отсрочки")
                    .HasMaxLength(255);

                entity.Property(e => e.Рс).HasColumnName("РС");

                entity.Property(e => e.СамовывозИзМосквы).HasColumnName("Самовывоз из Москвы");

                entity.Property(e => e.Скидка).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаДоп)
                    .HasColumnName("Скидка_доп")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаНал)
                    .HasColumnName("Скидка_нал")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаОбъем)
                    .HasColumnName("Скидка_объем")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаОтсрочка)
                    .HasColumnName("Скидка_отсрочка")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПлан1)
                    .HasColumnName("Скидка_план1")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПлан2)
                    .HasColumnName("Скидка_план2")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаПросрочка)
                    .HasColumnName("Скидка_просрочка")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.СкидкаСез)
                    .HasColumnName("Скидка_сез")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Смпр)
                    .HasColumnName("СМПР")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СрокОплаты)
                    .HasColumnName("Срок оплаты")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма руб");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЗаявокДляРаспискиКнРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для расписки_КН регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВСчете).HasColumnName("В счете");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Выражение2).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Долг).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");
            });

            modelBuilder.Entity<СписокЗаявокДляРаспискиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для расписки регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВСчете).HasColumnName("В счете");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Выражение2).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Долг).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Отсрочка).HasColumnType("decimal(7, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");
            });

            modelBuilder.Entity<СписокЗаявокДляРаспискиФормаКнРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для расписки форма_КН регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Percent).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа).HasColumnName("Вид платежа");

                entity.Property(e => e.Выражение2).HasMaxLength(50);

                entity.Property(e => e.Год)
                    .HasColumnName("Год_")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлатежки)
                    .HasColumnName("Дата платежки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Долг).HasColumnType("numeric(38, 3)");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер_порядковый");

                entity.Property(e => e.Сумма).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.СуммаR)
                    .HasColumnName("Сумма R")
                    .HasColumnType("numeric(38, 6)");

                entity.Property(e => e.СуммаРезервДол)
                    .HasColumnName("Сумма резерв дол")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРезервРуб)
                    .HasColumnName("Сумма резерв руб")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокЗаявокДляРаспискиФормаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для расписки форма регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.ВСчете).HasColumnName("В счете");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.ВидПлатежа).HasColumnName("Вид платежа");

                entity.Property(e => e.Выражение2).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Год)
                    .HasColumnName("Год_")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлатежки)
                    .HasColumnName("Дата платежки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Долг).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер_порядковый");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.СуммаR).HasColumnName("Сумма R");

                entity.Property(e => e.СуммаРезервДол)
                    .HasColumnName("Сумма резерв дол")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаРезервРуб)
                    .HasColumnName("Сумма резерв руб")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокЗаявокДляТт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для ТТ_");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокДляТтВысРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для ТТ_выс регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdВидаТранспорта).HasColumnName("ID вида_транспорта");

                entity.Property(e => e.IdВодителяРасп).HasColumnName("ID водителя_расп");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп).HasColumnName("ID заказчика транспорта_расп");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdПеревозчикаРасп).HasColumnName("ID перевозчика_расп");

                entity.Property(e => e.IdПунктаРасп).HasColumnName("ID пункта_расп");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Стадия)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокДляТтРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для ТТ регион");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdВидаТранспорта).HasColumnName("ID вида_транспорта");

                entity.Property(e => e.IdВодителяРасп).HasColumnName("ID водителя_расп");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп).HasColumnName("ID заказчика транспорта_расп");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdПеревозчикаРасп).HasColumnName("ID перевозчика_расп");

                entity.Property(e => e.IdПунктаРасп).HasColumnName("ID пункта_расп");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Куда)
                    .HasColumnName("куда")
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование).HasMaxLength(70);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерОфиса).HasColumnName("Номер_офиса");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");

                entity.Property(e => e.СкидкаДоп)
                    .HasColumnName("Скидка_доп")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.СкидкаСез)
                    .HasColumnName("Скидка_сез")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Стадия)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокДляТтРегионВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для ТТ регион все");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdВидаТранспорта).HasColumnName("ID вида_транспорта");

                entity.Property(e => e.IdВодителяРасп).HasColumnName("ID водителя_расп");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп).HasColumnName("ID заказчика транспорта_расп");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdПеревозчикаРасп).HasColumnName("ID перевозчика_расп");

                entity.Property(e => e.IdПунктаРасп).HasColumnName("ID пункта_расп");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Куда)
                    .HasColumnName("куда")
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерОфиса).HasColumnName("Номер_офиса");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");

                entity.Property(e => e.СкидкаСез)
                    .HasColumnName("Скидка_сез")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Стадия)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокДляТтФилРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для ТТ_фил регион");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.IdВидаТранспорта).HasColumnName("ID вида_транспорта");

                entity.Property(e => e.IdВодителяРасп).HasColumnName("ID водителя_расп");

                entity.Property(e => e.IdЗаказчикаТранспортаРасп).HasColumnName("ID заказчика транспорта_расп");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdПеревозчикаРасп).HasColumnName("ID перевозчика_расп");

                entity.Property(e => e.IdПунктаРасп).HasColumnName("ID пункта_расп");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Куда)
                    .IsRequired()
                    .HasColumnName("куда")
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Стадия)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокДляУдаленияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для удаления регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.Total).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерСчетаРегион).HasColumnName("Номер счета регион");

                entity.Property(e => e.Примечание).HasMaxLength(255);
            });

            modelBuilder.Entity<СписокЗаявокДляФилиала>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для филиала_");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПереноса)
                    .HasColumnName("Дата переноса")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Перенести).HasMaxLength(15);

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокДляФилиаловОнлайн>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок для филиалов_онлайн");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПереноса)
                    .HasColumnName("Дата переноса")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование).HasMaxLength(10);

                entity.Property(e => e.НомерЗаявки).HasColumnName("Номер заявки");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Откуда)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Перенести).HasMaxLength(15);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СписокЗаявокПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок поставки");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаФактаПрихода)
                    .HasColumnName("Дата факта прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Номер).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЗаявокПоставкиNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список заявок поставки NEW");

                entity.Property(e => e.Валюта).HasMaxLength(50);

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Сумма).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокИзмененийСкидки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список изменений скидки");

                entity.HasIndex(e => e.ОтсрочкаОт)
                    .HasName("IX_Список изменений скидки")
                    .IsUnique();

                entity.Property(e => e.ИзменениеСкидки)
                    .HasColumnName("Изменение скидки")
                    .HasColumnType("decimal(6, 3)");

                entity.Property(e => e.НомерСтроки).HasColumnName("Номер строки");

                entity.Property(e => e.ОтсрочкаДо).HasColumnName("Отсрочка_до");

                entity.Property(e => e.ОтсрочкаОт).HasColumnName("Отсрочка_от");
            });

            modelBuilder.Entity<СписокИсполнений>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список исполнений");

                entity.HasIndex(e => e.IdИсполненения)
                    .HasName("IX_Список исполнений")
                    .IsUnique();

                entity.Property(e => e.IdИсполненения)
                    .IsRequired()
                    .HasColumnName("ID исполненения")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Исполнение)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокИсполненийДверейНовый>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список исполнений дверей новый");

                entity.HasIndex(e => e.IdИсполненения)
                    .HasName("IX_Список исполнений дверей новый")
                    .IsUnique();

                entity.Property(e => e.IdИсполненения)
                    .IsRequired()
                    .HasColumnName("ID исполненения")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.АналогДетали)
                    .HasColumnName("Аналог_Детали")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.АналогПоставки)
                    .HasColumnName("Аналог_Поставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Исполнение).HasMaxLength(250);

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(8)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокИсполненийДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список исполнений двери");

                entity.HasIndex(e => e.IdИсполненения)
                    .HasName("IX_Список исполнений двери")
                    .IsUnique();

                entity.Property(e => e.IdИсполненения)
                    .IsRequired()
                    .HasColumnName("ID исполненения")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.АналогПоставки)
                    .HasColumnName("Аналог_Поставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Исполнение)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокИсполненийЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список исполнений зависимости");

                entity.HasIndex(e => new { e.IdИсполнения, e.IdКонструкции })
                    .HasName("IX_Список исполнений зависимости")
                    .IsUnique();

                entity.Property(e => e.IdИсполнения)
                    .HasColumnName("ID исполнения")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокИсполненийПоЗамкам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список исполнений по замкам");

                entity.Property(e => e.IdИсполненения)
                    .HasColumnName("ID исполненения")
                    .HasMaxLength(2);

                entity.Property(e => e.L3)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.L4)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Исполнение).HasMaxLength(50);

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasMaxLength(46);
            });

            modelBuilder.Entity<СписокИсполненийСпецификация>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список исполнений спецификация");

                entity.HasIndex(e => e.IdСпецификации)
                    .HasName("IX_Список исполнений спецификация")
                    .IsUnique();

                entity.Property(e => e.IdИсполнения)
                    .IsRequired()
                    .HasColumnName("ID исполнения")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.IdСпецификации)
                    .HasColumnName("ID спецификации")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.АналогДетали)
                    .HasColumnName("Аналог_Детали")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.АналогПоставки)
                    .HasColumnName("Аналог_Поставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Исполнение).HasMaxLength(250);

                entity.Property(e => e.Количество)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокИсточников>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список источников");

                entity.HasIndex(e => e.IdИсточника)
                    .HasName("IX_Список источников")
                    .IsUnique();

                entity.Property(e => e.IdИсточника)
                    .HasColumnName("ID источника")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Источник).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКПродажеДилерНовТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список к продаже_дилер_нов тмп");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.Регион, e.Userid, e.НомерЗаказа })
                    .HasName("IX_Список к продаже_дилер_нов тмп")
                    .IsUnique();

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Клиент).HasMaxLength(150);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(520);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер_Заказа");

                entity.Property(e => e.ОтрицательноеКолВо)
                    .HasColumnName("Отрицательное кол-во")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Площадка).HasMaxLength(50);

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион_Заказа");

                entity.Property(e => e.Свободно).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКампаний>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кампаний");

                entity.HasIndex(e => e.IdКампании)
                    .HasName("IX_Список кампаний")
                    .IsUnique();

                entity.Property(e => e.IdКампании)
                    .HasColumnName("ID кампании")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Кампания)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокКаналовСбыта>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список каналов сбыта");

                entity.HasIndex(e => e.IdКаналаСбыта)
                    .HasName("IX_Список каналов сбыта")
                    .IsUnique();

                entity.Property(e => e.IdКаналаСбыта)
                    .HasColumnName("ID канала сбыта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.КаналСбыта)
                    .HasColumnName("Канал сбыта")
                    .HasMaxLength(150);

                entity.Property(e => e.КодСортировки).HasColumnName("Код сортировки");

                entity.Property(e => e.Кратко).HasMaxLength(7);
            });

            modelBuilder.Entity<СписокКат>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кат");

                entity.HasIndex(e => e.IdКат)
                    .HasName("IX_Список кат")
                    .IsUnique();

                entity.Property(e => e.IdКат).HasColumnName("ID_кат");

                entity.Property(e => e.Кат).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКатегорий>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список категорий");

                entity.HasIndex(e => e.Категория)
                    .HasName("IX_Список категорий")
                    .IsUnique();

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(80);
            });

            modelBuilder.Entity<СписокКатегорийДверей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список категорий дверей");

                entity.HasIndex(e => e.IdКатегории)
                    .HasName("IX_Список категорий дверей")
                    .IsUnique();

                entity.Property(e => e.IdКатегории)
                    .IsRequired()
                    .HasColumnName("ID категории")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКатегорийДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список категорий дилеров");

                entity.HasIndex(e => e.IdКатегории)
                    .HasName("IX_Список категорий дилеров")
                    .IsUnique();

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Категория).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКатегорийКонтактов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список категорий контактов");

                entity.HasIndex(e => e.IdКатегории)
                    .HasName("IX_Список категорий контактов")
                    .IsUnique();

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.КатегорияКонтакта)
                    .IsRequired()
                    .HasColumnName("Категория контакта")
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокКатегорийПоставщиков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список категорий поставщиков");

                entity.HasIndex(e => e.IdКатегории)
                    .HasName("IX_Список категорий поставщиков")
                    .IsUnique();

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Категория).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКатегорийСтатистика>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список категорий статистика");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список категорий статистика")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Категория)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокКатегорийТоваров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список категорий товаров");

                entity.HasIndex(e => new { e.Код, e.КодТипа })
                    .HasName("IX_Список категорий товаров")
                    .IsUnique();

                entity.Property(e => e.КатегорияТовара)
                    .HasColumnName("Категория товара")
                    .HasMaxLength(50);

                entity.Property(e => e.Код).HasMaxLength(2);

                entity.Property(e => e.КодТипа).HasColumnName("Код типа");
            });

            modelBuilder.Entity<СписокКлассовВзломостойкости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список классов взломостойкости");

                entity.HasIndex(e => e.IdСертификата)
                    .HasName("IX_Список классов взломостойкости")
                    .IsUnique();

                entity.Property(e => e.IdСертификата)
                    .HasColumnName("ID сертификата")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Примечание).HasMaxLength(50);

                entity.Property(e => e.Сертификат).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКлассовДверей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список классов дверей");

                entity.HasIndex(e => e.IdКласса)
                    .HasName("IX_Список классов дверей_1");

                entity.HasIndex(e => new { e.IdТипа, e.IdКатегории })
                    .HasName("IX_Список классов дверей")
                    .IsUnique();

                entity.Property(e => e.IdКатегории)
                    .IsRequired()
                    .HasColumnName("ID категории")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКласса)
                    .HasColumnName("ID класса")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdТипа)
                    .IsRequired()
                    .HasColumnName("ID типа")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Тип)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКлиентов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список клиентов");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список клиентов")
                    .IsUnique();

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Список клиентов_1")
                    .IsUnique();

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email1).HasMaxLength(50);

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idkart)
                    .HasColumnName("IDkart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idvo)
                    .HasColumnName("IDVO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.UserId)
                    .HasColumnName("User Id")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Изменен).HasDefaultValueSql("((1))");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.История).HasMaxLength(100);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Окнх)
                    .HasColumnName("ОКНХ")
                    .HasMaxLength(80);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.РассылкаEmail)
                    .HasColumnName("Рассылка_email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.РассылкаEmail1)
                    .HasColumnName("Рассылка_email1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.РуководительДляСервиса)
                    .HasColumnName("Руководитель для сервиса")
                    .HasMaxLength(100);

                entity.Property(e => e.СНдс)
                    .HasColumnName("С_НДС")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефоны).HasMaxLength(50);

                entity.Property(e => e.ТелефоныДляСервиса)
                    .HasColumnName("Телефоны для сервиса")
                    .HasMaxLength(100);

                entity.Property(e => e.ТипКлиента).HasColumnName("Тип клиента");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокКлиентовПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список клиентов поставки");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список клиентов поставки")
                    .IsUnique();

                entity.HasIndex(e => e.КодВ1с)
                    .HasName("IX_Список клиентов поставки_2");

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Список клиентов поставки_1");

                entity.Property(e => e.Ecbs)
                    .HasColumnName("ECBS")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Email)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Idkart)
                    .HasColumnName("IDkart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idvo)
                    .HasColumnName("IDVO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.IdСтраны)
                    .HasColumnName("ID страны")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(20);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(200);

                entity.Property(e => e.Грузополучатель).HasMaxLength(200);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(200);

                entity.Property(e => e.ДатаВвода)
                    .HasColumnName("Дата ввода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Дилер).HasDefaultValueSql("((1))");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.ИсточникИнформации)
                    .HasColumnName("Источник информации")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Клиент).HasMaxLength(50);

                entity.Property(e => e.КодВ1с)
                    .HasColumnName("Код в 1С")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Контакт)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(20);

                entity.Property(e => e.Менеджер).HasDefaultValueSql("((0))");

                entity.Property(e => e.МобильныйТелефон)
                    .HasColumnName("Мобильный телефон")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Окнх)
                    .HasColumnName("ОКНХ")
                    .HasMaxLength(80);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.Отправка).HasDefaultValueSql("((0))");

                entity.Property(e => e.Охотник).HasDefaultValueSql("((0))");

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(50);

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.СрокОплаты)
                    .HasColumnName("Срок оплаты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефоны).HasMaxLength(30);

                entity.Property(e => e.ТипКлиента)
                    .HasColumnName("Тип клиента")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.Факс)
                    .HasMaxLength(50)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокКлиентовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список клиентов регион");

                entity.HasIndex(e => e.RecKl)
                    .HasName("IX_Список клиентов регион_4")
                    .IsUnique();

                entity.HasIndex(e => e.Клиент)
                    .HasName("IX_Список клиентов регион_2");

                entity.HasIndex(e => new { e.Id, e.Регион })
                    .HasName("IX_Список клиентов регион")
                    .IsUnique()
                    .IsClustered();

                entity.HasIndex(e => new { e.Idvo, e.Регион })
                    .HasName("IX_Список клиентов регион_3");

                entity.HasIndex(e => new { e.Наименование, e.Регион })
                    .HasName("IX_Список клиентов регион_1")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Email1).HasMaxLength(50);

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idkart)
                    .HasColumnName("IDkart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idvo)
                    .HasColumnName("IDVO")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВыставки)
                    .HasColumnName("ID выставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.RecKl)
                    .HasColumnName("Rec_kl")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ГрузополучательНакладная)
                    .HasColumnName("Грузополучатель накладная")
                    .HasMaxLength(255);

                entity.Property(e => e.Дилер).HasDefaultValueSql("((1))");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("(N'-')");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.Клиент)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.КппСфИзАдреса).HasColumnName("КПП_СФ_из_Адреса");

                entity.Property(e => e.КппТорг12)
                    .HasColumnName("КПП_ТОРГ12")
                    .HasMaxLength(10);

                entity.Property(e => e.МаксимальныйКредит).HasColumnName("Максимальный кредит");

                entity.Property(e => e.Менеджер).HasDefaultValueSql("((0))");

                entity.Property(e => e.МткХозяин)
                    .HasColumnName("МТК_Хозяин")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0.2))");

                entity.Property(e => e.Огрн)
                    .HasColumnName("ОГРН")
                    .HasMaxLength(50);

                entity.Property(e => e.Окнх)
                    .HasColumnName("ОКНХ")
                    .HasMaxLength(80);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(50);

                entity.Property(e => e.ОкпоПлательщика)
                    .HasColumnName("ОКПО плательщика")
                    .HasMaxLength(50);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.РассылкаEmail)
                    .HasColumnName("Рассылка_email")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.РассылкаEmail1)
                    .HasColumnName("Рассылка_email1")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.РегионХозяин)
                    .HasColumnName("Регион_Хозяин")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.СНдс)
                    .HasColumnName("С_НДС")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Скидка).HasDefaultValueSql("((0))");

                entity.Property(e => e.СрокОплаты)
                    .HasColumnName("Срок оплаты")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефоны).HasMaxLength(40);

                entity.Property(e => e.ТипКлиента)
                    .HasColumnName("Тип клиента")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокКлиентовФилиалТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список клиентов филиал тмп");

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Список клиентов филиал тмп")
                    .IsUnique();

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(200)
                    .IsFixedLength();

                entity.Property(e => e.Города)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Индекс)
                    .HasMaxLength(6)
                    .IsFixedLength();

                entity.Property(e => e.История)
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(40)
                    .IsFixedLength();

                entity.Property(e => e.Телефоны)
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокКлиентовЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список клиентов ЦО");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdГорода)
                    .IsRequired()
                    .HasColumnName("ID города")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Otdel)
                    .IsRequired()
                    .HasColumnName("otdel")
                    .HasMaxLength(10);

                entity.Property(e => e.Skidka).HasColumnName("skidka");

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.УлицаДом)
                    .IsRequired()
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<СписокКодовБдр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список Кодов БДР");

                entity.HasIndex(e => e.IdКодаБдр)
                    .HasName("IX_Список Кодов БДР")
                    .IsUnique();

                entity.Property(e => e.IdКодаБдр).HasColumnName("ID кода БДР");

                entity.Property(e => e.КодБдр)
                    .HasColumnName("Код БДР")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКодовИзготовителя>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кодов изготовителя");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список кодов изготовителя")
                    .IsUnique();

                entity.Property(e => e.Код).HasMaxLength(2);

                entity.Property(e => e.ТипТовара)
                    .HasColumnName("Тип товара")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКодовМоделей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кодов моделей");

                entity.HasIndex(e => new { e.Код, e.КодТипа, e.КодИзготовителя, e.КодКатегории })
                    .HasName("IX_Список кодов моделей")
                    .IsUnique();

                entity.Property(e => e.Код).HasMaxLength(2);

                entity.Property(e => e.КодИзготовителя)
                    .HasColumnName("Код изготовителя")
                    .HasMaxLength(2);

                entity.Property(e => e.КодКатегории)
                    .HasColumnName("Код категории")
                    .HasMaxLength(2);

                entity.Property(e => e.КодТипа).HasColumnName("Код типа");

                entity.Property(e => e.Модель).HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(200);

                entity.Property(e => e.СтараяМодель)
                    .HasColumnName("Старая модель")
                    .HasMaxLength(50);

                entity.Property(e => e.СтароеНаименование)
                    .HasColumnName("Старое наименование")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<СписокКодовОкраски>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кодов окраски");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список кодов окраски")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции).HasColumnName("ID конструкции");

                entity.Property(e => e.АналогПоставки)
                    .HasColumnName("Аналог_Поставки")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Двери).HasDefaultValueSql("((0))");

                entity.Property(e => e.Код).HasMaxLength(2);

                entity.Property(e => e.КодRal)
                    .HasColumnName("Код RAL")
                    .HasMaxLength(10);

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(8)
                    .IsFixedLength();

                entity.Property(e => e.Кратко).HasMaxLength(20);

                entity.Property(e => e.НаименованиеАнглийское)
                    .HasColumnName("Наименование английское")
                    .HasMaxLength(100);

                entity.Property(e => e.Окраска).HasMaxLength(100);

                entity.Property(e => e.РасходМ2)
                    .HasColumnName("Расход_м2")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаКраски)
                    .HasColumnName("Цена_краски")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокКодовТнвд>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кодов ТНВД");

                entity.HasIndex(e => e.RecId)
                    .HasName("IX_Список кодов ТНВД_1")
                    .IsUnique();

                entity.HasIndex(e => e.КодыТнвд)
                    .HasName("IX_Список кодов ТНВД");

                entity.Property(e => e.RecId)
                    .HasColumnName("RecID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.КодыТнвд)
                    .HasColumnName("Коды ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.ОписаниеКода)
                    .HasColumnName("Описание кода")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокКонструкций>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список конструкций");

                entity.HasIndex(e => e.IdКонструкции)
                    .HasName("IX_Список конструкций")
                    .IsUnique();

                entity.HasIndex(e => e.Конструкция)
                    .HasName("IX_Список конструкций_1")
                    .IsUnique();

                entity.Property(e => e.IdЗамка)
                    .HasColumnName("ID замка")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗамкаДоп)
                    .HasColumnName("ID замка_доп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.IdКласса).HasColumnName("ID класса");

                entity.Property(e => e.IdКонструкции)
                    .IsRequired()
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdНаполнителя)
                    .HasColumnName("ID наполнителя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПолотна)
                    .HasColumnName("ID полотна")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdТипа)
                    .HasColumnName("ID типа")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЗамков)
                    .HasColumnName("Кол_замков")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолКонтуров)
                    .HasColumnName("Кол_Контуров")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Конструкция)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Короб).HasMaxLength(255);

                entity.Property(e => e.КоробТолщина)
                    .HasColumnName("Короб_Толщина")
                    .HasMaxLength(50);

                entity.Property(e => e.Петли).HasMaxLength(50);

                entity.Property(e => e.ТольщинаПолотна)
                    .HasColumnName("Тольщина_полотна")
                    .HasMaxLength(20);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаЗамка)
                    .HasColumnName("Цена_замка")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаЗамкаДоп)
                    .HasColumnName("Цена_замка_доп")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокКонструкцийНовый>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список конструкций новый");

                entity.HasIndex(e => e.IdКонструкции)
                    .HasName("IX_Список конструкций новый")
                    .IsUnique();

                entity.HasIndex(e => e.Конструкция)
                    .HasName("IX_Список конструкций новый_1")
                    .IsUnique();

                entity.Property(e => e.IdЗамка)
                    .HasColumnName("ID замка")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЗамкаДоп)
                    .HasColumnName("ID замка_доп")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.IdКласса).HasColumnName("ID класса");

                entity.Property(e => e.IdКонструкции)
                    .IsRequired()
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdНаполнителя)
                    .HasColumnName("ID наполнителя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdПолотна)
                    .HasColumnName("ID полотна")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdТипа)
                    .HasColumnName("ID типа")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолЗамков)
                    .HasColumnName("Кол_замков")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КолКонтуров)
                    .HasColumnName("Кол_Контуров")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Конструкция)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Короб).HasMaxLength(255);

                entity.Property(e => e.КоробТолщина)
                    .HasColumnName("Короб_Толщина")
                    .HasMaxLength(50);

                entity.Property(e => e.Петли).HasMaxLength(50);

                entity.Property(e => e.ТольщинаПолотна)
                    .HasColumnName("Тольщина_полотна")
                    .HasMaxLength(20);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаЗамка)
                    .HasColumnName("Цена_замка")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаЗамкаДоп)
                    .HasColumnName("Цена_замка_доп")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокКонтактов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список контактов");

                entity.HasIndex(e => e.КодКонтакта)
                    .HasName("IX_Список контактов")
                    .IsUnique();

                entity.Property(e => e.Ext1).HasMaxLength(20);

                entity.Property(e => e.Ext2).HasMaxLength(20);

                entity.Property(e => e.IdКлиента)
                    .HasColumnName("ID клиента")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdРаботника)
                    .HasColumnName("ID работника")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаКонтакта)
                    .HasColumnName("Дата контакта")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_Клиент")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Информация).HasMaxLength(255);

                entity.Property(e => e.КодКонтакта)
                    .HasColumnName("Код контакта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.КонтактноеЛицо)
                    .HasColumnName("Контактное лицо")
                    .HasMaxLength(150);

                entity.Property(e => e.Конф2006).HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.ТипКонтакта).HasColumnName("Тип контакта");

                entity.Property(e => e.Файл).HasColumnType("image");

                entity.Property(e => e.ФайлВыставка)
                    .HasColumnName("Файл_выставка")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<СписокКонтактовПоставщиков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список контактов поставщиков");

                entity.HasIndex(e => e.КодКонтакта)
                    .HasName("IX_Список контактов поставщиков")
                    .IsUnique();

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdРаботника).HasColumnName("ID работника");

                entity.Property(e => e.ДатаКонтакта)
                    .HasColumnName("Дата контакта")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_Клиент");

                entity.Property(e => e.Должность)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Значение)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Информация).HasMaxLength(255);

                entity.Property(e => e.КодКонтакта)
                    .HasColumnName("Код контакта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.КонтактноеЛицо)
                    .HasColumnName("Контактное лицо")
                    .HasMaxLength(150);

                entity.Property(e => e.МобильныйТелефон)
                    .HasColumnName("Мобильный телефон")
                    .HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Факс).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокКонтактовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список контактов регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Список контактов регион_1")
                    .IsUnique();

                entity.Property(e => e.Ext1).HasMaxLength(20);

                entity.Property(e => e.Ext2).HasMaxLength(20);

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdРаботника)
                    .HasColumnName("ID работника")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ГруппаПродукта)
                    .HasColumnName("Группа продукта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ДатаЗадачи)
                    .HasColumnName("Дата задачи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаКонтакта)
                    .HasColumnName("Дата контакта")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлана)
                    .HasColumnName("Дата плана")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаФакта)
                    .HasColumnName("Дата факта")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_Клиент")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Задача).HasMaxLength(255);

                entity.Property(e => e.Информация).HasMaxLength(255);

                entity.Property(e => e.Исполнение).HasMaxLength(255);

                entity.Property(e => e.КодКонтакта).HasColumnName("Код контакта");

                entity.Property(e => e.КонтактноеЛицо)
                    .HasColumnName("Контактное лицо")
                    .HasMaxLength(150);

                entity.Property(e => e.Конф2006).HasDefaultValueSql("((0))");

                entity.Property(e => e.Решена).HasDefaultValueSql("((0))");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.ТипКонтакта).HasColumnName("Тип контакта");

                entity.Property(e => e.Файл).HasColumnType("image");

                entity.Property(e => e.ФайлВыставка)
                    .HasColumnName("Файл_выставка")
                    .HasColumnType("image");
            });

            modelBuilder.Entity<СписокКоробок>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список коробок");

                entity.HasIndex(e => e.IdКоробки)
                    .HasName("IX_Список коробок")
                    .IsUnique();

                entity.Property(e => e.IdКоробки)
                    .IsRequired()
                    .HasColumnName("ID коробки")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Коробка)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокКредитов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кредитов");

                entity.HasIndex(e => e.IdКредита)
                    .HasName("IX_Список кредитов")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdКредита)
                    .HasColumnName("ID кредита")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("USER ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Тк)
                    .HasColumnName("ТК")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<СписокКредитовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список кредитов регион");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_Список кредитов регион_1");

                entity.HasIndex(e => e.IdКредита)
                    .HasName("IX_Список кредитов регион")
                    .IsUnique();

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Список кредитов регион_2");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdКредита)
                    .HasColumnName("ID кредита")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("USER ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Тк)
                    .HasColumnName("ТК")
                    .HasColumnType("numeric(18, 0)");
            });

            modelBuilder.Entity<СписокКритериев>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список критериев");

                entity.HasIndex(e => e.IdКритерия)
                    .HasName("IX_Список критериев")
                    .IsUnique();

                entity.Property(e => e.IdКритерия)
                    .HasColumnName("ID критерия")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Группа)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Критерий)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<СписокЛояльностей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список лояльностей");

                entity.HasIndex(e => e.IdЛояльности)
                    .HasName("IX_Список лояльностей")
                    .IsUnique();

                entity.Property(e => e.IdЛояльности).HasColumnName("ID лояльности");

                entity.Property(e => e.Лояльность).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокМашин>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список машин");

                entity.HasIndex(e => e.IdМашины)
                    .HasName("IX_Список машин")
                    .IsUnique();

                entity.Property(e => e.IdМашины)
                    .HasColumnName("ID машины")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Машина).HasMaxLength(255);

                entity.Property(e => e.Объем).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<СписокМесяцов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список месяцов");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Список месяцов")
                    .IsUnique();

                entity.Property(e => e.Месяц).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокМетодовДоставки>(entity =>
            {
                entity.ToTable("Список Методов доставки");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.НаименованиеEn)
                    .HasColumnName("Наименование EN")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокМетодовПеревозки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список методов перевозки");

                entity.HasIndex(e => e.IdMetodOfTransport)
                    .HasName("IX_Список методов перевозки")
                    .IsUnique();

                entity.Property(e => e.IdMetodOfTransport)
                    .HasColumnName("ID metod of transport")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdМетодаПеревозки).HasColumnName("ID метода перевозки");

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.СрокТранспортировки).HasColumnName("Срок транспортировки");
            });

            modelBuilder.Entity<СписокМоделей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список моделей");

                entity.HasIndex(e => new { e.IdМодели, e.IdГруппа, e.IdПодгруппы })
                    .HasName("IX_Список моделей")
                    .IsUnique();

                entity.Property(e => e.IdГруппа).HasColumnName("ID группа");

                entity.Property(e => e.IdМодели)
                    .IsRequired()
                    .HasColumnName("ID модели")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокМоделейГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список моделей групп");

                entity.Property(e => e.IdМодели)
                    .IsRequired()
                    .HasColumnName("ID модели")
                    .HasMaxLength(2)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокМоделейДерево>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список моделей дерево");

                entity.Property(e => e.IdГруппа).HasColumnName("ID группа");

                entity.Property(e => e.IdМодели)
                    .IsRequired()
                    .HasColumnName("ID модели")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокНакладныхПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список накладных поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Участок)
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.ФирмаНаз)
                    .HasColumnName("Фирма_наз")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокНаличияАнтипаники>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список наличия антипаники");

                entity.HasIndex(e => e.IdНаличия)
                    .HasName("IX_Список наличия антипаники")
                    .IsUnique();

                entity.Property(e => e.IdНаличия)
                    .IsRequired()
                    .HasColumnName("ID наличия")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Наличие)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокНаличияПластины>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список наличия пластины");

                entity.HasIndex(e => e.IdНаличия)
                    .HasName("IX_Список наличия пластины")
                    .IsUnique();

                entity.Property(e => e.IdНаличия)
                    .IsRequired()
                    .HasColumnName("ID наличия")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Наличие)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокНаполнителей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список наполнителей");

                entity.HasIndex(e => e.IdНаполнителя)
                    .HasName("IX_Список наполнителей")
                    .IsUnique();

                entity.HasIndex(e => e.Наполнитель)
                    .HasName("IX_Список наполнителей_1")
                    .IsUnique();

                entity.Property(e => e.IdНаполнителя)
                    .HasColumnName("ID наполнителя")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наполнитель).HasMaxLength(100);
            });

            modelBuilder.Entity<СписокНовыхГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список новых групп");

                entity.HasIndex(e => e.IdГруппы)
                    .HasName("IX_Список новых групп")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");
            });

            modelBuilder.Entity<СписокНовыхГруппДляКонтроля>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список новых групп для контроля");

                entity.HasIndex(e => e.IdГруппы)
                    .HasName("IX_Список новых групп для контроля")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");
            });

            modelBuilder.Entity<СписокНовыхМоделей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список новых моделей");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Список новых моделей")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СписокНовыхПодгрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список новых подгрупп");

                entity.HasIndex(e => e.IdПодгруппы)
                    .HasName("IX_Список новых подгрупп")
                    .IsUnique();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");
            });

            modelBuilder.Entity<СписокНовыхПодгруппДляКонтроля>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список новых подгрупп для контроля");

                entity.HasIndex(e => e.IdПодгруппы)
                    .HasName("IX_Список новых подгрупп для контроля")
                    .IsUnique();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");
            });

            modelBuilder.Entity<СписокНомеровМодификаций>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список номеров модификаций");

                entity.HasIndex(e => new { e.Номер, e.КодТипа, e.КодКатегории, e.КодИзготовителя, e.КодМодели })
                    .HasName("IX_Список номеров модификаций")
                    .IsUnique();

                entity.Property(e => e.КодИзготовителя)
                    .HasColumnName("Код изготовителя")
                    .HasMaxLength(2);

                entity.Property(e => e.КодКатегории)
                    .HasColumnName("Код категории")
                    .HasMaxLength(2);

                entity.Property(e => e.КодМодели)
                    .HasColumnName("Код модели")
                    .HasMaxLength(2);

                entity.Property(e => e.КодТипа).HasColumnName("Код типа");

                entity.Property(e => e.Модификация).HasMaxLength(100);

                entity.Property(e => e.Номер).HasMaxLength(2);

                entity.Property(e => e.Описание).HasMaxLength(100);

                entity.Property(e => e.СтараяМодель)
                    .HasColumnName("Старая модель")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокНомеровСертификатов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список номеров сертификатов");

                entity.HasIndex(e => e.IdНомера)
                    .HasName("IX_Список номеров сертификатов")
                    .IsUnique();

                entity.Property(e => e.IdНомера)
                    .HasColumnName("ID номера")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДействителенДо)
                    .HasColumnName("Действителен до")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.Номер1).HasMaxLength(20);

                entity.Property(e => e.Номер2).HasMaxLength(20);

                entity.Property(e => e.Номер3).HasMaxLength(20);
            });

            modelBuilder.Entity<СписокОбоснованийБлокировки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список обоснований блокировки");

                entity.HasIndex(e => e.IdПлатежа)
                    .HasName("IX_Список обоснований блокировки")
                    .IsUnique();

                entity.Property(e => e.IdПлатежа)
                    .HasColumnName("ID платежа")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокОбсуждений>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список обсуждений");

                entity.HasIndex(e => e.IdОбсуждения)
                    .HasName("IX_Список обсудений")
                    .IsUnique();

                entity.Property(e => e.IdОбсуждения)
                    .HasColumnName("ID обсуждения")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdТемы).HasColumnName("ID темы");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Кто)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Обсуждение)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Обсуждение1).HasMaxLength(255);
            });

            modelBuilder.Entity<СписокОбщихСтатей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список общих статей");

                entity.HasIndex(e => e.IdСтатьи)
                    .HasName("IX_Список общих статей")
                    .IsUnique();

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_Список общих статей_1");

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.IdСтатьи)
                    .HasColumnName("ID статьи")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdСубсчета).HasColumnName("ID субсчета");

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(6);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.Тип).HasMaxLength(5);
            });

            modelBuilder.Entity<СписокОбъединенныхГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список объединенных групп");

                entity.HasIndex(e => e.IdGroupOfGoods)
                    .HasName("IX_Список объединенных групп")
                    .IsUnique();

                entity.HasIndex(e => e.Сортировка)
                    .HasName("IX_Список объединенных групп_1");

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокОкраскиЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список окраски зависимости");

                entity.HasIndex(e => new { e.IdОкраски, e.IdКонструкции })
                    .HasName("IX_Список окраски зависимости")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdНомера)
                    .HasColumnName("ID номера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdОкраски)
                    .HasColumnName("ID окраски")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Норма)
                    .HasColumnType("decimal(12, 4)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Цена)
                    .HasColumnType("decimal(12, 4)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокОпераций>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список операций");

                entity.HasIndex(e => e.IdОперации)
                    .HasName("IX_Список операций")
                    .IsUnique();

                entity.Property(e => e.IdОперации).HasColumnName("ID операции");

                entity.Property(e => e.Операция).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокОперацийПоПриходу>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список операций по приходу");

                entity.HasIndex(e => e.Idоперации)
                    .HasName("IX_Список операций по приходу")
                    .IsUnique();

                entity.Property(e => e.Idоперации)
                    .HasColumnName("IDОперации")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Название).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокОснованийДляСписанияСоСклада>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список оснований для списания со склада");

                entity.HasIndex(e => e.Idоснования)
                    .HasName("IX_Список оснований для списания со склада")
                    .IsUnique();

                entity.Property(e => e.Idоснования)
                    .HasColumnName("IDОснования")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Название).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокОтветственныхПоПоставщикамПоставки>(entity =>
            {
                entity.HasKey(e => new { e.PostId, e.FactoryId });

                entity.ToTable("Список ответственных по поставщикам поставки");

                entity.Property(e => e.PostId).HasColumnName("PostID");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.GmanagerId).HasColumnName("GManagerID");

                entity.Property(e => e.ManagerId).HasColumnName("ManagerID");
            });

            modelBuilder.Entity<СписокОтделов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список отделов");

                entity.HasIndex(e => e.IdОтдела)
                    .HasName("IX_Список отделов")
                    .IsUnique();

                entity.Property(e => e.IdОтдела)
                    .HasColumnName("ID отдела")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Отдел)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокОткрываний>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список открываний");

                entity.HasIndex(e => e.IdОткрывания)
                    .HasName("IX_Список открываний")
                    .IsUnique();

                entity.Property(e => e.IdОткрывания)
                    .IsRequired()
                    .HasColumnName("ID открывания")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Открывание)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПанелей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список панелей");

                entity.HasIndex(e => e.IdПанели)
                    .HasName("IX_Список панелей")
                    .IsUnique();

                entity.Property(e => e.IdПанели)
                    .IsRequired()
                    .HasColumnName("ID панели")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Панель)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПанелейВнутренних>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список панелей внутренних");

                entity.HasIndex(e => e.Артикул)
                    .HasName("IX_Список панелей внутренних_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdПанели, e.IdТипа, e.IdКонструкции })
                    .HasName("IX_Список панелей внутренних")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdПанели)
                    .IsRequired()
                    .HasColumnName("ID панели")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'00')");

                entity.Property(e => e.IdТипа)
                    .HasColumnName("ID типа")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(8)
                    .IsFixedLength();

                entity.Property(e => e.Кратко).HasMaxLength(20);

                entity.Property(e => e.Панель)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Цена)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокПанелейВнутреннихЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список панелей внутренних зависимости");

                entity.HasIndex(e => new { e.IdКонструкции, e.IdПанелиТип })
                    .HasName("IX_Список панелей внутренних зависимости")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdПанелиТип)
                    .IsRequired()
                    .HasColumnName("ID панели_тип")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'00')");
            });

            modelBuilder.Entity<СписокПанелейНовый>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список панелей новый");

                entity.HasIndex(e => e.Артикул)
                    .HasName("IX_Список панелей новый_2")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdПанели, e.IdТипа, e.IdКонструкции })
                    .HasName("IX_Список панелей новый_1")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdПанели)
                    .IsRequired()
                    .HasColumnName("ID панели")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'00')");

                entity.Property(e => e.IdТипа)
                    .HasColumnName("ID типа")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(8)
                    .IsFixedLength();

                entity.Property(e => e.Кратко).HasMaxLength(20);

                entity.Property(e => e.Панель)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Цена)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокПанелейНовыйЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список панелей новый зависимости");

                entity.HasIndex(e => new { e.IdКонструкции, e.IdПанелиТип })
                    .HasName("IX_Список панелей новый зависимости")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdПанелиТип)
                    .IsRequired()
                    .HasColumnName("ID панели_тип")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("(N'00')");
            });

            modelBuilder.Entity<СписокПанелейСИсполнениями>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список панелей с исполнениями");

                entity.Property(e => e.IdПанели)
                    .IsRequired()
                    .HasColumnName("ID панели")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.L3)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.L4)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.L5)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Панель)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Перв)
                    .HasColumnName("перв")
                    .HasMaxLength(46);
            });

            modelBuilder.Entity<СписокПеревозчиков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список перевозчиков");

                entity.HasIndex(e => e.IdПеревозчика)
                    .HasName("IX_Список перевозчиков")
                    .IsUnique();

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdУсловийОплаты).HasColumnName("ID условий оплаты");

                entity.Property(e => e.ДатаАнализа)
                    .HasColumnName("Дата анализа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.КраткоеИмя)
                    .HasColumnName("Краткое имя")
                    .HasMaxLength(50);

                entity.Property(e => e.Перевозчик).HasMaxLength(50);

                entity.Property(e => e.Рейтинг).HasMaxLength(10);

                entity.Property(e => e.Страна).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПетель>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список петель");

                entity.HasIndex(e => e.IdПетли)
                    .HasName("IX_Список петель")
                    .IsUnique();

                entity.Property(e => e.IdПетли)
                    .IsRequired()
                    .HasColumnName("ID петли")
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.ТипПетли)
                    .IsRequired()
                    .HasColumnName("Тип петли")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокПлатежейПоСчетам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список платежей по счетам");

                entity.HasIndex(e => e.IdПлатежа)
                    .HasName("IX_Список платежей по счетам")
                    .IsUnique();

                entity.Property(e => e.IdПлатежа)
                    .HasColumnName("ID платежа")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПлощадок>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список площадок");

                entity.HasIndex(e => e.IdПлощади)
                    .HasName("IX_Список площадок")
                    .IsUnique();

                entity.Property(e => e.IdПлощади).HasColumnName("ID площади");

                entity.Property(e => e.Площадка).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПоОценке>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список по оценке");

                entity.HasIndex(e => e.IdБалла)
                    .HasName("IX_Список по оценке")
                    .IsUnique();

                entity.Property(e => e.IdБалла)
                    .HasColumnName("ID балла")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Балл).HasMaxLength(2);

                entity.Property(e => e.Наименование).HasMaxLength(200);
            });

            modelBuilder.Entity<СписокПоОценкеКд>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список по оценке КД");

                entity.HasIndex(e => e.IdБалла)
                    .HasName("IX_Список по оценке КД")
                    .IsUnique();

                entity.Property(e => e.IdБалла).HasColumnName("ID балла");

                entity.Property(e => e.Балл).HasMaxLength(2);

                entity.Property(e => e.Наименование).HasMaxLength(200);
            });

            modelBuilder.Entity<СписокПодгрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список подгрупп");

                entity.HasIndex(e => e.IdГруппы)
                    .HasName("IX_Список подгрупп_1");

                entity.HasIndex(e => new { e.Категория, e.IdПодгруппы })
                    .HasName("IX_Список подгрупп")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.KfХранения)
                    .HasColumnName("KF хранения")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.RedУзмк).HasColumnName("Red_УЗМК");

                entity.Property(e => e.StopУзмк).HasColumnName("Stop_УЗМК");

                entity.Property(e => e.YellowУзмк).HasColumnName("Yellow_УЗМК");

                entity.Property(e => e.Категория).HasDefaultValueSql("((1))");

                entity.Property(e => e.КодСортировки).HasColumnName("Код сортировки");

                entity.Property(e => e.Контролировать).HasDefaultValueSql("((0))");

                entity.Property(e => e.МаксимальнаяДатаПлана).HasColumnName("Максимальная дата плана");

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.РеагированиеУзмк).HasColumnName("Реагирование_УЗМК");

                entity.Property(e => e.ТоварнаяГруппа)
                    .HasColumnName("Товарная группа")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокПодгруппПод>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список подгрупп_под");

                entity.Property(e => e.IdПод).HasColumnName("Id_под");

                entity.Property(e => e.Под).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПодгруппРеагированиеФилиала>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список подгрупп_реагирование_филиала");

                entity.HasIndex(e => new { e.Регион, e.IdПодгруппы })
                    .HasName("IX_Список подгрупп_реагирование_филиала")
                    .IsUnique();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.RedФилиала).HasColumnName("Red_Филиала");

                entity.Property(e => e.StopФилиала).HasColumnName("Stop_Филиала");

                entity.Property(e => e.YellowФилиала).HasColumnName("Yellow_Филиала");

                entity.Property(e => e.НормативФилиала).HasColumnName("Норматив_Филиала");
            });

            modelBuilder.Entity<СписокПоддефектов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список поддефектов");

                entity.HasIndex(e => e.IdПодкодДефекта)
                    .HasName("IX_Список поддефектов")
                    .IsUnique();

                entity.Property(e => e.IdГруппы)
                    .HasColumnName("ID группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПодкодДефекта)
                    .HasColumnName("ID подкод дефекта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Группа).HasMaxLength(100);

                entity.Property(e => e.КодДефекта)
                    .HasColumnName("Код дефекта")
                    .HasMaxLength(4);

                entity.Property(e => e.ХарактерПоддефекта)
                    .HasColumnName("Характер поддефекта")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокПодразделенийРеестра>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список подразделений реестра");

                entity.HasIndex(e => e.IdПодразделения)
                    .HasName("IX_Список подразделений реестра")
                    .IsUnique();

                entity.Property(e => e.IdПодразделения)
                    .HasColumnName("ID подразделения")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПокупателей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список покупателей");

                entity.HasIndex(e => e.IdПокупателя)
                    .HasName("IX_Список покупателей")
                    .IsUnique();

                entity.Property(e => e.IdПокупателя)
                    .HasColumnName("ID покупателя")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Покупатель).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПолотен>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список полотен");

                entity.HasIndex(e => e.IdПолотна)
                    .HasName("IX_Список полотен")
                    .IsUnique();

                entity.Property(e => e.IdПолотна)
                    .IsRequired()
                    .HasColumnName("ID полотна")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Полотно)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПолотенВысота>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список полотен высота");

                entity.HasIndex(e => e.IdПолотна)
                    .HasName("IX_Список полотен высота")
                    .IsUnique();

                entity.Property(e => e.IdПолотна)
                    .IsRequired()
                    .HasColumnName("ID полотна")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Полотно)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПолотенШирина>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список полотен ширина");

                entity.HasIndex(e => e.IdПолотна)
                    .HasName("IX_Список полотен ширина")
                    .IsUnique();

                entity.Property(e => e.IdПолотна)
                    .IsRequired()
                    .HasColumnName("ID полотна")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Полотно)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПользователей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список пользователей");

                entity.HasIndex(e => e.IdСотрудника)
                    .HasName("IX_Список пользователей")
                    .IsUnique();

                entity.Property(e => e.IdСотрудника).HasColumnName("ID сотрудника");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.ИмяРегистрации)
                    .HasColumnName("Имя регистрации")
                    .HasMaxLength(50);

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокПораженийВТендере>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список поражений в тендере");

                entity.HasIndex(e => e.IdПричины)
                    .HasName("IX_Список поражений в тендере")
                    .IsUnique();

                entity.HasIndex(e => e.Причина)
                    .HasName("IX_Список поражений в тендере_1")
                    .IsUnique();

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокПоставщиков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список поставщиков");

                entity.HasIndex(e => e.IdПоставщика)
                    .HasName("IX_Список поставщиков")
                    .IsUnique();

                entity.Property(e => e.IdВалюты)
                    .HasColumnName("ID валюты")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdКатегории)
                    .HasColumnName("ID категории")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПост)
                    .HasColumnName("ID пост")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПоставщика)
                    .HasColumnName("ID поставщика")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПотребителя)
                    .HasColumnName("ID потребителя")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПредметовЗаказа)
                    .HasColumnName("ID предметов заказа")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdУсловийОплаты)
                    .HasColumnName("ID условий оплаты")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdУсловияХранения)
                    .HasColumnName("ID условия хранения")
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.БазисПоставки)
                    .HasColumnName("Базис поставки")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаПоследнегоАнализа)
                    .HasColumnName("Дата последнего анализа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПротокола)
                    .HasColumnName("Дата протокола")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Действующий)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Документы)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.Контакт).HasMaxLength(100);

                entity.Property(e => e.КраткоеИмя)
                    .HasColumnName("Краткое имя")
                    .HasMaxLength(50);

                entity.Property(e => e.МаксВремяЗадержки)
                    .HasColumnName("Макс_время задержки")
                    .HasMaxLength(10);

                entity.Property(e => e.ОбъемВходногоКонтроля)
                    .HasColumnName("Объем входного контроля")
                    .HasMaxLength(10);

                entity.Property(e => e.ОплатаЗаДней)
                    .HasColumnName("Оплата за дней")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Поставщик).HasMaxLength(150);

                entity.Property(e => e.Производитель).HasMaxLength(150);

                entity.Property(e => e.ПротоколУтверждения)
                    .HasColumnName("Протокол утверждения")
                    .HasMaxLength(20);

                entity.Property(e => e.РейтингПоставщика)
                    .HasColumnName("Рейтинг поставщика")
                    .HasMaxLength(10);

                entity.Property(e => e.Руководитель).HasMaxLength(100);

                entity.Property(e => e.СрокИзготовления)
                    .HasColumnName("Срок изготовления")
                    .HasMaxLength(10);

                entity.Property(e => e.СрокТранспортировки)
                    .HasColumnName("Срок транспортировки")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Страна).HasMaxLength(50);

                entity.Property(e => e.Утвержден)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СписокПоставщиковПромет>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список поставщиков промет");

                entity.HasIndex(e => e.Idпоставщика)
                    .HasName("IX_Список поставщиков промет")
                    .IsUnique();

                entity.Property(e => e.Bux)
                    .HasColumnName("BUX")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Idпоставщика)
                    .HasColumnName("IDПоставщика")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес1).HasMaxLength(150);

                entity.Property(e => e.Адрес2).HasMaxLength(150);

                entity.Property(e => e.Адрес3).HasMaxLength(150);

                entity.Property(e => e.Изготовитель)
                    .IsRequired()
                    .HasDefaultValueSql("(1)");

                entity.Property(e => e.КодИзготовителя)
                    .IsRequired()
                    .HasColumnName("Код изготовителя")
                    .HasMaxLength(2);

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.ПолноеНаименование)
                    .HasColumnName("Полное наименование")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокПоставщиковРеестра>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список поставщиков реестра");

                entity.HasIndex(e => e.IdПоставщика)
                    .HasName("IX_Список поставщиков реестра")
                    .IsUnique();

                entity.Property(e => e.IdПоставщика)
                    .HasColumnName("ID поставщика")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdРаботника)
                    .HasColumnName("ID работника")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Актуальный)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокПотребителей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список потребителей");

                entity.HasIndex(e => e.IdПотребителя)
                    .HasName("IX_Список потребителей")
                    .IsUnique();

                entity.Property(e => e.IdПотребителя)
                    .HasColumnName("ID потребителя")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПредметовЗаказов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список предметов заказов");

                entity.HasIndex(e => e.IdПредмета)
                    .HasName("IX_Список предметов заказов")
                    .IsUnique();

                entity.Property(e => e.IdПредмета)
                    .HasColumnName("ID предмета")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПретензий>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список претензий");

                entity.HasIndex(e => e.IdПретензии)
                    .HasName("IX_Список претензий")
                    .IsUnique();

                entity.Property(e => e.IdПретензии)
                    .HasColumnName("ID претензии")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Претензия).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПричин>(entity =>
            {
                entity.HasKey(e => new { e.IdПричины, e.Причина });

                entity.ToTable("Список причин");

                entity.HasIndex(e => new { e.IdПричины, e.Причина })
                    .HasName("IX_Список причин")
                    .IsUnique();

                entity.Property(e => e.IdПричины)
                    .HasColumnName("ID причины")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Причина)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокПричинДопскидок>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список причин допскидок");

                entity.HasIndex(e => e.IdПричины)
                    .HasName("IX_Список причин допскидок")
                    .IsUnique();

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");

                entity.Property(e => e.Причина)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокПричинОтказаОтТендера>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список причин отказа от тендера");

                entity.HasIndex(e => e.IdПричины)
                    .HasName("IX_Список причин отказа от тендера")
                    .IsUnique();

                entity.HasIndex(e => e.Причина)
                    .HasName("IX_Список причин отказа от тендера_1")
                    .IsUnique();

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокПричинТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список причин тмп");

                entity.HasIndex(e => new { e.IdПричины, e.Причина })
                    .HasName("IX_Список причин тмп")
                    .IsUnique();

                entity.Property(e => e.IdПричины).HasColumnName("ID причины");

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокПродажаРегионТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("СписокПродажаРегион_тмп");

                entity.HasIndex(e => new { e.IdСклада, e.IdТовара, e.UserId })
                    .HasName("IX_СписокПродажаРегион_тмп")
                    .IsUnique();

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.ОтрицательноеКолВо).HasColumnName("Отрицательное кол-во");

                entity.Property(e => e.Статус).HasMaxLength(3);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(150);

                entity.Property(e => e.Факт).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цена)
                    .HasColumnName("Цена_")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокПроектов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список проектов");

                entity.HasIndex(e => e.IdПроекта)
                    .HasName("IX_Список проектов")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПроекта)
                    .HasColumnName("ID проекта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ДатаНачала)
                    .HasColumnName("Дата начала")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОкончания)
                    .HasColumnName("Дата окончания")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодПроекта)
                    .IsRequired()
                    .HasColumnName("Код проекта")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(60)
                    .IsFixedLength();

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(60)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокПроизводств>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список производств");

                entity.HasIndex(e => e.IdПроизводства)
                    .HasName("IX_Список производств")
                    .IsUnique();

                entity.Property(e => e.IdПроизводства).HasColumnName("ID производства");

                entity.Property(e => e.Производство)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокПроизводственныхУчастков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список производственных участков");

                entity.HasIndex(e => new { e.IdУчастка, e.Завод })
                    .HasName("IX_Список производственных участков")
                    .IsUnique();

                entity.Property(e => e.IdУчастка).HasColumnName("ID участка");

                entity.Property(e => e.Kfam)
                    .HasColumnName("KFam")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.Участок).HasMaxLength(80);
            });

            modelBuilder.Entity<СписокПунктовПогрузки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список пунктов погрузки");

                entity.HasIndex(e => e.IdПункта)
                    .HasName("IX_Список пунктов погрузки")
                    .IsUnique();

                entity.Property(e => e.IdПункта)
                    .HasColumnName("ID пункта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ПунктПогрузки)
                    .HasColumnName("Пункт погрузки")
                    .HasMaxLength(255)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокРазмеровСтворок>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список размеров створок");

                entity.HasIndex(e => e.IdРазмера)
                    .HasName("IX_Список размеров створок")
                    .IsUnique();

                entity.Property(e => e.IdРазмера)
                    .IsRequired()
                    .HasColumnName("ID размера")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Размер)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокРазмеровСтворокЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список размеров створок зависимости");

                entity.HasIndex(e => new { e.IdСтворки, e.IdКонструкции })
                    .HasName("IX_Список размеров створок зависимости")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdСтворки).HasColumnName("ID створки");
            });

            modelBuilder.Entity<СписокРазрешений>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список разрешений");

                entity.HasIndex(e => e.IdРазрешения)
                    .HasName("IX_Список разрешений")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdРазрешения)
                    .HasColumnName("ID разрешения")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("USER ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокРазрешенийРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список разрешений регион");

                entity.HasIndex(e => e.IdРазрешения)
                    .HasName("IX_Список разрешений регион")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdРазрешения)
                    .HasColumnName("ID разрешения")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("USER ID");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Причина)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокРаспоряженийДвойныхКомусРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список распоряжений двойных комус регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СписокРаспоряженийДвойныхРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список распоряжений двойных регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");
            });

            modelBuilder.Entity<СписокРаспоряженийДляУдаленияВсеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список распоряжений для удаления все регион");

                entity.Property(e => e.Год).HasMaxLength(2);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<СписокРаспоряженийДляУдаленияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список распоряжений для удаления регион");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер-клиент");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Наклад).HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<СписокРегионов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список регионов");

                entity.HasIndex(e => e.IdРегиона)
                    .HasName("IX_Список регионов")
                    .IsUnique();

                entity.Property(e => e.IdРегиона)
                    .HasColumnName("ID региона")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Название).HasMaxLength(70);
            });

            modelBuilder.Entity<СписокРейтингов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список рейтингов");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список рейтингов")
                    .IsUnique();

                entity.Property(e => e.Код).ValueGeneratedOnAdd();

                entity.Property(e => e.Описание).HasMaxLength(255);

                entity.Property(e => e.Рейтинг).HasMaxLength(10);
            });

            modelBuilder.Entity<СписокРекламаций>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список рекламаций");

                entity.Property(e => e.Expr1).HasMaxLength(150);

                entity.Property(e => e.IdОрганизации).HasColumnName("ID организации");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ВидСервиса)
                    .HasColumnName("Вид сервиса")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаАкта)
                    .HasColumnName("Дата акта")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаВвода).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗакрытоФилиалом)
                    .HasColumnName("Дата закрыто филиалом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИспЗмк)
                    .HasColumnName("Дата исп ЗМК")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИспСкладом)
                    .HasColumnName("Дата исп складом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИсполнения)
                    .HasColumnName("Дата исполнения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИсполненияПоПлану)
                    .HasColumnName("Дата исполнения по плану")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПолученоФилиалом)
                    .HasColumnName("Дата получено филиалом")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КомуПередано)
                    .HasColumnName("Кому передано")
                    .HasMaxLength(60);

                entity.Property(e => e.Контакт).HasMaxLength(255);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.МодельЗамка)
                    .HasColumnName("Модель замка")
                    .HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НеУчтеноЗмк).HasColumnName("Не учтено ЗМК");

                entity.Property(e => e.НомерНакладной).HasColumnName("Номер накладной");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ОбъединитьСПретензией).HasColumnName("Объединить с Претензией");

                entity.Property(e => e.ОписаниеДефекта)
                    .HasColumnName("Описание дефекта")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтчетЗмк)
                    .HasColumnName("Отчет ЗМК")
                    .HasMaxLength(60);

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.РекламацияПризнана)
                    .HasColumnName("Рекламация признана")
                    .HasMaxLength(3);

                entity.Property(e => e.Решение).HasMaxLength(50);

                entity.Property(e => e.Статус)
                    .IsRequired()
                    .HasMaxLength(3);

                entity.Property(e => e.Телефон)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ТипКлиента).HasColumnName("Тип клиента");

                entity.Property(e => e.ФинансовыеПотери)
                    .HasColumnName("Финансовые потери")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<СписокРешений>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список решений");

                entity.HasIndex(e => e.IdРешения)
                    .HasName("IX_Список решений")
                    .IsUnique();

                entity.Property(e => e.IdРешения)
                    .HasColumnName("ID решения")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Решение).HasMaxLength(50);

                entity.Property(e => e.Требование).HasMaxLength(255);
            });

            modelBuilder.Entity<СписокРисунков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список рисунков");

                entity.HasIndex(e => e.IdРисунка)
                    .HasName("IX_Список рисунков")
                    .IsUnique();

                entity.Property(e => e.IdРисунка)
                    .IsRequired()
                    .HasColumnName("ID рисунка")
                    .HasMaxLength(3)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Рисунок)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокСервисов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список сервисов");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список сервисов")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.КодСервиса)
                    .HasColumnName("Код сервиса")
                    .HasMaxLength(2);

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСертификатов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список сертификатов");

                entity.HasIndex(e => e.IdСертификата)
                    .HasName("IX_Список сертификатов")
                    .IsUnique();

                entity.Property(e => e.IdСертификата)
                    .HasColumnName("ID сертификата")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Примечание).HasMaxLength(50);

                entity.Property(e => e.Сертификат).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСкидокДляТоваров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список скидок для товаров");

                entity.HasIndex(e => new { e.IdДилера, e.IdgroupOfGoods })
                    .HasName("IX_Список скидок для товаров")
                    .IsUnique();

                entity.Property(e => e.IdgroupOfGoods)
                    .HasColumnName("IDGroupOfGoods")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Skidka)
                    .HasColumnType("decimal(18, 3)")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СписокСкладов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список складов");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Список складов")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.IdГорода)
                    .HasColumnName("ID города")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdГородаПочт)
                    .HasColumnName("ID города_почт")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdРаботничкаФинплан)
                    .HasColumnName("ID работничка_финплан")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Директор).HasMaxLength(50);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.ИндексПочт)
                    .HasColumnName("Индекс_почт")
                    .HasMaxLength(6);

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН_КПП")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерТелефона)
                    .HasColumnName("Номер телефона")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(100);

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УлицаДомПочт)
                    .HasColumnName("Улица_дом_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.ФилиалЮр)
                    .HasColumnName("Филиал_юр")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокСкладов1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список складов_");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.IdГородаПочт).HasColumnName("ID города_почт");

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Директор).HasMaxLength(50);

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.ИндексПочт)
                    .HasColumnName("Индекс_почт")
                    .HasMaxLength(6);

                entity.Property(e => e.НомерТелефона)
                    .HasColumnName("Номер телефона")
                    .HasMaxLength(50);

                entity.Property(e => e.Примечание).HasMaxLength(100);

                entity.Property(e => e.Скл).HasMaxLength(10);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УлицаДомПочт)
                    .HasColumnName("Улица_дом_почт")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокСкладовПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список складов поставки");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Список складов поставки")
                    .IsUnique();

                entity.Property(e => e.IdСклада)
                    .HasColumnName("ID склада")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Склад).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСкладовПоставкиЗмк>(entity =>
            {
                entity.HasKey(e => e.IdСклада);

                entity.ToTable("Список складов поставки змк");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Список складов поставки змк")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.FirmIdUserSklad).HasColumnName("FirmID_User_Sklad");

                entity.Property(e => e.IdГорода)
                    .HasColumnName("ID города")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdГородаПочт)
                    .HasColumnName("ID города_почт")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IsMeteks).HasDefaultValueSql("((0))");

                entity.Property(e => e.Report21).HasColumnName("Report 21");

                entity.Property(e => e.Report94)
                    .HasColumnName("Report_9_4")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.TovDirection).HasMaxLength(50);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДляКарточкиЭксплуатации).HasColumnName("Для карточки эксплуатации");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.ИндексПочт)
                    .HasColumnName("Индекс_почт")
                    .HasMaxLength(6);

                entity.Property(e => e.КодСклада)
                    .IsRequired()
                    .HasColumnName("Код склада")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(70);

                entity.Property(e => e.Примечание).HasMaxLength(100);

                entity.Property(e => e.Прогноз).HasDefaultValueSql("((0))");

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УлицаДомПочт)
                    .HasColumnName("Улица_дом_почт")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСкладовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список складов регион");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Список складов регион_2");

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Список складов регион_1");

                entity.HasIndex(e => new { e.IdСклада, e.Регион })
                    .HasName("IX_Список складов регион")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecSkl)
                    .HasColumnName("Rec_skl")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.АдресСклада)
                    .HasColumnName("Адрес склада")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузополучательСклада)
                    .HasColumnName("Грузополучатель_склада")
                    .HasMaxLength(255);

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерДоговора)
                    .HasColumnName("Номер договора")
                    .HasMaxLength(50);

                entity.Property(e => e.ЦенаИзДоговора).HasColumnName("Цена из договора");
            });

            modelBuilder.Entity<СписокСотрудников>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список сотрудников");

                entity.HasIndex(e => e.IdСотрудника)
                    .HasName("IX_Список сотрудников")
                    .IsUnique();

                entity.Property(e => e.IdСотрудника)
                    .HasColumnName("ID сотрудника")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Сотрудник).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСтадий>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список стадий");

                entity.HasIndex(e => e.IdСтадии)
                    .HasName("IX_Список стадий")
                    .IsUnique();

                entity.Property(e => e.IdСтадии)
                    .HasColumnName("ID стадии")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Стадия)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСтандартов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список стандартов");

                entity.HasIndex(e => e.IdСтандарта)
                    .HasName("IX_Список стандартов")
                    .IsUnique();

                entity.Property(e => e.IdСтандарта)
                    .HasColumnName("ID стандарта")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Примечание).HasMaxLength(50);

                entity.Property(e => e.Стандарт).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСтатейДляCashFlow>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статей для cash flow");

                entity.HasIndex(e => e.IdСтатьиСписка)
                    .HasName("IX_Список статей для cash flow")
                    .IsUnique();

                entity.Property(e => e.IdСтатьиСписка)
                    .HasColumnName("ID статьи списка")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Сортировка).HasMaxLength(5);

                entity.Property(e => e.Сортировка1).HasMaxLength(5);
            });

            modelBuilder.Entity<СписокСтатейДляФилиалов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статей для филиалов");

                entity.HasIndex(e => e.IdСтатьи)
                    .HasName("IX_Список статей для филиалов")
                    .IsUnique();

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");
            });

            modelBuilder.Entity<СписокСтатейЗатрат>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статей затрат");

                entity.HasIndex(e => e.IdСтатьиЗатрат)
                    .HasName("IX_Список статей затрат")
                    .IsUnique();

                entity.Property(e => e.IdСтатьиЗатрат).HasColumnName("ID статьи затрат");

                entity.Property(e => e.Признак).HasMaxLength(50);

                entity.Property(e => e.СтатьяЗатрат)
                    .HasColumnName("Статья затрат")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокСтатейПрихода>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статей прихода");

                entity.HasIndex(e => e.IdСтатьи)
                    .HasName("IX_Список статей прихода")
                    .IsUnique();

                entity.Property(e => e.IdСтатьи)
                    .HasColumnName("ID статьи")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Код).HasMaxLength(2);

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСтатейРасхода>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статей расхода");

                entity.HasIndex(e => e.IdСтатьи)
                    .HasName("IX_Список статей расхода")
                    .IsUnique();

                entity.Property(e => e.IdСтатьи).HasColumnName("ID статьи");

                entity.Property(e => e.Код).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование BLG")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ПостоянныеПеременные).HasColumnName("Постоянные-Переменные");

                entity.Property(e => e.ПрямыеКосвенные).HasColumnName("Прямые-Косвенные");

                entity.Property(e => e.Слагаемые).HasMaxLength(5);
            });

            modelBuilder.Entity<СписокСтатусов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статусов");

                entity.HasIndex(e => e.IdСтатуса)
                    .HasName("IX_Список статусов")
                    .IsUnique();

                entity.Property(e => e.IdСтатуса)
                    .HasColumnName("ID статуса")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСтатусовБюджетности>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статусов бюджетности");

                entity.HasIndex(e => e.IdСтатусаБюджетности)
                    .HasName("IX_Список статусов бюджетности")
                    .IsUnique();

                entity.Property(e => e.IdСтатусаБюджетности)
                    .HasColumnName("ID статуса бюджетности")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСтатусовСчетов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список статусов счетов");

                entity.HasIndex(e => e.IdСтатусаСчета)
                    .HasName("IX_Список статусов счетов")
                    .IsUnique();

                entity.Property(e => e.IdСтатусаСчета)
                    .HasColumnName("ID статуса счета")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСтекол>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список стекол");

                entity.HasIndex(e => e.IdСтекла)
                    .HasName("IX_Список стекол")
                    .IsUnique();

                entity.Property(e => e.IdСтекла)
                    .IsRequired()
                    .HasColumnName("ID стекла")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Стекло)
                    .HasMaxLength(150)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокСтеколЗависимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список стекол зависимости");

                entity.HasIndex(e => new { e.IdСтекла, e.IdКонструкции })
                    .HasName("IX_Список стекол зависимости")
                    .IsUnique();

                entity.Property(e => e.IdКонструкции)
                    .HasColumnName("ID конструкции")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.IdСтекла).HasColumnName("ID стекла");
            });

            modelBuilder.Entity<СписокСтран>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список стран");

                entity.HasIndex(e => e.IdСтраны)
                    .HasName("IX_Список стран")
                    .IsUnique();

                entity.Property(e => e.IdСтраны)
                    .IsRequired()
                    .HasColumnName("ID страны")
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Код1)
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Код2)
                    .HasMaxLength(3)
                    .IsFixedLength();

                entity.Property(e => e.Страна)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокСтруктурныхПодразделений>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список структурных подразделений");

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_Список структурных подразделений")
                    .IsUnique();

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Доступ)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокСубсчетов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список субсчетов");

                entity.HasIndex(e => e.IdСубсчета)
                    .HasName("IX_Список субсчетов")
                    .IsUnique();

                entity.Property(e => e.IdСубсчета)
                    .HasColumnName("ID субсчета")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Obekt)
                    .IsRequired()
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Znak).HasDefaultValueSql("(1)");

                entity.Property(e => e.Завершен).HasMaxLength(15);

                entity.Property(e => e.Код).HasMaxLength(10);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.Строительство).HasMaxLength(3);
            });

            modelBuilder.Entity<СписокСчетов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список счетов");

                entity.HasIndex(e => e.IdКлиента)
                    .HasName("IX_Список счетов_2");

                entity.HasIndex(e => e.IdСтадии)
                    .HasName("IX_Список счетов_4");

                entity.HasIndex(e => e.ВнешнийНомер)
                    .HasName("IX_Список счетов_3");

                entity.HasIndex(e => e.Дата)
                    .HasName("IX_Список счетов_1");

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Список счетов")
                    .IsUnique();

                entity.Property(e => e.Avans)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idkart)
                    .HasColumnName("IDkart")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdАдреса)
                    .HasColumnName("ID адреса")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdВодителя)
                    .HasColumnName("ID водителя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdИсточника)
                    .HasColumnName("ID источника")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdПеревозчика)
                    .HasColumnName("ID перевозчика")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdПункта)
                    .HasColumnName("ID пункта")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтадии)
                    .HasColumnName("ID стадии")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Total)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ВнешнийНомер)
                    .HasColumnName("Внешний номер")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ВознаграждениеКлиенту)
                    .HasColumnName("Вознаграждение клиенту")
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВремяНаСклад)
                    .HasColumnName("Время на склад")
                    .HasColumnType("datetime");

                entity.Property(e => e.ВыписанаСчетФактура).HasColumnName("Выписана счет-фактура");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЖелаемая)
                    .HasColumnName("Дата желаемая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доставка).HasDefaultValueSql("((0))");

                entity.Property(e => e.Затраты).HasDefaultValueSql("((0))");

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.КтоДалСкидку)
                    .HasColumnName("Кто_дал_скидку")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Курс)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((-1))");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasDefaultValueSql("((0))");

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Основание)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПричинаСкидки)
                    .HasColumnName("Причина_скидки")
                    .HasMaxLength(50);

                entity.Property(e => e.ПроцСкидки)
                    .HasColumnType("decimal(5, 3)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Склад).HasDefaultValueSql("((-1))");

                entity.Property(e => e.СчетАнулирован).HasColumnName("Счет анулирован");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.ТранспортныеРасходы)
                    .HasColumnName("Транспортные расходы")
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ЧейКлиент).HasColumnName("Чей клиент");
            });

            modelBuilder.Entity<СписокСчетовВсехРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов всех регион");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<СписокСчетовДляПросмотраРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов для просмотра регион");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<СписокСчетовДляПроходной1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов для проходной1111");

                entity.Property(e => e.Dil).HasColumnName("dil");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СписокСчетовДляСканирования1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов для сканирования1111");

                entity.Property(e => e.Dil).HasColumnName("dil");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СписокСчетовДляСканированияРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов для сканирования регион");

                entity.Property(e => e.Dil).HasColumnName("dil");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СписокСчетовДляСканированияУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов для сканирования УЗМК");

                entity.Property(e => e.Dil).HasColumnName("dil");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СписокСчетовНеисполненныхРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов неисполненных регион");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<СписокСчетовНеоплаченныхРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов неоплаченных регион");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<СписокСчетовНеоплаченныхЧастичноОтгруженныхРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов неоплаченных частично отгруженных регион");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 4)");

                entity.Property(e => e.Фамилия)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<СписокСчетовЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список счетов ЦО");

                entity.Property(e => e.ВыписаноРаспоряжение).HasColumnName("Выписано распоряжение");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Номер).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<СписокТем>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список тем");

                entity.HasIndex(e => e.IdТемы)
                    .HasName("IX_Список тем")
                    .IsUnique();

                entity.Property(e => e.IdТемы)
                    .HasColumnName("ID темы")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.ДатаПодачи)
                    .HasColumnName("Дата подачи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КтоИнициировал)
                    .IsRequired()
                    .HasColumnName("Кто инициировал")
                    .HasMaxLength(150);

                entity.Property(e => e.ПервичноеПредложение)
                    .IsRequired()
                    .HasColumnName("Первичное предложение")
                    .HasMaxLength(255);

                entity.Property(e => e.Статус)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Тема)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокТендерныхГруппТовара>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список тендерных групп товара");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список тендерных групп товара")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокТендеровОтчет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("СписокТендеровОтчет");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Статус).HasMaxLength(50);

                entity.Property(e => e.Сто).HasColumnName("СТО");
            });

            modelBuilder.Entity<СписокТехпроцессов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список техпроцессов");

                entity.HasIndex(e => e.IdТехпроцесса)
                    .HasName("IX_Список техпроцессов")
                    .IsUnique();

                entity.Property(e => e.IdТехпроцесса)
                    .HasColumnName("ID техпроцесса")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Техпроцесс).HasMaxLength(150);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокТиповГрузов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов грузов");

                entity.HasIndex(e => e.IdТипаГруза)
                    .HasName("IX_Список типов грузов")
                    .IsUnique();

                entity.Property(e => e.IdТипаГруза)
                    .HasColumnName("ID типа груза")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТиповГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов групп");

                entity.HasIndex(e => e.IdТипа)
                    .HasName("IX_Список типов групп")
                    .IsUnique();

                entity.Property(e => e.IdТипа).HasColumnName("ID типа");

                entity.Property(e => e.ТипГруппы)
                    .HasColumnName("Тип группы")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТиповГруппПоставки>(entity =>
            {
                entity.HasKey(e => new { e.IdТипа, e.Group });

                entity.ToTable("Список типов групп поставки");

                entity.Property(e => e.IdТипа).HasColumnName("ID типа");

                entity.Property(e => e.ТипГруппы)
                    .HasColumnName("Тип группы")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТиповДверей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов дверей");

                entity.HasIndex(e => e.IdТипа)
                    .HasName("IX_Список типов дверей")
                    .IsUnique();

                entity.Property(e => e.IdТипа)
                    .IsRequired()
                    .HasColumnName("ID типа")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Тип)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТиповДокументов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов документов");

                entity.HasIndex(e => e.IdТипаДокумента)
                    .HasName("IX_Список типов документов_1")
                    .IsUnique();

                entity.Property(e => e.IdТипаДокумента).HasColumnName("ID типа документа");

                entity.Property(e => e.Наименование).HasMaxLength(150);
            });

            modelBuilder.Entity<СписокТиповДолгов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов долгов");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список типов долгов")
                    .IsUnique();

                entity.Property(e => e.Код)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ТипДолга)
                    .HasColumnName("Тип долга")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<СписокТиповКонтактов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов контактов");

                entity.HasIndex(e => e.Контакт)
                    .HasName("IX_Список типов контактов")
                    .IsUnique();

                entity.Property(e => e.Контакт)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<СписокТиповКонтрактов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов контрактов");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список типов контрактов")
                    .IsUnique();

                entity.Property(e => e.Код).ValueGeneratedOnAdd();

                entity.Property(e => e.ТипКонтракта)
                    .HasColumnName("Тип контракта")
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<СписокТиповПанелей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов панелей");

                entity.HasIndex(e => e.IdТипаПанели)
                    .HasName("IX_Список типов панелей")
                    .IsUnique();

                entity.Property(e => e.IdТипаПанели)
                    .IsRequired()
                    .HasColumnName("ID типа панели")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТипПанели)
                    .IsRequired()
                    .HasColumnName("Тип панели")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТиповПоставщика>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов поставщика");

                entity.HasIndex(e => e.IdТипаПоставщика)
                    .HasName("IX_Список типов поставщика")
                    .IsUnique();

                entity.Property(e => e.IdТипаПоставщика)
                    .HasColumnName("ID типа поставщика")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ТипПоставщика)
                    .IsRequired()
                    .HasColumnName("Тип поставщика")
                    .HasMaxLength(20)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокТиповСкладов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов складов");

                entity.HasIndex(e => e.IdТипаСклада)
                    .HasName("IX_Список типов складов")
                    .IsUnique();

                entity.Property(e => e.IdТипаСклада)
                    .HasColumnName("ID типа склада")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ТипСклада)
                    .HasColumnName("Тип склада")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТиповТоваровДляS>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список типов товаров для S");

                entity.HasIndex(e => e.Код)
                    .HasName("IX_Список типов товаров для S")
                    .IsUnique();

                entity.Property(e => e.ТипТовара)
                    .HasColumnName("Тип товара")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТоварныйГруппДеревоДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список товарный групп дерево двери");

                entity.HasIndex(e => e.IdGroupOfGoods)
                    .HasName("IX_Список товарный групп дерево двери")
                    .IsUnique();

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.КодСортировки)
                    .IsRequired()
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(2)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТоварныхГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список товарных групп");

                entity.HasIndex(e => e.IdGroupOfGoods)
                    .HasName("IX_Список товарных групп")
                    .IsUnique();

                entity.HasIndex(e => e.КодСортировки)
                    .HasName("IX_Список товарных групп_1");

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.КодСортировки).HasColumnName("Код сортировки");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТоварныхГруппПоставки>(entity =>
            {
                entity.HasKey(e => e.IdGroupOfGoods);

                entity.ToTable("Список товарных групп поставки");

                entity.HasIndex(e => e.IdGroupOfGoods)
                    .HasName("IX_Список товарный групп поставки")
                    .IsUnique();

                entity.Property(e => e.IdGroupOfGoods)
                    .HasColumnName("ID GroupOfGoods")
                    .ValueGeneratedNever();

                entity.Property(e => e.Litera).HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.НаименованиеBlg)
                    .HasColumnName("Наименование_BLG")
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокТоварныхГруппПоставкиOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список товарных групп поставки OLD");

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокТоварныхКатегорийПоставки>(entity =>
            {
                entity.HasKey(e => new { e.IdГруппы, e.IdПодгруппы, e.IdКатегории })
                    .HasName("PK_Список товарных категорий");

                entity.ToTable("Список товарных категорий поставки");

                entity.Property(e => e.IdГруппы).HasColumnName("ID Группы");

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.КодСортировки).HasColumnName("Код сортировки");

                entity.Property(e => e.КодТмс)
                    .HasColumnName("Код ТМС")
                    .HasMaxLength(2);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.ТолькоВЭксплуатацию)
                    .HasColumnName("Только в эксплуатацию")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокТоваровВPacking>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в PACKING");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.Expr2).HasMaxLength(50);

                entity.Property(e => e.Expr3).HasMaxLength(20);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.АдресГр)
                    .HasColumnName("Адрес гр")
                    .HasMaxLength(255);

                entity.Property(e => e.Валюта).HasMaxLength(50);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЕдинице).HasColumnName("Количество в единице");

                entity.Property(e => e.КоличествоВУпаковке).HasColumnName("Количество в упаковке");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование1).HasMaxLength(31);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ОписаниеКода)
                    .HasColumnName("Описание кода")
                    .HasMaxLength(255);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(15);

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Склад)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Срок).HasColumnType("smalldatetime");

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(20);

                entity.Property(e => e.УсловияПоставкиType).HasMaxLength(50);

                entity.Property(e => e.ФактМест).HasColumnName("Факт мест");

                entity.Property(e => e.Фил).HasMaxLength(15);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Юрлицо)
                    .HasColumnName("юрлицо")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокТоваровВЗаявке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в заявке_");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.ВозможноеКол)
                    .HasColumnName("Возможное кол")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерЗак).HasColumnName("Номер_зак");

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.План).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.След)
                    .HasMaxLength(20)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.УпаковкаНомер)
                    .HasColumnName("Упаковка номер")
                    .HasMaxLength(50);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокТоваровВЗаявкеДляВозвратов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в заявке для возвратов");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокТоваровВЗаявкеДляВозвратовПоставок>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в заявке для возвратов поставок");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.LastSebestoimost)
                    .HasColumnName("Last-Sebestoimost")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LastSsr)
                    .HasColumnName("Last-SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LastЦенаПродажи)
                    .HasColumnName("Last-Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LastЦенаПродажиR)
                    .HasColumnName("Last-Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SumКоличествоДляОтгрузки)
                    .HasColumnName("Sum-Количество для отгрузки")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<СписокТоваровВЗаявкеЗавод>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в заявке завод");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Возможно).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КОтгрузке)
                    .HasColumnName("К отгрузке")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомГтд)
                    .HasColumnName("Ном_ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ПричинаПодробно)
                    .HasColumnName("Причина подробно")
                    .HasMaxLength(80);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокТоваровВЗаявкеНаПереводРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в заявке на перевод регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Возможно).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КОтгрузке)
                    .HasColumnName("К отгрузке")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомГтд)
                    .HasColumnName("Ном_ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ПричинаПодробно)
                    .HasColumnName("Причина подробно")
                    .HasMaxLength(80);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокТоваровВЗаявкеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в заявке регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Возможно).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КОтгрузке)
                    .HasColumnName("К отгрузке")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомГтд)
                    .HasColumnName("Ном_ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.ПричинаПодробно)
                    .HasColumnName("Причина подробно")
                    .HasMaxLength(80);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокТоваровВПриходеПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в приходе поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОплаты)
                    .HasColumnName("Дата оплаты")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОприходования)
                    .HasColumnName("Дата оприходования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЕдИзм)
                    .HasColumnName("Ед_изм")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Итого).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КодТовара)
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоВЗаказе)
                    .HasColumnName("Количество в заказе")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НаименованиеОперации)
                    .HasColumnName("Наименование операции")
                    .HasMaxLength(30);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя)
                    .HasColumnName("Номер покупателя")
                    .HasMaxLength(11);

                entity.Property(e => e.Ордер).HasMaxLength(11);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете_new");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВозможноеКол)
                    .HasColumnName("Возможное кол")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Всего).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ВсегоR).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.Объем).HasColumnName("объем");

                entity.Property(e => e.ПроцСкидки).HasColumnType("decimal(5, 3)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 8)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаСоСкидкой)
                    .HasColumnName("Цена со скидкой")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеАванс>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете_АВАНС");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЦенаРуб)
                    .HasColumnName("Цена_руб")
                    .HasColumnType("decimal(36, 6)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеДляВозвратовПоставок>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете для возвратов поставок");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.LastSebestoimost)
                    .HasColumnName("Last-Sebestoimost")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.LastSsr)
                    .HasColumnName("Last-SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SumКоличество)
                    .HasColumnName("Sum-Количество")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.SumКоличествоДляОтгрузки)
                    .HasColumnName("Sum-Количество для отгрузки")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(25, 6)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(25, 6)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеДляНакладной>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете для накладной");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.Expr2).HasMaxLength(25);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SlovaNds)
                    .IsRequired()
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ПроцСкидки).HasColumnType("decimal(5, 3)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Цена).HasColumnType("decimal(36, 6)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеНов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете_нов");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаRДоДоп)
                    .HasColumnName("Базовая цена R до доп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ПроцСкидки).HasColumnType("decimal(5, 3)");

                entity.Property(e => e.Цена).HasColumnType("decimal(36, 6)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете регион");

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.Цена).HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеТт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете тт");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВозможноеКол)
                    .HasColumnName("Возможное кол")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Всего).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ВсегоR).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ПроцСкидки).HasColumnType("decimal(5, 3)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 8)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаСоСкидкой)
                    .HasColumnName("Цена со скидкой")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<СписокТоваровВСчетеФилиала>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров в счете филиала");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СписокТоваровДляСфАванс>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список товаров для СФ АВАНС");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdГорода).HasColumnName("ID города");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(50);

                entity.Property(e => e.RecordKreditnoty).HasColumnName("Record kreditnoty");

                entity.Property(e => e.Total).HasColumnType("money");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Год)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.КппЮрл)
                    .HasColumnName("КПП_юрл")
                    .HasMaxLength(9);

                entity.Property(e => e.Название).HasMaxLength(30);

                entity.Property(e => e.НаимАдр)
                    .HasColumnName("наим_адр")
                    .HasMaxLength(255);

                entity.Property(e => e.НаимЮрл)
                    .HasColumnName("наим_юрл")
                    .HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(100);

                entity.Property(e => e.Примечание).HasMaxLength(150);

                entity.Property(e => e.ПроцСкидки).HasColumnType("decimal(5, 3)");

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(150);

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");

                entity.Property(e => e.ЧейКлиент).HasColumnName("Чей клиент");

                entity.Property(e => e.ЮрлАдр)
                    .HasColumnName("юрл_адр")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СписокТолщинПанелей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список толщин панелей");

                entity.HasIndex(e => e.IdТолщины)
                    .HasName("IX_Список толщин панелей")
                    .IsUnique();

                entity.Property(e => e.IdТолщины)
                    .IsRequired()
                    .HasColumnName("ID толщины")
                    .HasMaxLength(1)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТолщинаПанели)
                    .IsRequired()
                    .HasColumnName("Толщина панели")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокУпаковки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список упаковки");

                entity.HasIndex(e => e.IdУпаковки)
                    .HasName("IX_Список упаковки")
                    .IsUnique();

                entity.Property(e => e.IdУпаковки)
                    .IsRequired()
                    .HasColumnName("ID упаковки")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Упаковка)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СписокУсловийОплаты>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список условий оплаты");

                entity.HasIndex(e => e.IdУсловия)
                    .HasName("IX_Список условий оплаты")
                    .IsUnique();

                entity.Property(e => e.IdУсловия).HasColumnName("ID условия");

                entity.Property(e => e.УсловиеОплаты)
                    .HasColumnName("Условие оплаты")
                    .HasMaxLength(150);

                entity.Property(e => e.УсловиеОплатыEn)
                    .HasColumnName("Условие оплаты EN")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокУсловийПродажи>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список условий продажи");

                entity.HasIndex(e => e.IdУсловия)
                    .HasName("IX_Список условий продажи")
                    .IsUnique();

                entity.Property(e => e.IdУсловия)
                    .HasColumnName("ID условия")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.УсловиеПродажи)
                    .HasColumnName("Условие продажи")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокУсловийХранения>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список условий хранения");

                entity.HasIndex(e => e.IdУсловия)
                    .HasName("IX_Список условий хранения")
                    .IsUnique();

                entity.Property(e => e.IdУсловия)
                    .HasColumnName("ID условия")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.УсловиеХранения)
                    .HasColumnName("Условие хранения")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокУчастков>(entity =>
            {
                entity.HasKey(e => e.IdУчастка)
                    .IsClustered(false);

                entity.ToTable("Список участков");

                entity.HasIndex(e => e.IdУчастка)
                    .HasName("IX_Список участков")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.IdУчастка).HasColumnName("ID участка");

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.КодУчастка)
                    .IsRequired()
                    .HasColumnName("Код участка")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Участок)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СписокФирм>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список фирм");

                entity.HasIndex(e => new { e.IdФирмы, e.ДилерКлиент })
                    .HasName("IX_Список фирм")
                    .IsUnique();

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокФирмДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Список фирм дилеров");

                entity.Property(e => e.IdФирмы)
                    .HasColumnName("ID фирмы")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокФирмПлательщиков>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список фирм плательщиков");

                entity.HasIndex(e => e.IdФирмыПлат)
                    .HasName("IX_Список фирм плательщиков")
                    .IsUnique();

                entity.Property(e => e.IdФирмыПлат)
                    .HasColumnName("ID фирмы плат")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Бухгалтер).HasMaxLength(50);

                entity.Property(e => e.Доступ)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН/КПП")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Ответственный).HasDefaultValueSql("((0))");

                entity.Property(e => e.Руководитель)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Статус).HasDefaultValueSql("((0))");

                entity.Property(e => e.ФирмаПлат)
                    .HasColumnName("Фирма плат")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокФирмПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список фирм поставки");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Список фирм поставки")
                    .IsUnique();

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRuВОфисе).HasColumnName("USD_RU в офисе");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(100);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(10);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокФирмРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список фирм регион");

                entity.HasIndex(e => new { e.IdФирмы, e.Регион })
                    .HasName("IX_Список фирм регион")
                    .IsUnique();

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRuВОфисе).HasColumnName("USD_RU в офисе");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресСклада)
                    .HasColumnName("Адрес склада")
                    .HasMaxLength(255)
                    .IsFixedLength();

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанкРекв29072014)
                    .HasColumnName("Банк_рекв_29072014")
                    .HasMaxLength(255);

                entity.Property(e => e.БанкРеквДвери)
                    .HasColumnName("Банк_рекв_двери")
                    .HasMaxLength(100);

                entity.Property(e => e.БанкРеквМедицина)
                    .HasColumnName("Банк_рекв_медицина")
                    .HasMaxLength(100);

                entity.Property(e => e.БанкРеквНовДвери)
                    .HasColumnName("Банк_рекв_нов_двери")
                    .HasMaxLength(255);

                entity.Property(e => e.БанкРеквРайфДв)
                    .HasColumnName("Банк_рекв_райф_дв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанкРеквРайфМед)
                    .HasColumnName("Банк_рекв_райф_мед")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.Бик29072014)
                    .HasColumnName("БИК_29072014")
                    .HasMaxLength(9);

                entity.Property(e => e.БикРайф)
                    .HasColumnName("БИК_райф")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанке29072014)
                    .HasColumnName("В_банке_29072014")
                    .HasMaxLength(50);

                entity.Property(e => e.ВБанкеРайфДв)
                    .HasColumnName("В_банке_райф_дв")
                    .HasMaxLength(50);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.ГрузовыеСтСкладДвери)
                    .HasColumnName("Грузовые_ст_склад_двери")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ГрузовыеСтСкладСим)
                    .HasColumnName("Грузовые_ст_склад_сим")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.ГрузотпрСос)
                    .HasColumnName("Грузотпр_сос")
                    .HasMaxLength(255);

                entity.Property(e => e.ГрузотпрСосНакл)
                    .HasColumnName("Грузотпр_сос_накл")
                    .HasMaxLength(255);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодРеквизита)
                    .HasColumnName("Код реквизита")
                    .HasMaxLength(50);

                entity.Property(e => e.КоличествоПерсонала).HasColumnName("Количество персонала");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(10);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НаличиеПогрСкладДвери)
                    .HasColumnName("Наличие_погр_склад_двери")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НаличиеПогрСкладСим)
                    .HasColumnName("Наличие_погр_склад_сим")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НаличиеШтабСкладДвери)
                    .HasColumnName("Наличие_штаб_склад_двери")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НаличиеШтабСкладСим)
                    .HasColumnName("Наличие_штаб_склад_сим")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Новости).HasMaxLength(255);

                entity.Property(e => e.Нпс)
                    .HasColumnName("НПС")
                    .HasMaxLength(12);

                entity.Property(e => e.ОсновныеФонды)
                    .HasColumnName("Основные фонды")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОсобыеУсловияДляСчета)
                    .HasColumnName("Особые условия для счета")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтпускПроизвел)
                    .HasColumnName("Отпуск произвел")
                    .HasMaxLength(100)
                    .IsFixedLength();

                entity.Property(e => e.ПлощадьОфис)
                    .HasColumnName("Площадь_офис")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.ПлощадьСкладДвери)
                    .HasColumnName("Площадь_склад_двери")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.ПлощадьСкладСим)
                    .HasColumnName("Площадь_склад_сим")
                    .HasColumnType("decimal(15, 3)");

                entity.Property(e => e.ПоставщикСос)
                    .HasColumnName("Поставщик_сос")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф)
                    .HasColumnName("Приказ СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф1)
                    .IsRequired()
                    .HasColumnName("Приказ СФ1")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСф2)
                    .HasColumnName("Приказ СФ2")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСфСос)
                    .HasColumnName("Приказ СФ_сос")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСфСос1)
                    .HasColumnName("Приказ СФ_сос1")
                    .HasMaxLength(255);

                entity.Property(e => e.ПриказСфСос2)
                    .HasColumnName("Приказ СФ_сос2")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.ТеплыйСкладДвери)
                    .HasColumnName("Теплый_склад_двери")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТеплыйСкладСим)
                    .HasColumnName("Теплый_склад_сим")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ЦенаНдсОфис)
                    .HasColumnName("Цена_ндс_офис")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ЦенаНдсСкладДвери)
                    .HasColumnName("Цена_ндс_склад_двери")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ЦенаНдсСкладСим)
                    .HasColumnName("Цена_ндс_склад_сим")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ЦенаОфис)
                    .HasColumnName("Цена_офис")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ЦенаСкладДвери)
                    .HasColumnName("Цена_склад_двери")
                    .HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ЦенаСкладСим)
                    .HasColumnName("Цена_склад_сим")
                    .HasColumnType("decimal(15, 2)");
            });

            modelBuilder.Entity<СписокФирмРеестра>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список фирм реестра");

                entity.HasIndex(e => e.IdФирмы)
                    .HasName("IX_Список фирм реестра")
                    .IsUnique();

                entity.Property(e => e.CashНал)
                    .HasColumnName("Cash_нал")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CashСамыйПервый)
                    .HasColumnName("Cash_самый_первый")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CashСамыйПервыйСохранить)
                    .HasColumnName("Cash_самый_первый_сохранить")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IdСтраны).HasColumnName("ID страны");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Usd).HasColumnName("USD");

                entity.Property(e => e.Группа).HasDefaultValueSql("((0))");

                entity.Property(e => e.Категория)
                    .HasMaxLength(1)
                    .IsFixedLength();

                entity.Property(e => e.Наименование).HasMaxLength(50);

                entity.Property(e => e.Ответственный).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокФункционала>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список функционала");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Список функционала")
                    .IsUnique();

                entity.Property(e => e.Hid).HasColumnName("HID");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.КодСортировки)
                    .HasColumnName("Код сортировки")
                    .HasMaxLength(10);

                entity.Property(e => e.Функционал)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СписокЦветов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список цветов");

                entity.HasIndex(e => e.IdЦвета)
                    .HasName("IX_Список цветов")
                    .IsUnique();

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.IdЦвета)
                    .HasColumnName("ID цвета")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Цвет).HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЦветовПанелей>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список цветов панелей");

                entity.HasIndex(e => e.IdЦветаПанели)
                    .HasName("IX_Список цветов панелей")
                    .IsUnique();

                entity.Property(e => e.IdЦветаПанели)
                    .IsRequired()
                    .HasColumnName("ID цвета панели")
                    .HasMaxLength(2)
                    .IsFixedLength()
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЦветПанели)
                    .IsRequired()
                    .HasColumnName("Цвет панели")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЦенДляДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список цен для дилеров");

                entity.HasIndex(e => new { e.IdДилера, e.IdТовара })
                    .HasName("IX_Список цен для дилеров")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdПоставщика)
                    .HasColumnName("ID поставщика")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Price).HasDefaultValueSql("(0)");

                entity.Property(e => e.Sebestoimost).HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<СписокЦенПоставщиковПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список цен поставщиков поставки");

                entity.HasIndex(e => new { e.IdДоговора, e.IdТовара })
                    .HasName("IX_Список цен поставщиков поставки")
                    .IsUnique();

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdДоговора).HasColumnName("ID договора");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Скидка).HasColumnType("numeric(5, 2)");

                entity.Property(e => e.Цена).HasColumnType("numeric(12, 4)");
            });

            modelBuilder.Entity<СписокЭкспортеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список экспортеров");

                entity.HasIndex(e => e.IdПоставщика)
                    .HasName("IX_Список экспортеров")
                    .IsUnique();

                entity.Property(e => e.IdПоставщика)
                    .HasColumnName("ID поставщика")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.Наименование).HasMaxLength(60);

                entity.Property(e => e.ПунктЗагрузки)
                    .HasColumnName("Пункт загрузки")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СписокЮрлицДилеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список юрлиц дилеров");

                entity.HasIndex(e => e.IdДилера)
                    .HasName("IX_Список юрлиц дилеров_2");

                entity.HasIndex(e => e.IdЮрлица)
                    .HasName("IX_Список юрлиц дилеров")
                    .IsUnique();

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Список юрлиц дилеров_1")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdИсточника)
                    .HasColumnName("ID источника")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.АдресДляСфЦо)
                    .HasColumnName("Адрес для СФ_цо")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .IsRequired()
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(250);

                entity.Property(e => e.ВыставкаДоговор)
                    .HasColumnName("Выставка договор")
                    .HasMaxLength(100);

                entity.Property(e => e.ДатаПослОтчета)
                    .HasColumnName("Дата посл_отчета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДопскидкаЗаНал)
                    .HasColumnName("Допскидка за нал")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ИдНомер)
                    .HasColumnName("ИД_номер")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'-')");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Контракт)
                    .HasColumnName("Контракт №")
                    .HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОтчетныйПериод)
                    .HasColumnName("Отчетный период")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Подпись).HasColumnType("image");

                entity.Property(e => e.ПокупательДляСфЦо)
                    .HasColumnName("Покупатель для СФ_цо")
                    .HasMaxLength(255);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.СНдс)
                    .HasColumnName("С_НДС")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ТипКонтракта)
                    .HasColumnName("Тип контракта")
                    .HasDefaultValueSql("((6))");
            });

            modelBuilder.Entity<СписокЮрлицКлиентов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список юрлиц клиентов");

                entity.HasIndex(e => e.IdКлиента)
                    .HasName("IX_Список юрлиц клиентов_2");

                entity.HasIndex(e => e.IdЮрлица)
                    .HasName("IX_Список юрлиц клиентов")
                    .IsUnique();

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Список юрлиц клиентов_1")
                    .IsUnique();

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Адрес)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .IsRequired()
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(250);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.СНдс)
                    .HasColumnName("С_НДС")
                    .HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<СписокЮрлицКлиентовПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Список юрлиц клиентов поставки");

                entity.HasIndex(e => e.IdКлиента)
                    .HasName("IX_Список юрлиц клиентов поставки_1");

                entity.HasIndex(e => new { e.IdЮрлица, e.FactoryId })
                    .HasName("IX_Список юрлиц клиентов поставки")
                    .IsUnique();

                entity.Property(e => e.Account).HasMaxLength(30);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.BankName).HasMaxLength(150);

                entity.Property(e => e.Bik)
                    .HasColumnName("BIK")
                    .HasMaxLength(9);

                entity.Property(e => e.ChangeDate).HasColumnType("datetime");

                entity.Property(e => e.City).HasMaxLength(255);

                entity.Property(e => e.Country).HasMaxLength(3);

                entity.Property(e => e.Deleted).HasDefaultValueSql("((0))");

                entity.Property(e => e.District).HasMaxLength(255);

                entity.Property(e => e.FactoryId)
                    .HasColumnName("FactoryID")
                    .HasDefaultValueSql("((39))");

                entity.Property(e => e.IdВалюты).HasColumnName("ID валюты");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.IdЮрлица)
                    .HasColumnName("ID юрлица")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Region).HasMaxLength(255);

                entity.Property(e => e.Street).HasMaxLength(255);

                entity.Property(e => e.Swift).HasMaxLength(20);

                entity.Property(e => e.ZipCode).HasMaxLength(12);

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(250);

                entity.Property(e => e.ДатаДоговора)
                    .HasColumnName("Дата договора")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаНачала)
                    .HasColumnName("Дата начала")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаОкончания)
                    .HasColumnName("Дата окончания")
                    .HasColumnType("datetime");

                entity.Property(e => e.Договор).HasMaxLength(50);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(20);

                entity.Property(e => e.Контакт).HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(20);

                entity.Property(e => e.МетодПоставки).HasColumnName("Метод поставки");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Огрн)
                    .HasColumnName("ОГРН")
                    .HasMaxLength(13);

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.УсловияОплаты).HasColumnName("Условия оплаты");

                entity.Property(e => e.УсловияПоставки).HasColumnName("Условия поставки");
            });

            modelBuilder.Entity<СредниеЦены>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Средние цены");

                entity.HasIndex(e => e.Idtov)
                    .HasName("IX_Средние цены");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Средние цены_1")
                    .IsUnique();

                entity.Property(e => e.Idtov).HasColumnName("IDtov");

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.Пр)
                    .HasColumnName("пр")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ПрСс)
                    .HasColumnName("пр_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Февраль).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ФевральСс)
                    .HasColumnName("Февраль_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Январь).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЯнварьСс)
                    .HasColumnName("Январь_сс")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СреднийВыпуск>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Средний выпуск");

                entity.HasIndex(e => new { e.ДатаРасчета, e.IdТовара })
                    .HasName("IX_Средний выпуск")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаРасчета)
                    .HasColumnName("Дата_расчета")
                    .HasColumnType("date");

                entity.Property(e => e.СредВыпуск).HasColumnName("Сред_выпуск");
            });

            modelBuilder.Entity<СрокиИПорт>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сроки и порт");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Сроки и порт")
                    .IsUnique();

                entity.HasIndex(e => new { e.НомерЗаказа, e.IdOrder })
                    .HasName("IX_Сроки и порт_1")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdOrder).HasColumnName("ID order");

                entity.Property(e => e.ДатаВнесенияИзменеий)
                    .HasColumnName("Дата внесения изменеий")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КтоВнес)
                    .HasColumnName("Кто внес")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерЗаказа)
                    .HasColumnName("Номер заказа")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерИнвойсаТип1)
                    .HasColumnName("Номер инвойса тип1")
                    .HasMaxLength(50);

                entity.Property(e => e.ПеревозИк)
                    .HasColumnName("Перевоз-ик")
                    .HasMaxLength(50);

                entity.Property(e => e.Порт).HasMaxLength(50);

                entity.Property(e => e.Прим).HasMaxLength(50);

                entity.Property(e => e.УбыткиЗаПростойФакт)
                    .HasColumnName("Убытки за простой факт")
                    .HasColumnType("decimal(19, 4)");
            });

            modelBuilder.Entity<СсЗп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("СС_ЗП");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_СС_ЗП")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("Id товара");

                entity.Property(e => e.Зп)
                    .HasColumnName("ЗП")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СсылкиДляТендеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Ссылки для тендеров");

                entity.HasIndex(e => e.Ссылка)
                    .HasName("IX_Ссылки для тендеров")
                    .IsUnique();

                entity.Property(e => e.Адрес).HasMaxLength(255);

                entity.Property(e => e.Ссылка).HasMaxLength(20);
            });

            modelBuilder.Entity<СтандартыКомплектации>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Стандарты комплектации");

                entity.HasIndex(e => new { e.IdТовара, e.IdТовараПоставка })
                    .HasName("IX_Стандарты комплектации")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdТовараПоставка).HasColumnName("ID товара поставка");

                entity.Property(e => e.Количество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Установлено).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<СтатусыЗаказов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Статусы заказов");

                entity.HasIndex(e => e.IdСтатуса)
                    .HasName("IX_Статусы заказов")
                    .IsUnique();

                entity.Property(e => e.IdСтатуса).HasColumnName("ID статуса");

                entity.Property(e => e.Статус).HasMaxLength(50);
            });

            modelBuilder.Entity<СтатусыЗказовКатегории>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Статусы зказов категории");

                entity.HasIndex(e => e.IdКатегории)
                    .HasName("IX_Статусы зказов категории")
                    .IsUnique();

                entity.Property(e => e.IdКатегории).HasColumnName("ID категории");

                entity.Property(e => e.Категория).HasMaxLength(50);
            });

            modelBuilder.Entity<СтатусыТендеров>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Статусы тендеров");

                entity.HasIndex(e => e.IdСтатуса)
                    .HasName("IX_Статусы тендеров")
                    .IsUnique();

                entity.Property(e => e.IdСтатуса).HasColumnName("ID статуса");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СтатьиДляIncome>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Статьи для Income");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Статьи для Income")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<СтруктураПродаж>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Структура продаж");

                entity.HasIndex(e => new { e.НомерГруппы, e.Userid })
                    .HasName("IX_Структура продаж");

                entity.Property(e => e.Userid).HasMaxLength(50);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДоходностьПгРуб)
                    .HasColumnName("Доходность_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоходностьРуб)
                    .HasColumnName("Доходность руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кол).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КолПг)
                    .HasColumnName("Кол_пг")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГруппы)
                    .HasColumnName("Номер группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбъемПродажПгРуб)
                    .HasColumnName("Объем продаж_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажРуб)
                    .HasColumnName("Объем продаж руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СтруктураПродажЗмкМебель>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Структура продаж ЗМК мебель");

                entity.HasIndex(e => new { e.НомерГруппы, e.Userid })
                    .HasName("IX_Структура продаж ЗМК мебель");

                entity.Property(e => e.Userid).HasMaxLength(50);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДоходностьПгРуб)
                    .HasColumnName("Доходность_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоходностьРуб)
                    .HasColumnName("Доходность руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кол).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КолПг)
                    .HasColumnName("Кол_пг")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГруппы)
                    .HasColumnName("Номер группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбъемПродажПгРуб)
                    .HasColumnName("Объем продаж_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажРуб)
                    .HasColumnName("Объем продаж руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СтруктураПродажЗмкСейфы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Структура продаж ЗМК сейфы");

                entity.HasIndex(e => new { e.НомерГруппы, e.Userid })
                    .HasName("IX_Структура продаж ЗМК сейфы");

                entity.Property(e => e.Userid).HasMaxLength(50);

                entity.Property(e => e.Группа).HasMaxLength(50);

                entity.Property(e => e.ДоходностьПгРуб)
                    .HasColumnName("Доходность_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоходностьРуб)
                    .HasColumnName("Доходность руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кол).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КолПг)
                    .HasColumnName("Кол_пг")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГруппы)
                    .HasColumnName("Номер группы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ОбъемПродажПгРуб)
                    .HasColumnName("Объем продаж_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажРуб)
                    .HasColumnName("Объем продаж руб")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СтруктураПродажРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Структура продаж регион");

                entity.HasIndex(e => new { e.НомерГруппы, e.Регион, e.ОбъемПродажРуб, e.ОбъемПродажПгРуб })
                    .HasName("IX_Структура продаж регион_1")
                    .IsUnique();

                entity.Property(e => e.Группа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ДоходностьПгРуб)
                    .HasColumnName("Доходность_пг руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ДоходностьРуб)
                    .HasColumnName("Доходность руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Кол).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.КолПг)
                    .HasColumnName("Кол_пг")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГруппы).HasColumnName("Номер группы");

                entity.Property(e => e.ОбъемПродажПгРуб)
                    .HasColumnName("Объем продаж_пг руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбъемПродажПгРубБезНдс)
                    .HasColumnName("Объем продаж_пг руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажРуб)
                    .HasColumnName("Объем продаж руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбъемПродажРубБезНдс)
                    .HasColumnName("Объем продаж руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СтруктураПродажЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Структура продаж ЦО");

                entity.HasIndex(e => new { e.НомерГруппы, e.Дил, e.ДоходностьРуб, e.Кол, e.КолПг, e.ОбъемПродажРуб, e.ОбъемПродажПгРуб, e.Период, e.Регион, e.Участок })
                    .HasName("IX_Структура продаж ЦО_1")
                    .IsUnique();

                entity.Property(e => e.Группа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.ДоходностьПгРуб)
                    .HasColumnName("Доходность_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоходностьПгРубБезНдс)
                    .HasColumnName("Доходность_пг руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоходностьРуб)
                    .HasColumnName("Доходность руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ДоходностьРубБезНдс)
                    .HasColumnName("Доходность руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кол).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КолПг)
                    .HasColumnName("Кол_пг")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НомерГруппы).HasColumnName("Номер группы");

                entity.Property(e => e.ОбъемПродажПгРуб)
                    .HasColumnName("Объем продаж_пг руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажПгРубБезНдс)
                    .HasColumnName("Объем продаж_пг руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажРуб)
                    .HasColumnName("Объем продаж руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ОбъемПродажРубБезНдс)
                    .HasColumnName("Объем продаж руб_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Период)
                    .HasMaxLength(7)
                    .IsFixedLength();

                entity.Property(e => e.Участок).HasMaxLength(100);
            });

            modelBuilder.Entity<СудебныеОплаты>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Судебные оплаты");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<СуммаЗаявкиДляДолгаВозвраты>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Сумма заявки для долга возвраты");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаВ).HasColumnName("Сумма_в");

                entity.Property(e => e.СуммаВРуб).HasColumnName("Сумма_в_руб");
            });

            modelBuilder.Entity<СуммаЗаявкиДляДолгаВозвратыКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Сумма заявки для долга возвраты кл");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаВ).HasColumnName("Сумма_в");

                entity.Property(e => e.СуммаВРуб).HasColumnName("Сумма_в_руб");
            });

            modelBuilder.Entity<СуммаЗаявкиДляДолгаОтгружено>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Сумма заявки для долга отгружено");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма_руб");
            });

            modelBuilder.Entity<СуммаЗаявкиДляДолгаОтгруженоКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Сумма заявки для долга отгружено кл");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРуб).HasColumnName("Сумма_руб");
            });

            modelBuilder.Entity<СуммаНакладнойРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма накладной регион");

                entity.Property(e => e.КолСтрок).HasColumnName("Кол_строк");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СуммаОплатПоЗаявкеФинплан>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма оплат по заявке финплан");

                entity.Property(e => e.SumСуммаОплатыВал)
                    .HasColumnName("Sum-Сумма оплаты вал")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаОплатыДляДолга>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Сумма оплаты для долга");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплаРуб)
                    .HasColumnName("Сумма опла руб")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<СуммаОплатыДляДолгаКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Сумма оплаты для долга кл");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.СуммаОпл)
                    .HasColumnName("Сумма опл")
                    .HasColumnType("money");

                entity.Property(e => e.СуммаОплаРуб)
                    .HasColumnName("Сумма опла руб")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<СуммаПлатежкиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма платежки регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<СуммаПоЗаявкеКвРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по заявке_кв регион");

                entity.Property(e => e.FirstДатаВывоза)
                    .HasColumnName("First_Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.FirstНакладная)
                    .HasColumnName("First_Накладная")
                    .HasMaxLength(20);

                entity.Property(e => e.IdГородаПочт).HasColumnName("ID города_почт");

                entity.Property(e => e.Сумма).HasColumnType("numeric(38, 6)");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма_дол")
                    .HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<СуммаПоЗаявкеРасп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по заявке расп");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Отгружена).HasColumnType("smalldatetime");

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма_дол")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<СуммаПоЗаявкеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по заявке регион");

                entity.Property(e => e.FirstДатаВывоза)
                    .HasColumnName("First_Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.FirstНакладная)
                    .HasColumnName("First_Накладная")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерОфиса).HasColumnName("Номер_офиса");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма_дол")
                    .HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<СуммаПоЗаявкеФактРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по заявке факт регион");

                entity.Property(e => e.СуммаДол)
                    .HasColumnName("Сумма_дол")
                    .HasColumnType("decimal(38, 4)");
            });

            modelBuilder.Entity<СуммаПоПлатежке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по платежке");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.Сумма).HasColumnType("money");

                entity.Property(e => e.СуммаПп)
                    .HasColumnName("Сумма пп")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<СуммаПоПлатежкеГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по платежке_групп");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаПп)
                    .HasColumnName("Сумма пп")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СуммаПоПлатежкеИтого>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по платежке_итого");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаПп)
                    .HasColumnName("Сумма пп")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.СуммаУже)
                    .HasColumnName("Сумма_уже")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<СуммаПоПлатежкеКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по платежке кл");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.Сумма).HasColumnType("money");

                entity.Property(e => e.СуммаПп)
                    .HasColumnName("Сумма пп")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<СуммаПоПлатежкеНовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по платежке_нов регион");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СуммаПп)
                    .HasColumnName("Сумма пп")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СуммаПоПлатежкеОстатки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по платежке остатки");

                entity.Property(e => e.Expr1).HasColumnType("money");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.Сумма).HasColumnType("money");

                entity.Property(e => e.СуммаПп)
                    .HasColumnName("Сумма пп")
                    .HasColumnType("money");
            });

            modelBuilder.Entity<СуммаПоПлатежкеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма по платежке регион");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.Сумма).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СуммаПп)
                    .HasColumnName("Сумма пп")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СуммаПрихода>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БазоваяЦена).HasColumnName("Базовая цена $");

                entity.Property(e => e.БазоваяЦенаРуб).HasColumnName("Базовая цена руб");
            });

            modelBuilder.Entity<СуммаПриходаВместеСДорогойРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода вместе с дорогой регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаПриходаВыставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода выставки");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаПриходаГл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода гл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СуммаПриходаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Vputi).HasColumnName("vputi");
            });

            modelBuilder.Entity<СуммаПриходаСРозницеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода с рознице регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 12)");
            });

            modelBuilder.Entity<СуммаПриходаСРозницеРегионЗаказы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода с рознице регион_заказы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.БазоваяЦена).HasColumnName("Базовая цена $");

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.Цена).HasColumnType("decimal(30, 9)");
            });

            modelBuilder.Entity<СуммаПриходаСЦенойПоТовПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода с ценой по тов поставки");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БазоваяЦена).HasColumnName("Базовая цена $");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ЦенаFob).HasColumnName("Цена_FOB");
            });

            modelBuilder.Entity<СуммаПриходаСЦенойПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода с ценой поставки");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Валюта)
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаFob)
                    .HasColumnName("Цена_FOB")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СуммаПриходаСЦенойРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма прихода с ценой регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Скидка).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цена).HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<СуммаРасхода>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма расхода");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("сумма_отгр")
                    .HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<СуммаРасходаДляБронейПоРазрешению>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма расхода для броней по разрешению");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Недогрузы).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<СуммаРасходаДляБронейПоРазрешениюЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма расхода для броней по разрешению ЦО");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СуммаОтгр)
                    .HasColumnName("сумма_отгр")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРасходаЗап>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма расхода_ЗАП");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RasZap)
                    .HasColumnName("Ras_ZAP")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРасходаЗапДоп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма расхода_ЗАП_ДОП");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RasDop)
                    .HasColumnName("Ras_dop")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРасходаКомпл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма расхода компл");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СуммаРасходаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма расхода регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРеалРозРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сумма_реал_роз_Регион");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_Сумма_реал_роз_Регион_2")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.СуммаРеал)
                    .HasColumnName("Сумма_реал")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРоз)
                    .HasColumnName("Сумма_роз")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СуммаРеалРозЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сумма_реал_роз_ЦО");

                entity.HasIndex(e => new { e.Userid, e.IdДилера })
                    .HasName("IX_Сумма_реал_роз_ЦО")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.СуммаРеал)
                    .HasColumnName("Сумма_реал")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРоз)
                    .HasColumnName("Сумма_роз")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СуммаРеалРозЦоКл>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Сумма_реал_роз_ЦО_кл");

                entity.HasIndex(e => new { e.IdКлиента, e.Userid })
                    .HasName("IX_Сумма_реал_роз_ЦО_кл")
                    .IsUnique();

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.Userid).HasColumnName("userid");

                entity.Property(e => e.СуммаРеал)
                    .HasColumnName("Сумма_реал")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СуммаРоз)
                    .HasColumnName("Сумма_роз")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<СуммаРеальногоРасхода>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СуммаРеальногоРасхода2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода 2");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СуммаРеальногоРасхода2ПоТовПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода 2 по тов поставки");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ВСчете).HasColumnName("В счете");
            });

            modelBuilder.Entity<СуммаРеальногоРасхода2Поставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода 2 поставки");

                entity.Property(e => e.FactoryId).HasColumnName("FactoryID");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРеальногоРасхода2Регион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода 2 регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРеальногоРасхода2РегионЗаказы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода 2 регион_заказы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода все");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаДляОстатков>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода для остатков");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаДляОстатковВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода для остатков все");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаДляОчередиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода для Очереди регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КогдаПоставили)
                    .HasColumnName("Когда поставили")
                    .HasColumnType("datetime");

                entity.Property(e => e.Колич).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаДляТипа>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода для типа");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ОтгруженоРеально).HasColumnType("decimal(38, 2)");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаДляТипаГл>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода для типа гл");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ОтгруженоРеально).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Разница).HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаДляТипаГлЗаказ>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода для типа гл_заказ");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.НомерЗаказа).HasColumnName("Номер заказа");

                entity.Property(e => e.ОтгруженоРеально).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Разница).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.РегионЗаказа).HasColumnName("Регион заказа");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаПоЗаявкам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода по заявкам");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.Название).HasMaxLength(15);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<СуммаРеальногоРасходаПоЗаявкамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода по заявкам регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.ДатаРасчетная)
                    .HasColumnName("Дата расчетная")
                    .HasColumnType("datetime");

                entity.Property(e => e.КогдаПоставили)
                    .HasColumnName("Когда поставили")
                    .HasColumnType("datetime");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");
            });

            modelBuilder.Entity<СуммаРеальногоРасходаПоСчетам>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода по счетам");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.Наименование).HasMaxLength(60);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<СуммаРеальногоРасходаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Сумма реального расхода регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumOfКоличество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ВСчете)
                    .HasColumnName("В счете")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<СуммаСчетаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("СуммаСчетаРегион");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("numeric(38, 6)");
            });

            modelBuilder.Entity<СчетМаксимальный>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счет максимальный");

                entity.Property(e => e.IdКлиента).HasColumnName("ID клиента");

                entity.Property(e => e.Ном).HasColumnName("ном");
            });

            modelBuilder.Entity<СчетФактураНаАвансРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счет фактура на аванс регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Kpp)
                    .HasColumnName("KPP")
                    .HasMaxLength(10);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮрСтарыеРеквизиты)
                    .HasColumnName("Адрес_юр_старые_реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БанкРекв)
                    .HasColumnName("Банк_рекв")
                    .HasMaxLength(255);

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(255);

                entity.Property(e => e.Бик)
                    .HasColumnName("БИК")
                    .HasMaxLength(9);

                entity.Property(e => e.ВБанке)
                    .HasColumnName("В_банке")
                    .HasMaxLength(50);

                entity.Property(e => e.Выражение2).HasMaxLength(50);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Год)
                    .HasColumnName("Год_")
                    .HasMaxLength(2)
                    .IsUnicode(false);

                entity.Property(e => e.Город).HasMaxLength(100);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Индекс).HasMaxLength(6);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.КодГорода)
                    .IsRequired()
                    .HasColumnName("Код города")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Название)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомНакл)
                    .HasColumnName("ном_накл")
                    .HasMaxLength(23);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер_порядковый");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ПокупательДляСф)
                    .HasColumnName("Покупатель для СФ")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(54);

                entity.Property(e => e.Рук).HasMaxLength(50);

                entity.Property(e => e.Руководитель).HasMaxLength(40);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Телефоны).HasMaxLength(40);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<СчетаБезДолгаДолРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета без долга_дол регион");

                entity.Property(e => e.СуммаВСчете)
                    .HasColumnName("Сумма_в_счете")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<СчетаБезДолгаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета без долга регион");

                entity.Property(e => e.СуммаВСчете).HasColumnName("Сумма_в_счете");
            });

            modelBuilder.Entity<СчетаБезДолгаРегионСнятьГалочку>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета без долга регион_снять галочку");
            });

            modelBuilder.Entity<СчетаДляНакладныхДвойныхРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета для накладных двойных регион");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчетаКлиентыСНеоплаченными>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета-клиенты с неоплаченными");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<СчетаКлиентыСНеоплаченнымиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета-клиенты с неоплаченными регион");

                entity.Property(e => e.ВидОплаты).HasColumnName("Вид оплаты");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчетаКлиентыЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета-клиенты ЦО");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Водитель)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.Стадия)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<СчетаКлиентыЦоN>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета-клиенты ЦО_n");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.ВнешняяДата)
                    .HasColumnName("Внешняя дата")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтгрузки)
                    .HasColumnName("Дата отгрузки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Маршрут).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Стадия).HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);
            });

            modelBuilder.Entity<СчетаСВыписанСчет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета с выписан счет");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СчетаСУслугами>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Счета с услугами");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.СуммаДоставки)
                    .HasColumnName("Сумма доставки")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<СчитанлСканеромСId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считанл сканером с ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаСканирования)
                    .HasColumnName("Дата сканирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КолВДокументе).HasColumnName("Кол в документе");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчитанлСканеромСIdГруп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считанл сканером с ID_груп");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаСканирования)
                    .HasColumnName("Дата сканирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КолВДокументе).HasColumnName("Кол в документе");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчитанлСканеромСIdУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считанл сканером с ID УЗМК");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаСканирования)
                    .HasColumnName("Дата сканирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КолВДокументе).HasColumnName("Кол в документе");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчитанлСканеромСIdУзмкГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считанл сканером с ID УЗМК_групп");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДатаСканирования)
                    .HasColumnName("Дата сканирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КолВДокументе).HasColumnName("Кол в документе");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчитаноГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано_групп");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СчитаноГруппУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано_групп узмк");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СчитаноСканером>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано сканером");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsFixedLength();

                entity.Property(e => e.ШтрихУс)
                    .IsRequired()
                    .HasColumnName("Штрих_ус")
                    .HasMaxLength(15)
                    .IsFixedLength();
            });

            modelBuilder.Entity<СчитаноСканеромДляОтгрузки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Считано сканером для отгрузки");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Считано сканером для отгрузки")
                    .IsUnique();

                entity.HasIndex(e => e.Кто)
                    .HasName("IX_Считано сканером для отгрузки_1");

                entity.HasIndex(e => e.НомерИзПогрузочного)
                    .HasName("IX_Считано сканером для отгрузки_2");

                entity.HasIndex(e => e.Префикс)
                    .HasName("IX_Считано сканером для отгрузки_4");

                entity.HasIndex(e => e.Штрих)
                    .HasName("IX_Считано сканером для отгрузки_3");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.ДатаСканирования)
                    .HasColumnName("Дата сканирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КолВДокументе).HasColumnName("Кол в документе");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчитаноСканеромДляОтгрузкиУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Считано сканером для отгрузки УЗМК");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Считано сканером дляя отгрузки УЗМК")
                    .IsUnique();

                entity.HasIndex(e => e.Кто)
                    .HasName("IX_Считано сканером для отгрузки УЗМК_1");

                entity.HasIndex(e => e.НомерИзПогрузочного)
                    .HasName("IX_Считано сканером для отгрузки УЗМК");

                entity.HasIndex(e => e.Регион)
                    .HasName("IX_Считано сканером для отгрузки УЗМК_3");

                entity.HasIndex(e => e.Штрих)
                    .HasName("IX_Считано сканером для отгрузки УЗМК_2");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IdTmc).HasColumnName("ID_TMC");

                entity.Property(e => e.ДатаСканирования)
                    .HasColumnName("Дата сканирования")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.КолВДокументе).HasColumnName("Кол в документе");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Регион).HasDefaultValueSql("((1597))");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчитаноСканеромДляФормы>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано сканером для формы");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(10);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СчитаноСканеромДляФормыУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано сканером для формы УЗМК");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа).HasColumnName("Код заказа");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СчитаноСканеромДляФормыФилиал>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано сканером для формы Филиал");

                entity.Property(e => e.Fio)
                    .HasColumnName("FIO")
                    .HasMaxLength(255);

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.КодЗаказа).HasColumnName("Код заказа");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<СчитаноСканеромРанее>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано сканером ранее");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");
            });

            modelBuilder.Entity<СчитаноСканеромРанееУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано сканером ранее УЗМК");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");
            });

            modelBuilder.Entity<СчитаноСканеромУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Считано сканером УЗМК");

                entity.Property(e => e.ДилерКлиент).HasColumnName("Дилер_клиент");

                entity.Property(e => e.НомерИзПогрузочного).HasColumnName("Номер из погрузочного");

                entity.Property(e => e.Штрих)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ШтрихУс)
                    .IsRequired()
                    .HasColumnName("Штрих_ус")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<СчитаноСканеромЯчейкиДляОтгрузки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Считано сканером ячейки для отгрузки");

                entity.HasIndex(e => new { e.НомерНакладной, e.Время, e.ШтрихКод, e.Адрес, e.Префикс })
                    .HasName("IX_Считано сканером ячейки для отгрузки")
                    .IsUnique();

                entity.Property(e => e.Время).HasColumnType("datetime");

                entity.Property(e => e.ДилерКлиент)
                    .HasColumnName("Дилер_клиент")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Кто).HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерНакладной).HasColumnName("Номер накладной");

                entity.Property(e => e.ШтрихКод)
                    .IsRequired()
                    .HasColumnName("Штрих-Код")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТаможняДляСебестоимости>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Таможня для себестоимости");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Таможня для себестоимости")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Кф)
                    .HasColumnName("КФ")
                    .HasColumnType("decimal(18, 4)");
            });

            modelBuilder.Entity<ТемпыРостаДляПрогноза>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Темпы роста для прогноза");

                entity.HasIndex(e => new { e.IdТовара, e.Регион })
                    .HasName("IX_Темпы роста для прогноза")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.KfРоста)
                    .HasColumnName("KF_роста")
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<Тендера>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Тендера")
                    .IsUnique();

                entity.Property(e => e.IdГорода)
                    .HasColumnName("ID города")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГородаПобедителя)
                    .HasColumnName("ID города победителя")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdГородаСледующегоПобедителя).HasColumnName("ID города следующего победителя");

                entity.Property(e => e.IdДилераТо)
                    .HasColumnName("ID дилера ТО")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdСтатуса)
                    .HasColumnName("ID статуса")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e._2Место)
                    .HasColumnName("2 место")
                    .HasMaxLength(150);

                entity.Property(e => e.АдресРассылки)
                    .HasColumnName("Адрес рассылки")
                    .HasMaxLength(155);

                entity.Property(e => e.БронированиеТендера)
                    .HasColumnName("Бронирование тендера")
                    .HasMaxLength(3);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВвода).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаключенияКонтракта)
                    .HasColumnName("Дата заключения контракта")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаИсполнения)
                    .HasColumnName("Дата исполнения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОкончанияПриемаЗаявок)
                    .HasColumnName("Дата окончания приема заявок")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПроведенияТоргов)
                    .HasColumnName("Дата проведения торгов")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДилерТо)
                    .HasColumnName("Дилер ТО")
                    .HasMaxLength(50);

                entity.Property(e => e.Заказчик).HasMaxLength(255);

                entity.Property(e => e.ЗаявленоУчастиеДилераПромета)
                    .HasColumnName("Заявлено участие дилера Промета")
                    .HasMaxLength(255);

                entity.Property(e => e.ЗаявленоУчастиеПромета)
                    .HasColumnName("Заявлено участие Промета")
                    .HasMaxLength(3)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ИннПобедителя)
                    .HasColumnName("ИНН победителя")
                    .HasMaxLength(20)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КтоВнес)
                    .HasColumnName("Кто внес")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КтоЕщеИзДилеровУчаствовал)
                    .HasColumnName("Кто еще из дилеров участвовал")
                    .HasMaxLength(255);

                entity.Property(e => e.Куратор).HasMaxLength(50);

                entity.Property(e => e.МестоНахождения)
                    .HasColumnName("Место нахождения")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НачальнаяЦенаКонтракта)
                    .HasColumnName("Начальная цена контракта")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерСчета)
                    .HasColumnName("Номер счета")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НомерТендера)
                    .HasColumnName("Номер тендера")
                    .HasMaxLength(50);

                entity.Property(e => e.ОбеспечениеГо)
                    .HasColumnName("Обеспечение ГО")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбеспечениеЗаявки)
                    .HasColumnName("Обеспечение заявки")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОбеспечениеКонтракта)
                    .HasColumnName("Обеспечение контракта")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ОписаниеПродукции)
                    .HasColumnName("Описание продукции")
                    .HasMaxLength(255);

                entity.Property(e => e.ОтКого)
                    .HasColumnName("От кого")
                    .HasMaxLength(50);

                entity.Property(e => e.Ответственный).HasDefaultValueSql("((0))");

                entity.Property(e => e.Победитель).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПричинаОтказаОтУчастия)
                    .HasColumnName("Причина отказа от участия")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПричинаПоражения)
                    .HasColumnName("Причина поражения")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ПрометПобедил)
                    .HasColumnName("Промет победил")
                    .HasMaxLength(3);

                entity.Property(e => e.ПроцСнижения).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.РегионДилера).HasColumnName("Регион_дилера");

                entity.Property(e => e.РегионСчета).HasColumnName("Регион счета");

                entity.Property(e => e.Рентабельность).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Себестоимость).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.СледующийПобедительСЛучшейЦеной)
                    .HasColumnName("Следующий победитель с лучшей ценой")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СпецТендОтдела).HasDefaultValueSql("((0))");

                entity.Property(e => e.СпособЗакупки)
                    .HasColumnName("Способ закупки")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Ссылка).HasMaxLength(255);

                entity.Property(e => e.Статус).HasMaxLength(20);

                entity.Property(e => e.ТипПродукции)
                    .HasColumnName("Тип продукции")
                    .HasMaxLength(255);

                entity.Property(e => e.Фз)
                    .HasColumnName("ФЗ")
                    .HasMaxLength(5);

                entity.Property(e => e.Фио)
                    .HasColumnName("ФИО")
                    .HasMaxLength(255)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Фотокарточки).HasColumnType("image");

                entity.Property(e => e.ЦенаКонтракта)
                    .HasColumnName("Цена контракта")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЦенаКонтрактаСледующего)
                    .HasColumnName("Цена контракта следующего")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПобедителя)
                    .HasColumnName("Цена победителя")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Этп)
                    .HasColumnName("ЭТП")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТендераРегионы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Тендера регионы");

                entity.HasIndex(e => e.Id)
                    .HasName("IX_Тендера регионы_1")
                    .IsUnique();

                entity.HasIndex(e => e.Наименование)
                    .HasName("IX_Тендера регионы")
                    .IsUnique();

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_Тендера регионы_2")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.АдресРассылки)
                    .HasColumnName("Адрес рассылки")
                    .HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Номер)
                    .HasColumnName("номер")
                    .HasMaxLength(2)
                    .IsFixedLength();

                entity.Property(e => e.Сто)
                    .HasColumnName("СТО")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТехническиеХарактеристики>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Технические характеристики");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Технические характеристики")
                    .IsUnique()
                    .IsClustered();

                entity.Property(e => e.IdНомера)
                    .HasColumnName("ID номера")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БратьИзАсуп).HasColumnName("Брать из АСУП");

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Взломостойкость).HasMaxLength(20);

                entity.Property(e => e.ВнутреннийОбъем)
                    .HasColumnName("Внутренний объем")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВремяПогрузки)
                    .HasColumnName("Время погрузки")
                    .HasColumnType("decimal(6, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВысотаВн)
                    .HasColumnName("Высота вн")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ВысотаМм)
                    .HasColumnName("Высота мм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ГарантийныйСрок)
                    .HasColumnName("Гарантийный срок")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ГлубинаВн)
                    .HasColumnName("Глубина вн")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ГлубинаМм)
                    .HasColumnName("Глубина мм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Инструкция).HasDefaultValueSql("((0))");

                entity.Property(e => e.КассовоеОтделение).HasColumnName("Кассовое отделение");

                entity.Property(e => e.Ключ).HasDefaultValueSql("((0))");

                entity.Property(e => e.КодТнвд)
                    .HasColumnName("Код ТНВД")
                    .HasMaxLength(50);

                entity.Property(e => e.КолВоПолок)
                    .HasColumnName("Кол-во полок")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоБатареек)
                    .HasColumnName("Количество батареек")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоБатареекАа)
                    .HasColumnName("Количество батареек АА")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоУпаковокВШт)
                    .HasColumnName("Количество упаковок в шт")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Комплектующие).HasDefaultValueSql("((0))");

                entity.Property(e => e.Описание).HasMaxLength(150);

                entity.Property(e => e.ОписаниеКода)
                    .HasColumnName("Описание кода")
                    .HasMaxLength(255);

                entity.Property(e => e.ПланНаДень).HasColumnName("План на день");

                entity.Property(e => e.Поставщик).HasMaxLength(100);

                entity.Property(e => e.Сертификат).HasMaxLength(20);

                entity.Property(e => e.СменяКода).HasColumnName("Сменя кода");

                entity.Property(e => e.СрокСлужбы)
                    .HasColumnName("Срок службы")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Стандарт).HasMaxLength(255);

                entity.Property(e => e.Статус2012)
                    .HasColumnName("Статус_2012")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.ШиринаВн)
                    .HasColumnName("Ширина вн")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ШиринаМм)
                    .HasColumnName("Ширина мм")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ЭлектронныйЗамок).HasColumnName("Электронный замок");
            });

            modelBuilder.Entity<ТехническиеХарактеристикиПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Технические характеристики поставки");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Технические характеристики поставки")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.ВесБрутто)
                    .HasColumnName("Вес брутто")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ВысотаВн)
                    .HasColumnName("Высота вн")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ВысотаМм)
                    .HasColumnName("Высота мм")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ГлубинаВн)
                    .HasColumnName("Глубина вн")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ГлубинаМм)
                    .HasColumnName("Глубина мм")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.Описание).HasMaxLength(150);

                entity.Property(e => e.ПланНаДень).HasColumnName("План на день");

                entity.Property(e => e.ШиринаВн)
                    .HasColumnName("Ширина вн")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ШиринаМм)
                    .HasColumnName("Ширина мм")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ТзАвгустРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ август регион");

                entity.HasIndex(e => e.Rec)
                    .HasName("IX_ТЗ август регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.UserId, e.Регион })
                    .HasName("IX_ТЗ август регион_1");

                entity.Property(e => e.Rec).ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ТзОц)
                    .HasColumnName("ТЗ_оц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСсRub)
                    .HasColumnName("ТЗ_сс_RUB")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ТзОтгрузкаДилеры>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ отгрузка дилеры");

                entity.HasIndex(e => new { e.IdКл, e.Рег, e.СуммаРуб, e.СуммаРубПг })
                    .HasName("IX_ТЗ отгрузка дилеры")
                    .IsUnique();

                entity.Property(e => e.IdКл).HasColumnName("ID кл");

                entity.Property(e => e.UserId).HasColumnName("User id");

                entity.Property(e => e.Город).HasMaxLength(50);

                entity.Property(e => e.Дилер).HasMaxLength(150);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаРубПг)
                    .HasColumnName("Сумма руб_пг")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Филиал).HasMaxLength(50);
            });

            modelBuilder.Entity<ТзОтгрузкаПоГруппам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ отгрузка по группам");

                entity.HasIndex(e => new { e.IdГруппы, e.UserId, e.СуммаРуб, e.СуммаБезНдсРуб, e.СебестоимостьБезНдсРуб, e.Количество, e.Регион })
                    .HasName("IX_ТЗ отгрузка по группам")
                    .IsUnique();

                entity.Property(e => e.IdГруппы).HasColumnName("ID группы");

                entity.Property(e => e.UserId).HasColumnName("User id");

                entity.Property(e => e.ВесNetto)
                    .HasColumnName("Вес netto")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ВесБрутто)
                    .HasColumnName("Вес брутто")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Группа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Количество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Объем)
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Себестоимость).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СебестоимостьБезНдсРуб)
                    .HasColumnName("Себестоимость_без_НДС руб")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СебестоимостьБезНдсСегодня)
                    .HasColumnName("Себестоимость_без_НДС_сегодня")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СебестоимостьРуб)
                    .HasColumnName("Себестоимость руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаБезНдсРуб)
                    .HasColumnName("Сумма_без_НДС руб")
                    .HasColumnType("decimal(12, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ТзОтгрузкаПоМоделям>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ отгрузка по моделям");

                entity.HasIndex(e => new { e.Год, e.UserId, e.Модель, e.Месяц, e.IdТовара, e.Неделя, e.Рег, e.Rec })
                    .HasName("IX_ТЗ отгрузка по моделям")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Rec)
                    .HasColumnName("rec")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId).HasColumnName("User id");

                entity.Property(e => e.Группа).HasMaxLength(150);

                entity.Property(e => e.Количество).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(150);

                entity.Property(e => e.Подгруппа).HasMaxLength(150);

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ТзОтгрузкаПоМоделямВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ отгрузка по моделям все");

                entity.HasIndex(e => new { e.IdТовара, e.UserId, e.ПодГруппа, e.Филиал })
                    .HasName("IX_ТЗ отгрузка по моделям все1111")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User id");

                entity.Property(e => e.Количество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПодГруппа).HasMaxLength(255);

                entity.Property(e => e.Себестоимость).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СебестоимостьРуб)
                    .HasColumnName("Себестоимость руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Филиал).HasMaxLength(50);
            });

            modelBuilder.Entity<ТзОтгрузкаПодгруппы>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ отгрузка подгруппы");

                entity.HasIndex(e => new { e.IdПодгруппы, e.UserId, e.СуммаРуб, e.Неделя, e.Рег, e.Тула, e.Сосенки, e.Участок, e.Завод, e.СебестоимостьБезНдсРуб, e.Количество, e.СуммаEuro })
                    .HasName("IX_ТЗ отгрузка подгруппы")
                    .IsUnique();

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.UserId).HasColumnName("User id");

                entity.Property(e => e.Завод).HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.ПодГруппа)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Себестоимость).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СебестоимостьEuro)
                    .HasColumnName("Себестоимость EURO")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СебестоимостьБезНдсEuro)
                    .HasColumnName("Себестоимость_без_НДС EURO")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СебестоимостьБезНдсРуб)
                    .HasColumnName("Себестоимость_без_НДС руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СебестоимостьРуб)
                    .HasColumnName("Себестоимость руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Сосенки).HasDefaultValueSql("((0))");

                entity.Property(e => e.Сумма).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаEuro)
                    .HasColumnName("Сумма EURO")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаБезНдсEuro)
                    .HasColumnName("Сумма_без_НДС EURO")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаБезНдсРуб)
                    .HasColumnName("Сумма_без_НДС руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаРуб)
                    .HasColumnName("Сумма руб")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаРц)
                    .HasColumnName("Сумма_РЦ")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Тула).HasDefaultValueSql("((0))");

                entity.Property(e => e.Участок).HasMaxLength(50);
            });

            modelBuilder.Entity<ТзПриходВПутиДоПериодЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ приход_в пути_до период ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId, e.Количество, e.ТзОцРуб, e.ТзСс, e.Откуда })
                    .HasName("IX_ТЗ приход_в пути_до период ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Откуда).HasMaxLength(1);

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзПриходВПутиПериодЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ приход_в пути период ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId, e.Количество, e.ТзОцРуб, e.ТзСс, e.Откуда })
                    .HasName("IX_ТЗ приход_в пути период ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Откуда).HasMaxLength(1);

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзПриходПериодЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ приход период ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId })
                    .HasName("IX_ТЗ приход период ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзРасходПериодЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ расход период ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId })
                    .HasName("IX_ТЗ расход период ЦО222")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзПоРеализации)
                    .HasColumnName("ТЗ_по_реализации")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСсRub)
                    .HasColumnName("ТЗ_сс_RUB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзРегионВыставкиЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ регион выставки ЦО");

                entity.HasIndex(e => new { e.Филиал, e.UserId, e.IdТовара })
                    .HasName("IX_ТЗ регион выставки ЦО111")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОц)
                    .HasColumnName("ТЗ_оц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСсRub)
                    .HasColumnName("ТЗ_сс_RUB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзРегионПереводНаВыстЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ регион перевод на выст ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId })
                    .HasName("IX_ТЗ регион перевод на выст ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзРегионПереводСВыстЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ регион перевод с выст ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId })
                    .HasName("IX_ТЗ регион перевод с выст ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзРегионЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ регион ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId })
                    .HasName("IX_ТЗ регион ЦО111")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОц)
                    .HasColumnName("ТЗ_оц")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСсRub)
                    .HasColumnName("ТЗ_сс_RUB")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзСписаниеМоскваПериодЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ списание москва период ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId })
                    .HasName("IX_ТЗ списание москва период ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ТзСсРуб)
                    .HasColumnName("ТЗ_сс_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзСписаниеПериодЦо>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗ списание период ЦО");

                entity.HasIndex(e => new { e.Филиал, e.IdТовара, e.UserId })
                    .HasName("IX_ТЗ списание период ЦО")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзКоррСс)
                    .HasColumnName("ТЗ_корр_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзОцРуб)
                    .HasColumnName("ТЗ_оц_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСс)
                    .HasColumnName("ТЗ_сс")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ТзСсРуб)
                    .HasColumnName("ТЗ_сс_руб")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Филиал)
                    .HasMaxLength(50)
                    .IsFixedLength();
            });

            modelBuilder.Entity<ТзвыставкиТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТЗВыставки_тмп");

                entity.HasIndex(e => new { e.Регион, e.UserId })
                    .HasName("IX_ТЗВыставки_тмп")
                    .IsUnique();

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.ТзОц).HasColumnName("ТЗ_оц");

                entity.Property(e => e.ТзСс).HasColumnName("ТЗ_сс");

                entity.Property(e => e.ТзСсRub).HasColumnName("ТЗ_сс_RUB");
            });

            modelBuilder.Entity<ТипыЗаказов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Типы заказов");

                entity.HasIndex(e => e.КодТипа)
                    .HasName("IX_Типы заказов")
                    .IsUnique();

                entity.Property(e => e.IdПоставщика).HasColumnName("ID поставщика");

                entity.Property(e => e.КодТипа).HasColumnName("Код типа");

                entity.Property(e => e.ТипЗаказа)
                    .IsRequired()
                    .HasColumnName("Тип заказа")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТипыКонтактов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Типы контактов");

                entity.HasIndex(e => e.IdТипа)
                    .HasName("IX_Типы контактов")
                    .IsUnique();

                entity.Property(e => e.IdТипа).HasColumnName("Id типа");

                entity.Property(e => e.ТипКонтакта)
                    .IsRequired()
                    .HasColumnName("Тип контакта")
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТипыСкладов>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Типы складов");

                entity.HasIndex(e => e.ТипСклада)
                    .HasName("IX_Типы складов")
                    .IsUnique();

                entity.Property(e => e.IdТип)
                    .HasColumnName("ID тип")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ТипСклада)
                    .HasColumnName("Тип склада")
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<ТоварВЗаказеГруп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товар в заказе_груп");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.OrderNo)
                    .IsRequired()
                    .HasColumnName("Order No")
                    .HasMaxLength(50);

                entity.Property(e => e.SumКоличество).HasColumnName("Sum-Количество");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ТоварВЗаказеГрупДляОтгр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товар в заказе_груп_для_отгр");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.OrderNo)
                    .IsRequired()
                    .HasColumnName("Order No")
                    .HasMaxLength(50);

                entity.Property(e => e.SumКоличествоЖелаемое)
                    .HasColumnName("Sum-Количество_желаемое")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ТоварВЗаказеПоставки>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Товар в заказе поставки");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Товар в заказе поставки")
                    .IsUnique();

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.UserId)
                    .HasColumnName("User ID")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasDefaultValueSql("(0)");

                entity.Property(e => e.НомерПокупателя)
                    .HasColumnName("Номер покупателя")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ТоварВЗаказеРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Товар в заказе регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Товар в заказе регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.НомерПокупателя, e.OrderNo })
                    .HasName("IX_Товар в заказе регион_1")
                    .IsUnique();

                entity.Property(e => e.AddedBy).HasMaxLength(256);

                entity.Property(e => e.AddedDate).HasColumnType("datetime");

                entity.Property(e => e.ExtТз)
                    .HasColumnName("Ext_ТЗ")
                    .HasMaxLength(20);

                entity.Property(e => e.Idrec)
                    .HasColumnName("IDREC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Idzak)
                    .HasColumnName("IDZAK")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(5, 2)");

                entity.Property(e => e.OrderNo)
                    .IsRequired()
                    .HasColumnName("Order No")
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Sku)
                    .HasColumnName("SKU")
                    .HasMaxLength(256);

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.StatusIdKat)
                    .HasColumnName("StatusID_kat")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Title).HasMaxLength(256);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АртикулБазовый)
                    .HasColumnName("Артикул базовый")
                    .HasMaxLength(12);

                entity.Property(e => e.АртикулКлиента)
                    .HasColumnName("Артикул клиента")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаКонструктора)
                    .HasColumnName("Дата конструктора")
                    .HasColumnType("date");

                entity.Property(e => e.ДатаПлановаяПроизводство)
                    .HasColumnName("Дата плановая производство")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаТретейПроцедуры)
                    .HasColumnName("Дата третей процедуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.Доходность).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Исполнение).HasDefaultValueSql("((0))");

                entity.Property(e => e.КоличествоЖелаемое)
                    .HasColumnName("Количество_желаемое")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Метка)
                    .HasColumnName("метка")
                    .HasMaxLength(7)
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.НаименованиеКлиента)
                    .HasColumnName("Наименование клиента")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Описание).HasMaxLength(250);

                entity.Property(e => e.Перенесен).HasDefaultValueSql("((0))");

                entity.Property(e => e.Скидка).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Техзадание).HasColumnType("image");

                entity.Property(e => e.Цена).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Цр)
                    .HasColumnName("ЦР")
                    .HasColumnType("decimal(12, 2)");
            });

            modelBuilder.Entity<ТоварВЗаявке>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товар в заявке");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.БазоваяЦена).HasColumnName("Базовая цена");

                entity.Property(e => e.БазоваяЦенаR).HasColumnName("Базовая цена R");

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоДляОтгрузки).HasColumnName("Количество для отгрузки");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ПаллетаНомер)
                    .HasColumnName("Паллета номер")
                    .HasMaxLength(20);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.ЦенаПродажи).HasColumnName("Цена продажи $");

                entity.Property(e => e.ЦенаПродажиR).HasColumnName("Цена продажи R");
            });

            modelBuilder.Entity<ТоварВСчете>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товар в счете");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Цена).HasColumnType("decimal(36, 6)");

                entity.Property(e => e.ЦенаДол)
                    .HasColumnName("Цена_дол")
                    .HasColumnType("decimal(36, 6)");
            });

            modelBuilder.Entity<ТоварДляВозвратаРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товар для возврата регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.SsrБезНдс)
                    .HasColumnName("SSR_без_НДС")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаПредполагаемойПродажи)
                    .HasColumnName("Дата предполагаемой продажи")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоВСчете)
                    .HasColumnName("Количество в счете")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомГтд)
                    .HasColumnName("Ном_ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ТоварДляКонтроляДинамики>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Товар для контроля динамики");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Товар для контроля динамики")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ТоварСклад>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товар-Склад");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.IdПодгруппы).HasColumnName("ID подгруппы");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.СсБезНдс)
                    .HasColumnName("СС_без_НДС")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.Цп)
                    .HasColumnName("ЦП")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ТоварныйОтчетВозвратыКомплектыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет возвраты комплекты регион");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.АртикулСост)
                    .HasColumnName("Артикул_сост")
                    .HasMaxLength(30);

                entity.Property(e => e.ГруппКомпл).HasColumnName("групп_компл");

                entity.Property(e => e.ГруппСост).HasColumnName("групп_сост");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоСост)
                    .HasColumnName("Количество_сост")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НаименГруппСост)
                    .HasColumnName("наимен_групп_сост")
                    .HasMaxLength(50);

                entity.Property(e => e.НаименоГруппКомпл)
                    .HasColumnName("наимено_групп_компл")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НаименованиеСклада)
                    .IsRequired()
                    .HasColumnName("Наименование склада")
                    .HasMaxLength(70);

                entity.Property(e => e.НаименованиеСост)
                    .IsRequired()
                    .HasColumnName("Наименование_сост")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(23);
            });

            modelBuilder.Entity<ТоварныйОтчетДилерыУслуги11111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет дилеры услуги11111");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетКорректа1сРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет корректа 1С регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаКорректы)
                    .HasColumnName("Дата корректы")
                    .HasColumnType("datetime");

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс)
                    .HasColumnName("Сумма с НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Цена).HasColumnType("decimal(23, 7)");
            });

            modelBuilder.Entity<ТоварныйОтчетКорректа1сРегионСос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет корректа 1С регион_сос");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаКорректы)
                    .HasColumnName("Дата корректы")
                    .HasColumnType("datetime");

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс)
                    .HasColumnName("Сумма с НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Цена).HasColumnType("decimal(23, 7)");
            });

            modelBuilder.Entity<ТоварныйОтчетОплаты1сРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет оплаты 1с регион");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SumСуммаОплатыR)
                    .HasColumnName("Sum_Сумма оплаты R")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.ДатаПр)
                    .HasColumnName("Дата пр")
                    .HasColumnType("datetime");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.НомерПлатежки)
                    .HasColumnName("Номер платежки")
                    .HasMaxLength(20);

                entity.Property(e => e.СуммаОплатыR)
                    .HasColumnName("Сумма оплаты R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ТоварныйОтчетПереводЗапчастиНаУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет перевод запчасти на УЗМК");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение1).HasMaxLength(255);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТоварныйОтчетПереводСписание>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет перевод списание");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение1).HasMaxLength(255);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТоварныйОтчетПереводыПромЕвросейф>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет переводы ПРОМ-ЕВРОСЕЙФ");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение1).HasMaxLength(70);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Документ).HasMaxLength(24);

                entity.Property(e => e.Инн)
                    .HasColumnName("инн")
                    .HasColumnType("numeric(10, 0)");

                entity.Property(e => e.КодПокупателя).HasColumnName("Код покупателя");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");

                entity.Property(e => e.Цена).HasColumnType("decimal(22, 7)");
            });

            modelBuilder.Entity<ТоварныйОтчетПереводыСосенкиУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет переводы Сосенки-Узловая");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecVosst).HasColumnName("rec_vosst");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение1)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТоварныйОтчетПереводыУзловаяСосенки>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет переводы Узловая-Сосенки");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecVosst).HasColumnName("rec_vosst");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение1)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТоварныйОтчетПереводыУзмкПромет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет переводы УЗМК-ПРОМЕТ");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecVosst).HasColumnName("rec_vosst");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение1).HasMaxLength(255);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТоварныйОтчетПереводыУзмкСпецтехнологии>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет переводы УЗМК-СПЕЦТЕХНОЛОГИИ");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение1).HasMaxLength(255);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ТоварныйОтчетПеремещенияПромТт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет Перемещения Пром-ТТ");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Поставщик).HasMaxLength(70);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.СуммаБезНалога)
                    .HasColumnName("Сумма без налога")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.СуммаСНдс)
                    .HasColumnName("Сумма с НДС")
                    .HasColumnType("decimal(13, 2)");

                entity.Property(e => e.Цена).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Юрлицо).HasMaxLength(70);
            });

            modelBuilder.Entity<ТоварныйОтчетПеремещенияПромет>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет Перемещения Промет");

                entity.Property(e => e.Expr2).HasMaxLength(50);

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Выражение6).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ТоварныйОтчетПеремещенияПрометКрым>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет Перемещения Промет Крым");

                entity.Property(e => e.Expr2).HasMaxLength(50);

                entity.Property(e => e.Expr3).HasColumnType("smalldatetime");

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Выражение6).HasColumnType("decimal(37, 6)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Накладная)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Примечание).HasMaxLength(100);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ТоварныйОтчетПеремещенияСУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет Перемещения с УЗМК");

                entity.Property(e => e.Expr2).HasMaxLength(50);

                entity.Property(e => e.IdGroupOfGoods).HasColumnName("ID GroupOfGoods");

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Накладная).HasMaxLength(14);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("numeric(26, 9)");
            });

            modelBuilder.Entity<ТоварныйОтчетПеремещенияТт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет Перемещения ТТ");

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Expr4)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Expr5).HasMaxLength(50);

                entity.Property(e => e.Expr6).HasColumnType("smalldatetime");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ТоварныйОтчетПриходВозвратыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет приход возвраты регион");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТоварныйОтчетПриходВозвратыРегион111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет приход возвраты регион111");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ДатаПрихода)
                    .HasColumnName("Дата прихода")
                    .HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<ТоварныйОтчетРасход1сРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход 1С регион");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(30);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кпп)
                    .IsRequired()
                    .HasColumnName("КПП")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.ОснованиеУпд)
                    .IsRequired()
                    .HasColumnName("Основание_УПД")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<ТоварныйОтчетРасход1сРегион225>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход 1С регион_225");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(27);

                entity.Property(e => e.Expr2).HasMaxLength(255);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<ТоварныйОтчетРасход1сРегион7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход 1С регион_7");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(30);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.ОснованиеУпд)
                    .HasColumnName("Основание_УПД")
                    .HasMaxLength(255);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<ТоварныйОтчетРасход1сРегионFze>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход 1С регион FZE");

                entity.Property(e => e.Artikul)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .IsRequired()
                    .HasColumnName("slova_nds")
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.История)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кпп)
                    .IsRequired()
                    .HasColumnName("КПП")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.ОснованиеУпд)
                    .IsRequired()
                    .HasColumnName("Основание_УПД")
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога)
                    .HasColumnName("Сумма без налога")
                    .HasColumnType("numeric(38, 6)");

                entity.Property(e => e.СуммаСНдс)
                    .HasColumnName("Сумма с НДС")
                    .HasColumnType("numeric(38, 6)");

                entity.Property(e => e.Цена).HasColumnType("numeric(38, 17)");
            });

            modelBuilder.Entity<ТоварныйОтчетРасход1сРегионМосква>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход 1С регион_москва");

                entity.Property(e => e.Artikul)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasMaxLength(255);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(15);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.История)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(30);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс)
                    .HasColumnName("Сумма с НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Цена).HasColumnType("decimal(23, 7)");
            });

            modelBuilder.Entity<ТоварныйОтчетРасход1сРегионСос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход 1С регион_сос");

                entity.Property(e => e.Artikul)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Expr1).HasMaxLength(30);

                entity.Property(e => e.Expr2).HasMaxLength(255);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.История)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<ТоварныйОтчетРасход1сРегионЭд>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход 1С регион_ЭД");

                entity.Property(e => e.Artikul).HasMaxLength(50);

                entity.Property(e => e.Expr1).HasMaxLength(30);

                entity.Property(e => e.IdАдреса).HasColumnName("ID адреса");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.История).HasMaxLength(255);

                entity.Property(e => e.Код).HasMaxLength(26);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Менеджер).HasMaxLength(33);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Ндс).HasColumnName("НДС");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.Поставщик)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(255);

                entity.Property(e => e.СуммаБезНалога).HasColumnName("Сумма без налога");

                entity.Property(e => e.СуммаСНдс).HasColumnName("Сумма с НДС");
            });

            modelBuilder.Entity<ТоварныйОтчетРасходFze>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход FZE");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(50);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходДилеры1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход дилеры1111");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Эд).HasColumnName("эд");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходДилерыБух1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход дилеры бух1111");

                entity.Property(e => e.Expr2).HasColumnType("smalldatetime");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(51);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.КодКлиентаФилиала)
                    .HasColumnName("Код клиента филиала")
                    .HasMaxLength(13);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(12);

                entity.Property(e => e.Наименование).HasMaxLength(150);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.НомерФилиала)
                    .HasColumnName("Номер филиала")
                    .HasMaxLength(13);

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Эд).HasColumnName("эд");

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходДилерыБухВыставки1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход дилеры бух выставки1111");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Юрлицо)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходДилерыБухГл1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход дилеры бух гл1111");

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодЗаказа)
                    .HasColumnName("Код заказа")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(9);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Поставщик).HasMaxLength(255);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Юрлицо).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходДилерыЦепь11111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход дилеры цепь11111");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(51);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.Группа)
                    .HasColumnName("группа")
                    .HasMaxLength(50);

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоДляОтгрузки)
                    .HasColumnName("Количество для отгрузки")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(100);

                entity.Property(e => e.Товар).HasMaxLength(100);

                entity.Property(e => e.Фирма).HasMaxLength(50);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходКомплекты11111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход комплекты11111");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(51);

                entity.Property(e => e.АртикулСост)
                    .HasColumnName("Артикул_сост")
                    .HasMaxLength(30);

                entity.Property(e => e.ГруппКомпл).HasColumnName("групп_компл");

                entity.Property(e => e.ГруппСост).HasColumnName("групп_сост");

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоСост)
                    .HasColumnName("Количество_сост")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.НаименГруппСост)
                    .HasColumnName("наимен_групп_сост")
                    .HasMaxLength(50);

                entity.Property(e => e.НаименоГруппКомпл)
                    .HasColumnName("наимено_групп_компл")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(100);

                entity.Property(e => e.НаименованиеСклада)
                    .IsRequired()
                    .HasColumnName("Наименование склада")
                    .HasMaxLength(70);

                entity.Property(e => e.НаименованиеСост)
                    .IsRequired()
                    .HasColumnName("Наименование_сост")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(23);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходКомплектыРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход комплекты регион");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.АртикулСост)
                    .HasColumnName("Артикул_сост")
                    .HasMaxLength(30);

                entity.Property(e => e.ГруппКомпл).HasColumnName("групп_компл");

                entity.Property(e => e.ГруппСост).HasColumnName("групп_сост");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ЗаводСклад).HasColumnName("Завод_склад");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоСост)
                    .HasColumnName("Количество_сост")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НаименГруппСост)
                    .HasColumnName("наимен_групп_сост")
                    .HasMaxLength(50);

                entity.Property(e => e.НаименоГруппКомпл)
                    .HasColumnName("наимено_групп_компл")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НаименованиеСклада)
                    .IsRequired()
                    .HasColumnName("Наименование склада")
                    .HasMaxLength(70);

                entity.Property(e => e.НаименованиеСост)
                    .IsRequired()
                    .HasColumnName("Наименование_сост")
                    .HasMaxLength(150);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(23);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходКомплектыРегионМосква>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход комплекты регион_москва");

                entity.Property(e => e.Idfirm).HasColumnName("IDfirm");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(52);

                entity.Property(e => e.АртикулСост)
                    .HasColumnName("Артикул_сост")
                    .HasMaxLength(30);

                entity.Property(e => e.ГруппКомпл).HasColumnName("групп_компл");

                entity.Property(e => e.ГруппСост).HasColumnName("групп_сост");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоСост)
                    .HasColumnName("Количество_сост")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.НаименГруппСост)
                    .HasColumnName("наимен_групп_сост")
                    .HasMaxLength(50);

                entity.Property(e => e.НаименоГруппКомпл)
                    .HasColumnName("наимено_групп_компл")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.НаименованиеСклада)
                    .IsRequired()
                    .HasColumnName("Наименование склада")
                    .HasMaxLength(70);

                entity.Property(e => e.НаименованиеСост)
                    .IsRequired()
                    .HasColumnName("Наименование_сост")
                    .HasMaxLength(100);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(23);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионЕвродвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион Евродвери");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионНпо>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион НПО");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(24);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель)
                    .HasColumnName("покупатель")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СамовывозИзМосквы).HasColumnName("Самовывоз из Москвы");
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионНпо111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион НПО111");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(24);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель)
                    .HasColumnName("покупатель")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СамовывозИзМосквы).HasColumnName("Самовывоз из Москвы");
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионНпоFze>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион НПО FZE");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds).HasColumnName("NDS");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .IsRequired()
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("numeric(38, 17)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионНпоСос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион НПО_сос");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(24);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель)
                    .HasColumnName("покупатель")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СамовывозИзМосквы).HasColumnName("Самовывоз из Москвы");
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионНпоСос11111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион НПО_сос11111");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.SlovaNds)
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(24);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель)
                    .HasColumnName("покупатель")
                    .HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.СамовывозИзМосквы).HasColumnName("Самовывоз из Москвы");
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионСос>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регион_сос");

                entity.Property(e => e.Expr1).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.IdКаналаСбыта).HasColumnName("ID канала сбыта");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ВнешнийНомер).HasColumnName("Внешний номер");

                entity.Property(e => e.Дата).HasColumnType("datetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчетФактуры)
                    .HasColumnName("Дата счет-фактуры")
                    .HasColumnType("datetime");

                entity.Property(e => e.КодМагазина)
                    .HasColumnName("Код магазина")
                    .HasMaxLength(50);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование).HasMaxLength(255);

                entity.Property(e => e.Накладная).HasMaxLength(20);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.Покупатель).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);
            });

            modelBuilder.Entity<ТоварныйОтчетРасходРегионыЦепь>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет расход регионы цепь");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.ДатаВывоза)
                    .HasColumnName("Дата вывоза")
                    .HasColumnType("datetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Фирма)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ТоварныйОтчетСписание111111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товарный отчет списание111111");

                entity.Property(e => e.Expr1)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Акт).HasMaxLength(20);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Дата).HasColumnType("smalldatetime");

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Основание).HasMaxLength(50);

                entity.Property(e => e.Распоряжение).HasMaxLength(50);

                entity.Property(e => e.Сумма).HasColumnType("decimal(37, 6)");
            });

            modelBuilder.Entity<ТоварыДляLb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для LB");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Lb).HasColumnName("LB");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi).HasColumnName("vputi");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e.VseRas)
                    .HasColumnName("vse_ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТоварыДляLbDveri>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для LB_dveri");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Lb).HasColumnName("LB");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e.VseRas)
                    .HasColumnName("vse_ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТоварыДляLbSl>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для LB_SL");

                entity.Property(e => e.Expr1).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e.VseRas)
                    .HasColumnName("vse_ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТоварыДляLbSlУзловая>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для LB_SL-Узловая");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi).HasColumnName("vputi");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e.VseRas)
                    .HasColumnName("vse_ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТоварыДляLbСим>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для LB СИМ");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e.VseRas)
                    .HasColumnName("vse_ras")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasColumnType("decimal(12, 2)");

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Недогрузы)
                    .HasColumnName("недогрузы")
                    .HasColumnType("decimal(38, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТоварыДляГлСклада>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для гл склада");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Pri)
                    .HasColumnName("pri")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Ras)
                    .HasColumnName("ras")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputi)
                    .HasColumnName("vputi")
                    .HasColumnType("decimal(38, 3)");

                entity.Property(e => e.Vputikl).HasColumnName("vputikl");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(30);

                entity.Property(e => e.Разница).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ТоварыДляРаспискиКнРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для расписки_КН регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоКОплате)
                    .HasColumnName("Количество к оплате")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ТоварыДляРаспискиПоОплРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для расписки по опл регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(15);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.КоличествоКОплате)
                    .HasColumnName("Количество к оплате")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 6)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ТоварыДляРаспискиРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для расписки регион");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.RecKl).HasColumnName("Rec_kl");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦена)
                    .HasColumnName("Базовая цена")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.КоличествоКОплате)
                    .HasColumnName("Количество к оплате")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(38, 8)");

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ОбоснованиеБлокировки).HasColumnName("Обоснование блокировки");

                entity.Property(e => e.ЦенаПродажи)
                    .HasColumnName("Цена продажи $")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ЦенаПродажиR)
                    .HasColumnName("Цена продажи R")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ТоварыДляРаспискиТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Товары для расписки тмп");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Товары для расписки тмп")
                    .IsUnique();

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.КоличествоКОплате).HasColumnName("Количество к оплате");

                entity.Property(e => e.КоличествоОплаченное).HasColumnName("Количество оплаченное");
            });

            modelBuilder.Entity<ТоварыДляРаспискиТмпРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для расписки тмп регион");

                entity.Property(e => e.КоличествоКОплате)
                    .HasColumnName("Количество к оплате")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.КоличествоОплаченное)
                    .HasColumnName("Количество оплаченное")
                    .HasColumnType("decimal(20, 8)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");

                entity.Property(e => e.ТмпКОпл).HasColumnName("ТМП_к_опл");

                entity.Property(e => e.ТмпОпл).HasColumnName("ТМП_опл");
            });

            modelBuilder.Entity<ТоварыДляТтнДляСетей>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для ТТН для сетей");

                entity.Property(e => e.Всего).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.СуммаБезНдс)
                    .HasColumnName("Сумма без НДС")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма НДС")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<ТоварыДляТтнДляСетей1111>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Товары для ТТН для сетей1111");

                entity.Property(e => e.Всего).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 3)");

                entity.Property(e => e.СуммаБезНдс)
                    .HasColumnName("Сумма без НДС")
                    .HasColumnType("decimal(38, 7)");

                entity.Property(e => e.СуммаНдс)
                    .HasColumnName("Сумма НДС")
                    .HasColumnType("decimal(38, 6)");
            });

            modelBuilder.Entity<Торг12ДляСетейТтн>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ТОРГ12 для сетей ТТН");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_ТОРГ12 для сетей ТТН_1")
                    .IsUnique();

                entity.HasIndex(e => e.Номер)
                    .HasName("IX_ТОРГ12 для сетей ТТН")
                    .IsUnique();

                entity.HasIndex(e => e.НомерПп)
                    .HasName("IX_ТОРГ12 для сетей ТТН_2")
                    .IsUnique();

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Номер).HasMaxLength(20);

                entity.Property(e => e.НомерПп).HasColumnName("номер_пп");

                entity.Property(e => e.ПризнакАдреса)
                    .HasColumnName("Признак адреса")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ТтнДилеры>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ТТН_Дилеры");

                entity.Property(e => e.Expr1).HasMaxLength(89);

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdОрганизации).HasColumnName("ID организации");

                entity.Property(e => e.IdФирмы).HasColumnName("ID фирмы");

                entity.Property(e => e.IdЮрлица).HasColumnName("ID юрлица");

                entity.Property(e => e.UsdRu).HasColumnName("USD_RU");

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.БанковскиеРеквизиты)
                    .HasColumnName("Банковские реквизиты")
                    .HasMaxLength(250);

                entity.Property(e => e.Вместимость).HasMaxLength(50);

                entity.Property(e => e.Водитель)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Госномер)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Грузоп).HasMaxLength(512);

                entity.Property(e => e.Грузоподъемность).HasMaxLength(50);

                entity.Property(e => e.ДатЗак).HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаказа)
                    .HasColumnName("Дата заказа")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаЗаявки)
                    .HasColumnName("Дата заявки")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПлановая)
                    .HasColumnName("Дата плановая")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Дир).HasMaxLength(105);

                entity.Property(e => e.Зак).HasMaxLength(20);

                entity.Property(e => e.Заказчик).HasMaxLength(255);

                entity.Property(e => e.Кладовщик).HasMaxLength(33);

                entity.Property(e => e.КолПаллеты)
                    .HasColumnName("Кол_паллеты")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.МаркаАвтомобиля)
                    .HasColumnName("Марка автомобиля")
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.Название).HasMaxLength(50);

                entity.Property(e => e.НазваниеПочт)
                    .HasColumnName("Название_почт")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование).HasMaxLength(70);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(13);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Окпо)
                    .HasColumnName("ОКПО")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.ОкпоГр)
                    .HasColumnName("ОКПО_гр")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Организация).HasMaxLength(255);

                entity.Property(e => e.Примечание).HasMaxLength(255);

                entity.Property(e => e.ПунктРазгрузки)
                    .HasColumnName("Пункт разгрузки")
                    .HasMaxLength(255);

                entity.Property(e => e.Склад).HasMaxLength(70);

                entity.Property(e => e.Тип).HasMaxLength(50);

                entity.Property(e => e.Удостоверение)
                    .HasMaxLength(50)
                    .IsFixedLength();

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.УлицаДомПочт)
                    .HasColumnName("Улица_дом_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.Юрлицо).HasMaxLength(763);
            });

            modelBuilder.Entity<УвеличениеПоСкладамГрПодгр>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Увеличение по складам_гр_подгр");

                entity.Property(e => e.GrLog).HasColumnName("Gr_log");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.PodGrLog).HasColumnName("PodGr_log");

                entity.Property(e => e.УвГр)
                    .HasColumnName("ув_гр")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.УвПодгр)
                    .HasColumnName("ув_подгр")
                    .HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Увеличение).HasColumnType("decimal(6, 2)");
            });

            modelBuilder.Entity<УвеличениеЦеныПоСкладам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Увеличение цены по складам");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Увеличение цены по складам")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Увеличение).HasColumnType("decimal(6, 2)");
            });

            modelBuilder.Entity<УвеличениеЦеныПоСкладамГр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Увеличение цены по складам_гр");

                entity.HasIndex(e => e.IdСклада)
                    .HasName("IX_Увеличение цены по складам_гр");

                entity.HasIndex(e => new { e.IdСклада, e.GrLog })
                    .HasName("IX_Увеличение цены по складам_гр_1")
                    .IsUnique();

                entity.Property(e => e.GrLog).HasColumnName("Gr_log");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.Увеличение).HasColumnType("decimal(6, 2)");
            });

            modelBuilder.Entity<УвеличениеЦеныПоСкладамПодгр>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Увеличение цены по складам_подгр");

                entity.HasIndex(e => new { e.IdСклада, e.PodGrLog })
                    .HasName("IX_Увеличение цены по складам_подгр")
                    .IsUnique();

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.PodGrLog).HasColumnName("PodGr_log");

                entity.Property(e => e.Увеличение).HasColumnType("decimal(6, 2)");
            });

            modelBuilder.Entity<УпдТт>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("УПД_тт");

                entity.Property(e => e.Expr2)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.IdПеревозчика).HasColumnName("ID перевозчика");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Nds)
                    .HasColumnName("NDS")
                    .HasColumnType("decimal(12, 2)");

                entity.Property(e => e.SlovaNds)
                    .IsRequired()
                    .HasColumnName("slova_nds")
                    .HasMaxLength(7);

                entity.Property(e => e.UserId).HasColumnName("User ID");

                entity.Property(e => e.АдресПочт)
                    .HasColumnName("Адрес_почт")
                    .HasMaxLength(255);

                entity.Property(e => e.АдресЮр)
                    .HasColumnName("Адрес_юр")
                    .HasMaxLength(255);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.БазоваяЦенаR)
                    .HasColumnName("Базовая цена R")
                    .HasColumnType("decimal(22, 7)");

                entity.Property(e => e.БанкРек)
                    .HasColumnName("Банк_рек")
                    .HasMaxLength(322);

                entity.Property(e => e.ГлБух)
                    .HasColumnName("Гл_бух")
                    .HasMaxLength(50);

                entity.Property(e => e.Грузоотпр)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Грузоотправитель).HasMaxLength(255);

                entity.Property(e => e.Грузополучатель).HasMaxLength(255);

                entity.Property(e => e.ДатаОтпуска)
                    .HasColumnName("Дата отпуска")
                    .HasColumnType("datetime");

                entity.Property(e => e.ДатаСчета)
                    .HasColumnName("Дата счета")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Доверенность)
                    .HasColumnName("Доверенность №")
                    .HasMaxLength(50);

                entity.Property(e => e.ДоверенностьДата)
                    .HasColumnName("Доверенность дата")
                    .HasColumnType("datetime");

                entity.Property(e => e.Имя).HasMaxLength(15);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КодСтраны)
                    .HasColumnName("Код страны")
                    .HasMaxLength(10)
                    .IsFixedLength();

                entity.Property(e => e.КодТовара)
                    .IsRequired()
                    .HasColumnName("Код товара")
                    .HasMaxLength(15);

                entity.Property(e => e.Количество).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КомуОтпустить)
                    .HasColumnName("Кому отпустить")
                    .HasMaxLength(50);

                entity.Property(e => e.Кпп)
                    .HasColumnName("КПП")
                    .HasMaxLength(10);

                entity.Property(e => e.Модель).HasMaxLength(20);

                entity.Property(e => e.Ндс)
                    .HasColumnName("НДС")
                    .HasColumnType("numeric(3, 2)");

                entity.Property(e => e.НомерГтд)
                    .HasColumnName("Номер ГТД")
                    .HasMaxLength(25);

                entity.Property(e => e.НомерДоговора)
                    .HasColumnName("Номер договора")
                    .HasMaxLength(50);

                entity.Property(e => e.НомерНакл)
                    .HasColumnName("Номер накл")
                    .HasMaxLength(20);

                entity.Property(e => e.НомерПорядковый).HasColumnName("Номер порядковый");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");

                entity.Property(e => e.Объем).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Отчество).HasMaxLength(15);

                entity.Property(e => e.ПаспортСерияНомер)
                    .HasColumnName("Паспорт серия-номер")
                    .HasMaxLength(50);

                entity.Property(e => e.Руководитель).HasMaxLength(50);

                entity.Property(e => e.СтранаПроисхождения)
                    .HasColumnName("Страна происхождения")
                    .HasMaxLength(50);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Фамилия).HasMaxLength(30);

                entity.Property(e => e.Фирма).HasMaxLength(150);

                entity.Property(e => e.ЦенаУзмк)
                    .HasColumnName("Цена_УЗМК")
                    .HasColumnType("decimal(22, 7)");
            });

            modelBuilder.Entity<УсловияПоставки>(entity =>
            {
                entity.HasKey(e => e.IdусловияПоставки);

                entity.ToTable("Условия поставки");

                entity.HasIndex(e => e.IdусловияПоставки)
                    .HasName("IX_Условия поставки")
                    .IsUnique();

                entity.Property(e => e.IdусловияПоставки).HasColumnName("IDУсловияПоставки");

                entity.Property(e => e.УсловияПоставкиType).HasMaxLength(50);

                entity.Property(e => e.УсловияПоставкиTypeBl)
                    .HasColumnName("УсловияПоставкиTypeBL")
                    .HasMaxLength(50);

                entity.Property(e => e.УсловияПоставкиTypeEn)
                    .HasColumnName("УсловияПоставкиTypeEN")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<УчестьБрониПланаВСкладе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Учесть Брони плана в складе");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SumБронь)
                    .HasColumnName("Sum-Бронь")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<УчестьБрониПланаДляПланаПоставок>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Учесть брони плана для плана поставок");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordPlana).HasColumnName("Record_plana");

                entity.Property(e => e.SumБронь)
                    .HasColumnName("Sum-Бронь")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<УчестьБрониПланаДляПланаПоставокТула>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Учесть брони плана для плана поставок Тула");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordPlana).HasColumnName("Record_plana");

                entity.Property(e => e.SumБронь)
                    .HasColumnName("Sum-Бронь")
                    .HasColumnType("decimal(38, 3)");
            });

            modelBuilder.Entity<ФилиалМенеджер>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Филиал-Менеджер");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.ИннКпп)
                    .HasColumnName("ИНН_КПП")
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Пом).HasMaxLength(35);

                entity.Property(e => e.Примечание).HasMaxLength(100);

                entity.Property(e => e.Телефон).HasMaxLength(50);

                entity.Property(e => e.ТелефонПом)
                    .HasColumnName("Телефон_пом")
                    .HasMaxLength(50);

                entity.Property(e => e.ТипСклада).HasColumnName("Тип склада");

                entity.Property(e => e.УлицаДом)
                    .HasColumnName("Улица_дом")
                    .HasMaxLength(255);

                entity.Property(e => e.Фил).HasMaxLength(10);

                entity.Property(e => e.ФилиалЮр)
                    .HasColumnName("Филиал_юр")
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<ФинпланПравилоЗатраты>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Финплан_правило_затраты");

                entity.HasIndex(e => new { e.КодСтатьи, e.IdПодразделения })
                    .HasName("IX_Финплан_правило_затраты")
                    .IsUnique();

                entity.Property(e => e.IdПодразделения).HasColumnName("ID подразделения");

                entity.Property(e => e.КодСтатьи)
                    .IsRequired()
                    .HasColumnName("Код статьи")
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<ФирмаНов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Фирма нов");
            });

            modelBuilder.Entity<ФирмаНовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Фирма нов регион");

                entity.Property(e => e.Ном).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Хранилище>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Остаток).HasColumnType("decimal(38, 2)");

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ХранилищеBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище BG");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ХранилищеАстана>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище Астана");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ХранилищеВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище_все");

                entity.Property(e => e.CellId).HasColumnName("CellID");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Заказ)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.Наименование).HasMaxLength(20);

                entity.Property(e => e.Остаток).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.ПолноеНаим)
                    .IsRequired()
                    .HasColumnName("Полное_наим")
                    .HasMaxLength(100);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.ШтрихКодЯчейки).HasMaxLength(15);

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ХранилищеВсеBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище_все BG");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Остаток).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.ПолноеНаим)
                    .IsRequired()
                    .HasColumnName("Полное_наим")
                    .HasMaxLength(100);

                entity.Property(e => e.ШтрихКодЯчейки).HasMaxLength(15);

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ХранилищеВсеАстана>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище_все Астана");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Остаток).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.ПолноеНаим)
                    .IsRequired()
                    .HasColumnName("Полное_наим")
                    .HasMaxLength(100);

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.ШтрихКодЯчейки).HasMaxLength(15);

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ХранилищеВсеУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище_все УЗМК");

                entity.Property(e => e.CellId).HasColumnName("CellID");

                entity.Property(e => e.Expr1).HasMaxLength(50);

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.ВесБрутто).HasColumnName("Вес брутто");

                entity.Property(e => e.Заказ)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Клиент).HasMaxLength(255);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Остаток).HasColumnType("decimal(19, 2)");

                entity.Property(e => e.ПолноеНаим)
                    .IsRequired()
                    .HasColumnName("Полное_наим")
                    .HasMaxLength(150);

                entity.Property(e => e.Срок).HasColumnType("smalldatetime");

                entity.Property(e => e.Статус).HasMaxLength(2);

                entity.Property(e => e.Тип)
                    .IsRequired()
                    .HasColumnName("тип")
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.ШтрихКодЯчейки).HasMaxLength(15);

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ХранилищеДвижение>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Хранилище Движение");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Хранилище Движение")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.RecordIdЯчейкиКуда, e.Заказ })
                    .HasName("IX_Хранилище Движение_2")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdЯчейкиКуда).HasColumnName("Record ID ячейки куда");

                entity.Property(e => e.RecordIdЯчейкиОткуда).HasColumnName("Record ID ячейки откуда");

                entity.Property(e => e.ДатаВыхода)
                    .HasColumnName("Дата выхода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПомещения)
                    .HasColumnName("Дата помещения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Заказ)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.КоличествоВышло)
                    .HasColumnName("Количество_вышло")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоПришло)
                    .HasColumnName("Количество_пришло")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ХранилищеДвижениеBg>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Хранилище Движение BG");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Хранилище Движение BG_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.RecordIdЯчейкиКуда, e.IdТовара, e.Заказ })
                    .HasName("IX_Хранилище Движение BG")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdЯчейкиКуда).HasColumnName("Record ID ячейки куда");

                entity.Property(e => e.RecordIdЯчейкиОткуда).HasColumnName("Record ID ячейки откуда");

                entity.Property(e => e.ДатаВыхода)
                    .HasColumnName("Дата выхода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПомещения)
                    .HasColumnName("Дата помещения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.КоличествоВышло)
                    .HasColumnName("Количество_вышло")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоПришло)
                    .HasColumnName("Количество_пришло")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ХранилищеДвижениеАстана>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Хранилище Движение Астана");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Хранилище Движение Астана_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.RecordIdЯчейкиКуда, e.Заказ })
                    .HasName("IX_Хранилище Движение Астана")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdЯчейкиКуда).HasColumnName("Record ID ячейки куда");

                entity.Property(e => e.RecordIdЯчейкиОткуда).HasColumnName("Record ID ячейки откуда");

                entity.Property(e => e.ДатаВыхода)
                    .HasColumnName("Дата выхода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПомещения)
                    .HasColumnName("Дата помещения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.КоличествоВышло)
                    .HasColumnName("Количество_вышло")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоПришло)
                    .HasColumnName("Количество_пришло")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ХранилищеДвижениеУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Хранилище Движение УЗМК");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Хранилище Движение УЗМК_1")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdТовара, e.RecordIdЯчейкиКуда, e.Заказ })
                    .HasName("IX_Хранилище Движение УЗМК")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdЯчейкиКуда).HasColumnName("Record ID ячейки куда");

                entity.Property(e => e.RecordIdЯчейкиОткуда).HasColumnName("Record ID ячейки откуда");

                entity.Property(e => e.ДатаВыхода)
                    .HasColumnName("Дата выхода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПомещения)
                    .HasColumnName("Дата помещения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Заказ)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.КоличествоВышло)
                    .HasColumnName("Количество_вышло")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоПришло)
                    .HasColumnName("Количество_пришло")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Регион).HasDefaultValueSql("((1597))");
            });

            modelBuilder.Entity<ХранилищеИсторияПеремещенийУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Хранилище история перемещений УЗМК");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Хранилище история перемещений УЗМК")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.RecordIdЯчейкиКуда).HasColumnName("Record ID ячейки куда");

                entity.Property(e => e.RecordIdЯчейкиОткуда).HasColumnName("Record ID ячейки откуда");

                entity.Property(e => e.ДатаВыхода)
                    .HasColumnName("Дата выхода")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.ДатаПомещения)
                    .HasColumnName("Дата помещения")
                    .HasColumnType("smalldatetime");

                entity.Property(e => e.Заказ)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.КоличествоВышло)
                    .HasColumnName("Количество_вышло")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.КоличествоПришло)
                    .HasColumnName("Количество_пришло")
                    .HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Регион).HasDefaultValueSql("((1597))");
            });

            modelBuilder.Entity<ХранилищеУзмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Хранилище УЗМК");

                entity.Property(e => e.Адрес).HasMaxLength(10);

                entity.Property(e => e.Заказ).HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Штрихкод).HasMaxLength(30);
            });

            modelBuilder.Entity<ЦенаЕвросейф>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ЦЕНА_ЕВРОСЕЙФ");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(22);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ЦенаИмпорт>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Цена импорт");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Цена импорт")
                    .IsUnique();

                entity.Property(e => e.Cena).HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ЦенаКомплекта>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Цена комплекта");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SPriceMin).HasColumnName("S_Price_min");

                entity.Property(e => e.SSebestoimost).HasColumnName("S_Sebestoimost");

                entity.Property(e => e.SSsr).HasColumnName("S_SSR");

                entity.Property(e => e.SSsrUzmk).HasColumnName("S_SSR_UZMK");

                entity.Property(e => e.SЦенаFob).HasColumnName("S_Цена_FOB");

                entity.Property(e => e.SЦеныFobРуб).HasColumnName("S_Цены_FOB_руб");

                entity.Property(e => e.SЦпСосенки).HasColumnName("S_ЦП_Сосенки");

                entity.Property(e => e.SЦпТула).HasColumnName("S_ЦП_Тула");
            });

            modelBuilder.Entity<ЦенаКомплектаПредварительная>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Цена комплекта предварительная");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.SPriceMin).HasColumnName("S_Price_min");

                entity.Property(e => e.SSebestoimost).HasColumnName("S_Sebestoimost");

                entity.Property(e => e.SSsr).HasColumnName("S_SSR");

                entity.Property(e => e.SSsrUzmk).HasColumnName("S_SSR_UZMK");

                entity.Property(e => e.SЦенаFob).HasColumnName("S_Цена_FOB");

                entity.Property(e => e.SЦеныFobРуб).HasColumnName("S_Цены_FOB_руб");

                entity.Property(e => e.SЦпСосенки).HasColumnName("S_ЦП_Сосенки");

                entity.Property(e => e.SЦпТула).HasColumnName("S_ЦП_Тула");
            });

            modelBuilder.Entity<ЦеныДляВнутреннегоИспользования>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Цены для внутреннего использования");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.PriceMin)
                    .HasColumnName("Price_min")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Sebestoimost).HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Ssr)
                    .HasColumnName("SSR")
                    .HasColumnType("decimal(18, 3)");

                entity.Property(e => e.Цена).HasColumnType("decimal(29, 3)");

                entity.Property(e => e.ЦенаОлл)
                    .HasColumnName("Цена_ОЛЛ")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ЦеныДляРегионов>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Цены для Регионов");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Ув)
                    .HasColumnName("ув")
                    .HasColumnType("decimal(18, 9)");

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 12)");
            });

            modelBuilder.Entity<ЦеныДляРегионовДвери>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Цены для Регионов Двери");

                entity.Property(e => e.IdСклада).HasColumnName("ID склада");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Артикул).HasMaxLength(30);

                entity.Property(e => e.Товар)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.Филиал)
                    .IsRequired()
                    .HasMaxLength(70);

                entity.Property(e => e.Цена).HasColumnType("decimal(38, 12)");
            });

            modelBuilder.Entity<ЦеныДляТулметцентраПоОстаткамСм>(entity =>
            {
                entity.HasKey(e => e.IdТовара);

                entity.ToTable("Цены для Тулметцентра по остаткам СМ");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .ValueGeneratedNever();

                entity.Property(e => e.ЦенаБезНдс)
                    .HasColumnName("Цена_без_НДС")
                    .HasColumnType("decimal(18, 3)");
            });

            modelBuilder.Entity<ЦеныЗмк>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Цены ЗМК");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_Цены ЗМК")
                    .IsUnique();

                entity.Property(e => e.Cena).HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");
            });

            modelBuilder.Entity<ЦеныПоДилерам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Цены по дилерам");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Цены по дилерам")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdДилера, e.IdТовара })
                    .HasName("IX_Цены по дилерам_1")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ЦенаСНдс)
                    .HasColumnName("Цена_с_НДС")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.ЦенаСНдсВ).HasColumnName("Цена_с_НДС_В");

                entity.Property(e => e.ЦенаСНдсМ).HasColumnName("Цена_с_НДС_М");

                entity.Property(e => e.ЦенаСНдсР).HasColumnName("Цена_с_НДС_Р");

                entity.Property(e => e.ЦенаСНдсЮ).HasColumnName("Цена_с_НДС_Ю");
            });

            modelBuilder.Entity<ЦеныПоДилерамНовРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Цены по дилерам_нов регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Цены по дилерам_нов регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdДилера, e.IdТовара, e.Регион })
                    .HasName("IX_Цены по дилерам_нов регион_1")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ЦенаСНдс).HasColumnName("Цена_с_НДС");

                entity.Property(e => e.ЦенаСНдсВ).HasColumnName("Цена_с_НДС_В");

                entity.Property(e => e.ЦенаСНдсКкб).HasColumnName("Цена_с_НДС_ККБ");

                entity.Property(e => e.ЦенаСНдсМ).HasColumnName("Цена_с_НДС_М");

                entity.Property(e => e.ЦенаСНдсМА).HasColumnName("Цена_с_НДС_М_а");

                entity.Property(e => e.ЦенаСНдсПу).HasColumnName("Цена_с_НДС_ПУ");

                entity.Property(e => e.ЦенаСНдсПуА).HasColumnName("Цена_с_НДС_ПУ_а");

                entity.Property(e => e.ЦенаСНдсР).HasColumnName("Цена_с_НДС_Р");

                entity.Property(e => e.ЦенаСНдсСб).HasColumnName("Цена_с_НДС_СБ");

                entity.Property(e => e.ЦенаСНдсСбА).HasColumnName("Цена_с_НДС_СБ_а");

                entity.Property(e => e.ЦенаСНдсСз).HasColumnName("Цена_с_НДС_СЗ");

                entity.Property(e => e.ЦенаСНдсСзА).HasColumnName("Цена_с_НДС_СЗ_а");

                entity.Property(e => e.ЦенаСНдсЮг).HasColumnName("Цена_с_НДС_ЮГ");

                entity.Property(e => e.ЦенаСНдсЮгА).HasColumnName("Цена_с_НДС_ЮГ_а");
            });

            modelBuilder.Entity<ЦеныПоДилерамРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Цены по дилерам регион");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Цены по дилерам регион")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdДилера, e.IdТовара, e.Регион })
                    .HasName("IX_Цены по дилерам регион_1")
                    .IsUnique();

                entity.Property(e => e.IdДилера)
                    .HasColumnName("ID дилера")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.IdТовара)
                    .HasColumnName("ID товара")
                    .HasDefaultValueSql("(0)");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ЦенаСНдс)
                    .HasColumnName("Цена_с_НДС")
                    .HasDefaultValueSql("(0)");
            });

            modelBuilder.Entity<ЦеныПоКлиентам>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Цены по клиентам");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Цены по клиентам")
                    .IsUnique();

                entity.HasIndex(e => new { e.IdДилера, e.IdТовара })
                    .HasName("IX_Цены по клиентам_1")
                    .IsUnique();

                entity.Property(e => e.IdДилера).HasColumnName("ID дилера");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.RecordId)
                    .HasColumnName("Record ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ЦенаСНдс).HasColumnName("Цена_с_НДС");
            });

            modelBuilder.Entity<ЦпTmp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ЦП_tmp");

                entity.HasIndex(e => new { e.IdТовара, e.Регион, e.UserId })
                    .HasName("IX_ЦП_tmp");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Цп)
                    .HasColumnName("ЦП")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ЦпДляDib>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ЦП для DIB");

                entity.HasIndex(e => e.IdТовара)
                    .HasName("IX_ЦП для DIB_1")
                    .IsUnique();

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Цп)
                    .HasColumnName("ЦП")
                    .HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<ЧастиОплаченыГруппКвРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Части оплачены_групп_кв регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.Количество).HasColumnType("decimal(38, 6)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ЧастиОтгруженыГруппКвРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Части отгружены_групп_кв регион");

                entity.Property(e => e.IdТовара).HasColumnName("ID товара");

                entity.Property(e => e.КоличествоВНалоговой)
                    .HasColumnName("Количество в налоговой")
                    .HasColumnType("decimal(38, 6)");

                entity.Property(e => e.НомерПокупателя).HasColumnName("Номер покупателя");
            });

            modelBuilder.Entity<ЧастиТмп>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Части_тмп");

                entity.HasIndex(e => e.RecordId)
                    .HasName("IX_Части_тмп")
                    .IsUnique();

                entity.Property(e => e.RecordId).HasColumnName("Record ID");

                entity.Property(e => e.НомерСчета).HasColumnName("Номер счета");
            });

            modelBuilder.Entity<ЮрлицаИнн>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Юрлица_ИНН");

                entity.Property(e => e.MinIdЮрлица).HasColumnName("Min-ID юрлица");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КолРегионов).HasColumnName("Кол_регионов");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<ЮрлицаИннВсе>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Юрлица_ИНН_все");

                entity.Property(e => e.MinIdЮрлица).HasColumnName("Min-ID юрлица");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КолРегионов).HasColumnName("Кол_регионов");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<ЮрлицаИннГрупп>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Юрлица_ИНН_групп");

                entity.Property(e => e.Expr3).HasMaxLength(50);

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);
            });

            modelBuilder.Entity<ЮрлицаИннРегион>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Юрлица_ИНН регион");

                entity.Property(e => e.MinIdЮрлица).HasColumnName("Min-ID юрлица");

                entity.Property(e => e.Инн)
                    .HasColumnName("ИНН")
                    .HasMaxLength(12);

                entity.Property(e => e.КолРегионов).HasColumnName("Кол_регионов");

                entity.Property(e => e.Наименование).HasMaxLength(50);
            });

            modelBuilder.Entity<ЮрлицаОбъединенные>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Юрлица_объединенные");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Idvo).HasColumnName("IDVO");

                entity.Property(e => e.Inn)
                    .HasColumnName("INN")
                    .HasMaxLength(12);

                entity.Property(e => e.RecKl)
                    .HasColumnName("Rec_kl")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Клиент)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Наименование)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Объединение)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.РегионЦо).HasColumnName("Регион ЦО");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
